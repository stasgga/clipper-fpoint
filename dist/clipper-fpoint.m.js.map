{"version":3,"file":"clipper-fpoint.m.js","sources":["../src/clipper_unminified.js"],"sourcesContent":["/*******************************************************************************\n *                                                                              *\n * Author    :  Angus Johnson                                                   *\n * Version   :  6.4.2                                                           *\n * Date      :  27 February 2017                                                *\n * Website   :  http://www.angusj.com                                           *\n * Copyright :  Angus Johnson 2010-2017                                         *\n *                                                                              *\n * License:                                                                     *\n * Use, modification & distribution is subject to Boost Software License Ver 1. *\n * http://www.boost.org/LICENSE_1_0.txt                                         *\n *                                                                              *\n * Attributions:                                                                *\n * The code in this library is an extension of Bala Vatti's clipping algorithm: *\n * \"A generic solution to polygon clipping\"                                     *\n * Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.             *\n * http://portal.acm.org/citation.cfm?id=129906                                 *\n *                                                                              *\n * Computer graphics and geometric modeling: implementation and algorithms      *\n * By Max K. Agoston                                                            *\n * Springer; 1 edition (January 4, 2005)                                        *\n * http://books.google.com/books?q=vatti+clipping+agoston                       *\n *                                                                              *\n * See also:                                                                    *\n * \"Polygon Offsetting by Computing Winding Numbers\"                            *\n * Paper no. DETC2005-85513 pp. 565-575                                         *\n * ASME 2005 International Design Engineering Technical Conferences             *\n * and Computers and Information in Engineering Conference (IDETC/CIE2005)      *\n * September 24-28, 2005 , Long Beach, California, USA                          *\n * http://www.me.berkeley.edu/~mcmains/pubs/DAC05OffsetPolygon.pdf              *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Author    :  Timo                                                            *\n * Version   :  6.4.2.2 (FPoint)                                                *\n * Date      :  8 September 2017                                                *\n *                                                                              *\n * This is a translation of the C# Clipper library to Javascript.               *\n *                                                                              *\n *******************************************************************************/\n\n\tvar ClipperLib = {};\n\tClipperLib.version = '6.4.2.2';\n\n\t//UseLines: Enables open path clipping. Adds a very minor cost to performance.\n\tClipperLib.use_lines = true;\n\n\t//ClipperLib.use_xyz: adds a Z member to FPoint. Adds a minor cost to performance.\n\tClipperLib.use_xyz = false;\n\t// Here starts the actual Clipper library:\n\t// Helper function to support Inheritance in Javascript\n\tvar Inherit = function (ce, ce2)\n\t{\n\t\tvar p;\n\t\tif (typeof (Object.getOwnPropertyNames) === 'undefined')\n\t\t{\n\t\t\tfor (p in ce2.prototype)\n\t\t\t\tif (typeof (ce.prototype[p]) === 'undefined' || ce.prototype[p] === Object.prototype[p]) ce.prototype[p] = ce2.prototype[p];\n\t\t\tfor (p in ce2)\n\t\t\t\tif (typeof (ce[p]) === 'undefined') ce[p] = ce2[p];\n\t\t\tce.$baseCtor = ce2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar props = Object.getOwnPropertyNames(ce2.prototype);\n\t\t\tfor (var i = 0; i < props.length; i++)\n\t\t\t\tif (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) === 'undefined') Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));\n\t\t\tfor (p in ce2)\n\t\t\t\tif (typeof (ce[p]) === 'undefined') ce[p] = ce2[p];\n\t\t\tce.$baseCtor = ce2;\n\t\t}\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.Path = function ()\n\t{\n\t\treturn [];\n\t};\n\n\tClipperLib.Path.prototype.push = Array.prototype.push;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.Paths = function ()\n\t{\n\t\treturn []; // Was previously [[]], but caused problems when pushed\n\t};\n\n\tClipperLib.Paths.prototype.push = Array.prototype.push;\n\n\t// PolyTree & PolyNode start\n\t/**\n\t* @suppress {missingProperties}\n\t*/\n\tClipperLib.PolyNode = function ()\n\t{\n\t\tthis.m_Parent = null;\n\t\tthis.m_polygon = new ClipperLib.Path();\n\t\tthis.m_Index = 0;\n\t\tthis.m_jointype = 0;\n\t\tthis.m_endtype = 0;\n\t\tthis.m_Childs = [];\n\t\tthis.IsOpen = false;\n\t};\n\n\tClipperLib.PolyNode.prototype.IsHoleNode = function ()\n\t{\n\t\tvar result = true;\n\t\tvar node = this.m_Parent;\n\t\twhile (node !== null)\n\t\t{\n\t\t\tresult = !result;\n\t\t\tnode = node.m_Parent;\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.PolyNode.prototype.ChildCount = function ()\n\t{\n\t\treturn this.m_Childs.length;\n\t};\n\n\tClipperLib.PolyNode.prototype.Contour = function ()\n\t{\n\t\treturn this.m_polygon;\n\t};\n\n\tClipperLib.PolyNode.prototype.AddChild = function (Child)\n\t{\n\t\tvar cnt = this.m_Childs.length;\n\t\tthis.m_Childs.push(Child);\n\t\tChild.m_Parent = this;\n\t\tChild.m_Index = cnt;\n\t};\n\n\tClipperLib.PolyNode.prototype.GetNext = function ()\n\t{\n\t\tif (this.m_Childs.length > 0)\n\t\t\treturn this.m_Childs[0];\n\t\telse\n\t\t\treturn this.GetNextSiblingUp();\n\t};\n\n\tClipperLib.PolyNode.prototype.GetNextSiblingUp = function ()\n\t{\n\t\tif (this.m_Parent === null)\n\t\t\treturn null;\n\t\telse if (this.m_Index === this.m_Parent.m_Childs.length - 1)\n\t\t\treturn this.m_Parent.GetNextSiblingUp();\n\t\telse\n\t\t\treturn this.m_Parent.m_Childs[this.m_Index + 1];\n\t};\n\n\tClipperLib.PolyNode.prototype.Childs = function ()\n\t{\n\t\treturn this.m_Childs;\n\t};\n\n\tClipperLib.PolyNode.prototype.Parent = function ()\n\t{\n\t\treturn this.m_Parent;\n\t};\n\n\tClipperLib.PolyNode.prototype.IsHole = function ()\n\t{\n\t\treturn this.IsHoleNode();\n\t};\n\n\t// PolyTree : PolyNode\n\t/**\n\t * @suppress {missingProperties}\n\t * @constructor\n\t */\n\tClipperLib.PolyTree = function ()\n\t{\n\t\tthis.m_AllPolys = [];\n\t\tClipperLib.PolyNode.call(this);\n\t};\n\n\tClipperLib.PolyTree.prototype.Clear = function ()\n\t{\n\t\tfor (var i = 0, ilen = this.m_AllPolys.length; i < ilen; i++)\n\t\t\tthis.m_AllPolys[i] = null;\n\t\tthis.m_AllPolys.length = 0;\n\t\tthis.m_Childs.length = 0;\n\t};\n\n\tClipperLib.PolyTree.prototype.GetFirst = function ()\n\t{\n\t\tif (this.m_Childs.length > 0)\n\t\t\treturn this.m_Childs[0];\n\t\telse\n\t\t\treturn null;\n\t};\n\n\tClipperLib.PolyTree.prototype.Total = function ()\n\t{\n\t\tvar result = this.m_AllPolys.length;\n\t\t//with negative offsets, ignore the hidden outer polygon ...\n\t\tif (result > 0 && this.m_Childs[0] !== this.m_AllPolys[0]) result--;\n\t\treturn result;\n\t};\n\n\tInherit(ClipperLib.PolyTree, ClipperLib.PolyNode);\n\n\t// PolyTree & PolyNode end\n\n\tClipperLib.Clear = function (a)\n\t{\n\t\ta.length = 0;\n\t};\n\n\t//ClipperLib.MaxSteps = 64; // How many steps at maximum in arc in BuildArc() function\n\tClipperLib.PI = 3.141592653589793;\n\tClipperLib.PI2 = 2 * 3.141592653589793;\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.FPoint = function ()\n\t{\n\t\tvar a = arguments,\n\t\t\talen = a.length;\n\t\tthis.X = 0;\n\t\tthis.Y = 0;\n\t\tif (ClipperLib.use_xyz)\n\t\t{\n\t\t\tthis.Z = 0;\n\t\t\tif (alen === 3) // public FPoint(cInt x, cInt y, cInt z = 0)\n\t\t\t{\n\t\t\t\tthis.X = a[0];\n\t\t\t\tthis.Y = a[1];\n\t\t\t\tthis.Z = a[2];\n\t\t\t}\n\t\t\telse if (alen === 2) // public FPoint(cInt x, cInt y)\n\t\t\t{\n\t\t\t\tthis.X = a[0];\n\t\t\t\tthis.Y = a[1];\n\t\t\t\tthis.Z = 0;\n\t\t\t}\n\t\t\telse if (alen === 1)\n\t\t\t{\n\t\t\t\tif (a[0] instanceof ClipperLib.FPoint) // public FPoint(FPoint dp)\n\t\t\t\t{\n\t\t\t\t\tvar dp = a[0];\n\t\t\t\t\tthis.X = dp.X;\n\t\t\t\t\tthis.Y = dp.Y;\n\t\t\t\t\tthis.Z = 0;\n\t\t\t\t}\n\t\t\t\telse // public FPoint(FPoint pt)\n\t\t\t\t{\n\t\t\t\t\tvar pt = a[0];\n\t\t\t\t\tif (typeof (pt.Z) === \"undefined\") pt.Z = 0;\n\t\t\t\t\tthis.X = pt.X;\n\t\t\t\t\tthis.Y = pt.Y;\n\t\t\t\t\tthis.Z = pt.Z;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse // public FPoint()\n\t\t\t{\n\t\t\t\tthis.X = 0;\n\t\t\t\tthis.Y = 0;\n\t\t\t\tthis.Z = 0;\n\t\t\t}\n\t\t}\n\t\telse // if (!ClipperLib.use_xyz)\n\t\t{\n\t\t\tif (alen === 2) // public FPoint(cInt X, cInt Y)\n\t\t\t{\n\t\t\t\tthis.X = a[0];\n\t\t\t\tthis.Y = a[1];\n\t\t\t}\n\t\t\telse if (alen === 1)\n\t\t\t{\n\t\t\t\tif (a[0] instanceof ClipperLib.FPoint) // public FPoint(FPoint dp)\n\t\t\t\t{\n\t\t\t\t\tvar dp = a[0];\n\t\t\t\t\tthis.X = dp.X;\n\t\t\t\t\tthis.Y = dp.Y;\n\t\t\t\t}\n\t\t\t\telse // public FPoint(FPoint pt)\n\t\t\t\t{\n\t\t\t\t\tvar pt = a[0];\n\t\t\t\t\tthis.X = pt.X;\n\t\t\t\t\tthis.Y = pt.Y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse // public FPoint(FPoint pt)\n\t\t\t{\n\t\t\t\tthis.X = 0;\n\t\t\t\tthis.Y = 0;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.FPoint.op_Equality = function (a, b)\n\t{\n\t\t//return a == b;\n\t\treturn a.X === b.X && a.Y === b.Y;\n\t};\n\n\tClipperLib.FPoint.op_Inequality = function (a, b)\n\t{\n\t\t//return a !== b;\n\t\treturn a.X !== b.X || a.Y !== b.Y;\n\t};\n\n\t/*\n  ClipperLib.FPoint.prototype.Equals = function (obj)\n  {\n    if (obj === null)\n        return false;\n    if (obj instanceof ClipperLib.FPoint)\n    {\n        var a = Cast(obj, ClipperLib.FPoint);\n        return (this.X == a.X) && (this.Y == a.Y);\n    }\n    else\n        return false;\n  };\n\n\t*/\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.FPoint0 = function ()\n\t{\n\t\tthis.X = 0;\n\t\tthis.Y = 0;\n\t\tif (ClipperLib.use_xyz)\n\t\t\tthis.Z = 0;\n\t};\n\n\tClipperLib.FPoint0.prototype = ClipperLib.FPoint.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.FPoint1 = function (pt)\n\t{\n\t\tthis.X = pt.X;\n\t\tthis.Y = pt.Y;\n\t\tif (ClipperLib.use_xyz)\n\t\t{\n\t\t\tif (typeof pt.Z === \"undefined\") this.Z = 0;\n\t\t\telse this.Z = pt.Z;\n\t\t}\n\t};\n\n\tClipperLib.FPoint1.prototype = ClipperLib.FPoint.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.FPoint1dp = function (dp)\n\t{\n\t\tthis.X = dp.X;\n\t\tthis.Y = dp.Y;\n\t\tif (ClipperLib.use_xyz)\n\t\t\tthis.Z = 0;\n\t};\n\n\tClipperLib.FPoint1dp.prototype = ClipperLib.FPoint.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.FPoint2 = function (x, y, z)\n\t{\n\t\tthis.X = x;\n\t\tthis.Y = y;\n\t\tif (ClipperLib.use_xyz)\n\t\t{\n\t\t\tif (typeof z === \"undefined\") this.Z = 0;\n\t\t\telse this.Z = z;\n\t\t}\n\t};\n\n\tClipperLib.FPoint2.prototype = ClipperLib.FPoint.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.FRect = function ()\n\t{\n\t\tvar a = arguments,\n\t\t\talen = a.length;\n\t\tif (alen === 4) // function (l, t, r, b)\n\t\t{\n\t\t\tthis.left = a[0];\n\t\t\tthis.top = a[1];\n\t\t\tthis.right = a[2];\n\t\t\tthis.bottom = a[3];\n\t\t}\n\t\telse if (alen === 1) // function (ir)\n\t\t{\n\t\t\tvar ir = a[0];\n\t\t\tthis.left = ir.left;\n\t\t\tthis.top = ir.top;\n\t\t\tthis.right = ir.right;\n\t\t\tthis.bottom = ir.bottom;\n\t\t}\n\t\telse // function ()\n\t\t{\n\t\t\tthis.left = 0;\n\t\t\tthis.top = 0;\n\t\t\tthis.right = 0;\n\t\t\tthis.bottom = 0;\n\t\t}\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.FRect0 = function ()\n\t{\n\t\tthis.left = 0;\n\t\tthis.top = 0;\n\t\tthis.right = 0;\n\t\tthis.bottom = 0;\n\t};\n\n\tClipperLib.FRect0.prototype = ClipperLib.FRect.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.FRect1 = function (ir)\n\t{\n\t\tthis.left = ir.left;\n\t\tthis.top = ir.top;\n\t\tthis.right = ir.right;\n\t\tthis.bottom = ir.bottom;\n\t};\n\n\tClipperLib.FRect1.prototype = ClipperLib.FRect.prototype;\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.FRect4 = function (l, t, r, b)\n\t{\n\t\tthis.left = l;\n\t\tthis.top = t;\n\t\tthis.right = r;\n\t\tthis.bottom = b;\n\t};\n\n\tClipperLib.FRect4.prototype = ClipperLib.FRect.prototype;\n\n\tClipperLib.ClipType = {\n\t\tctIntersection: 0,\n\t\tctUnion: 1,\n\t\tctDifference: 2,\n\t\tctXor: 3\n\t};\n\n\tClipperLib.PolyType = {\n\t\tptSubject: 0,\n\t\tptClip: 1\n\t};\n\n\tClipperLib.PolyFillType = {\n\t\tpftEvenOdd: 0,\n\t\tpftNonZero: 1,\n\t\tpftPositive: 2,\n\t\tpftNegative: 3\n\t};\n\n\tClipperLib.JoinType = {\n\t\tjtSquare: 0,\n\t\tjtRound: 1,\n\t\tjtMiter: 2\n\t};\n\n\tClipperLib.EndType = {\n\t\tetOpenSquare: 0,\n\t\tetOpenRound: 1,\n\t\tetOpenButt: 2,\n\t\tetClosedLine: 3,\n\t\tetClosedPolygon: 4\n\t};\n\n\tClipperLib.EdgeSide = {\n\t\tesLeft: 0,\n\t\tesRight: 1\n\t};\n\n\tClipperLib.Direction = {\n\t\tdRightToLeft: 0,\n\t\tdLeftToRight: 1\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.TEdge = function ()\n\t{\n\t\tthis.Bot = new ClipperLib.FPoint0();\n\t\tthis.Curr = new ClipperLib.FPoint0(); //current (updated for every new scanbeam)\n\t\tthis.Top = new ClipperLib.FPoint0();\n\t\tthis.Delta = new ClipperLib.FPoint0();\n\t\tthis.Dx = 0;\n\t\tthis.PolyTyp = ClipperLib.PolyType.ptSubject;\n\t\tthis.Side = ClipperLib.EdgeSide.esLeft; //side only refers to current side of solution poly\n\t\tthis.WindDelta = 0; //1 or -1 depending on winding direction\n\t\tthis.WindCnt = 0;\n\t\tthis.WindCnt2 = 0; //winding count of the opposite polytype\n\t\tthis.OutIdx = 0;\n\t\tthis.Next = null;\n\t\tthis.Prev = null;\n\t\tthis.NextInLML = null;\n\t\tthis.NextInAEL = null;\n\t\tthis.PrevInAEL = null;\n\t\tthis.NextInSEL = null;\n\t\tthis.PrevInSEL = null;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.IntersectNode = function ()\n\t{\n\t\tthis.Edge1 = null;\n\t\tthis.Edge2 = null;\n\t\tthis.Pt = new ClipperLib.FPoint0();\n\t};\n\n\tClipperLib.MyIntersectNodeSort = function () {};\n\n\tClipperLib.MyIntersectNodeSort.Compare = function (node1, node2)\n\t{\n\t\tvar i = node2.Pt.Y - node1.Pt.Y;\n\t\tif (i > 0) return 1;\n\t\telse if (i < 0) return -1;\n\t\telse return 0;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.LocalMinima = function ()\n\t{\n\t\tthis.Y = 0;\n\t\tthis.LeftBound = null;\n\t\tthis.RightBound = null;\n\t\tthis.Next = null;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.Scanbeam = function ()\n\t{\n\t\tthis.Y = 0;\n\t\tthis.Next = null;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.Maxima = function ()\n\t{\n\t\tthis.X = 0;\n\t\tthis.Next = null;\n\t\tthis.Prev = null;\n\t};\n\n\t//OutRec: contains a path in the clipping solution. Edges in the AEL will\n\t//carry a pointer to an OutRec when they are part of the clipping solution.\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.OutRec = function ()\n\t{\n\t\tthis.Idx = 0;\n\t\tthis.IsHole = false;\n\t\tthis.IsOpen = false;\n\t\tthis.FirstLeft = null; //see comments in clipper.pas\n\t\tthis.Pts = null;\n\t\tthis.BottomPt = null;\n\t\tthis.PolyNode = null;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.OutPt = function ()\n\t{\n\t\tthis.Idx = 0;\n\t\tthis.Pt = new ClipperLib.FPoint0();\n\t\tthis.Next = null;\n\t\tthis.Prev = null;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.Join = function ()\n\t{\n\t\tthis.OutPt1 = null;\n\t\tthis.OutPt2 = null;\n\t\tthis.OffPt = new ClipperLib.FPoint0();\n\t};\n\n\tClipperLib.ClipperBase = function ()\n\t{\n\t\tthis.m_MinimaList = null;\n\t\tthis.m_CurrentLM = null;\n\t\tthis.m_edges = new Array();\n\t\tthis.m_HasOpenPaths = false;\n\t\tthis.PreserveCollinear = false;\n\t\tthis.m_Scanbeam = null;\n\t\tthis.m_PolyOuts = null;\n\t\tthis.m_ActiveEdges = null;\n\t};\n\n\tClipperLib.ClipperBase.horizontal = -3.4E+38;\n\tClipperLib.ClipperBase.Skip = -2;\n\tClipperLib.ClipperBase.Unassigned = -1;\n\tClipperLib.ClipperBase.tolerance = 1E-20;\n\n\t// The MAX_VALUE property has a value of 1.7976931348623157e+308. Values larger than MAX_VALUE are represented as \"Infinity\".\n\t//MIN_VALUE has a value of 5e-324. Values smaller than MIN_VALUE (\"underflow values\") are converted to 0.\n\tClipperLib.ClipperBase.maxValue = Math.sqrt(Number.MAX_VALUE); // 1.3407807929942596e+154\n\tClipperLib.ClipperBase.minValue = Math.sqrt(Number.MIN_VALUE); // 2.2227587494850775e-162\n\n\tClipperLib.ClipperBase.near_zero = function (val)\n\t{\n\t\treturn (val > -ClipperLib.ClipperBase.tolerance) && (val < ClipperLib.ClipperBase.tolerance);\n\t};\n\n\tClipperLib.ClipperBase.IsHorizontal = function (e)\n\t{\n\t\treturn e.Delta.Y === 0;\n\t};\n\n\tClipperLib.ClipperBase.prototype.PointIsVertex = function (pt, pp)\n\t{\n\t\tvar pp2 = pp;\n\t\tdo {\n\t\t\tif (ClipperLib.FPoint.op_Equality(pp2.Pt, pt))\n\t\t\t\treturn true;\n\t\t\tpp2 = pp2.Next;\n\t\t}\n\t\twhile (pp2 !== pp)\n\t\treturn false;\n\t};\n\n\tClipperLib.ClipperBase.prototype.PointOnLineSegment = function (pt, linePt1, linePt2)\n\t{\n\t\t\treturn ((pt.X === linePt1.X) && (pt.Y === linePt1.Y)) || ((pt.X === linePt2.X) && (pt.Y === linePt2.Y)) || (((pt.X > linePt1.X) === (pt.X < linePt2.X)) && ((pt.Y > linePt1.Y) === (pt.Y < linePt2.Y)) && ((pt.X - linePt1.X) * (linePt2.Y - linePt1.Y) === (linePt2.X - linePt1.X) * (pt.Y - linePt1.Y)));\n\t};\n\n\tClipperLib.ClipperBase.prototype.PointOnPolygon = function (pt, pp)\n\t{\n\t\tvar pp2 = pp;\n\t\twhile (true)\n\t\t{\n\t\t\tif (this.PointOnLineSegment(pt, pp2.Pt, pp2.Next.Pt))\n\t\t\t\treturn true;\n\t\t\tpp2 = pp2.Next;\n\t\t\tif (pp2 === pp)\n\t\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t};\n\n\tClipperLib.ClipperBase.prototype.SlopesEqual = ClipperLib.ClipperBase.SlopesEqual = function ()\n\t{\n\t\tvar a = arguments,\n\t\t\talen = a.length;\n\t\tvar e1, e2, pt1, pt2, pt3, pt4;\n\t\tif (alen === 2) // function (e1, e2)\n\t\t{\n\t\t\te1 = a[0];\n\t\t\te2 = a[1];\n\t\t\treturn e1.Delta.Y * e2.Delta.X === e1.Delta.X * e2.Delta.Y;\n\t\t}\n\t\telse if (alen === 3) // function (pt1, pt2, pt3)\n\t\t{\n\t\t\tpt1 = a[0];\n\t\t\tpt2 = a[1];\n\t\t\tpt3 = a[2];\n\t\t\treturn (pt1.Y - pt2.Y) * (pt2.X - pt3.X) - (pt1.X - pt2.X) * (pt2.Y - pt3.Y) === 0;\n\t\t}\n\t\telse // function (pt1, pt2, pt3, pt4)\n\t\t{\n\t\t\tpt1 = a[0];\n\t\t\tpt2 = a[1];\n\t\t\tpt3 = a[2];\n\t\t\tpt4 = a[3];\n\t\t\treturn (pt1.Y - pt2.Y) * (pt3.X - pt4.X) - (pt1.X - pt2.X) * (pt3.Y - pt4.Y) === 0;\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.SlopesEqual3 = function (e1, e2)\n\t{\n\t\treturn e1.Delta.Y * e2.Delta.X === e1.Delta.X * e2.Delta.Y;\n\t};\n\n\tClipperLib.ClipperBase.SlopesEqual4 = function (pt1, pt2, pt3)\n\t{\n\t\treturn (pt1.Y - pt2.Y) * (pt2.X - pt3.X) - (pt1.X - pt2.X) * (pt2.Y - pt3.Y) === 0;\n\t};\n\n\tClipperLib.ClipperBase.SlopesEqual5 = function (pt1, pt2, pt3, pt4)\n\t{\n\t\treturn (pt1.Y - pt2.Y) * (pt3.X - pt4.X) - (pt1.X - pt2.X) * (pt3.Y - pt4.Y) === 0;\n\t};\n\n\tClipperLib.ClipperBase.prototype.Clear = function ()\n\t{\n\t\tthis.DisposeLocalMinimaList();\n\t\tfor (var i = 0, ilen = this.m_edges.length; i < ilen; ++i)\n\t\t{\n\t\t\tfor (var j = 0, jlen = this.m_edges[i].length; j < jlen; ++j)\n\t\t\t\tthis.m_edges[i][j] = null;\n\t\t\tClipperLib.Clear(this.m_edges[i]);\n\t\t}\n\t\tClipperLib.Clear(this.m_edges);\n\t\tthis.m_HasOpenPaths = false;\n\t};\n\n\tClipperLib.ClipperBase.prototype.DisposeLocalMinimaList = function ()\n\t{\n\t\twhile (this.m_MinimaList !== null)\n\t\t{\n\t\t\tvar tmpLm = this.m_MinimaList.Next;\n\t\t\tthis.m_MinimaList = null;\n\t\t\tthis.m_MinimaList = tmpLm;\n\t\t}\n\t\tthis.m_CurrentLM = null;\n\t};\n\n\tClipperLib.ClipperBase.prototype.RangeTest = function (pt)\n\t{\n\t\tif(pt.X > ClipperLib.ClipperBase.maxValue || pt.X < -ClipperLib.ClipperBase.maxValue\n\t\t|| pt.Y > ClipperLib.ClipperBase.maxValue || pt.Y < -ClipperLib.ClipperBase.maxValue\n|| (pt.X > 0 && pt.X < ClipperLib.ClipperBase.minValue)\n|| (pt.Y > 0 && pt.Y < ClipperLib.ClipperBase.minValue)\n|| (pt.X < 0 && pt.X > -ClipperLib.ClipperBase.minValue)\n|| (pt.Y < 0 && pt.Y > -ClipperLib.ClipperBase.minValue))\n\t\t\tClipperLib.Error(\"Coordinate outside allowed range in RangeTest().\");\n\t};\n\n\tClipperLib.ClipperBase.prototype.InitEdge = function (e, eNext, ePrev, pt)\n\t{\n\t\te.Next = eNext;\n\t\te.Prev = ePrev;\n\t\t//e.Curr = pt;\n\t\te.Curr.X = pt.X;\n\t\te.Curr.Y = pt.Y;\n\t\tif (ClipperLib.use_xyz) e.Curr.Z = pt.Z;\n\t\te.OutIdx = -1;\n\t};\n\n\tClipperLib.ClipperBase.prototype.InitEdge2 = function (e, polyType)\n\t{\n\t\tif (e.Curr.Y >= e.Next.Curr.Y)\n\t\t{\n\t\t\t//e.Bot = e.Curr;\n\t\t\te.Bot.X = e.Curr.X;\n\t\t\te.Bot.Y = e.Curr.Y;\n\t\t\tif (ClipperLib.use_xyz) e.Bot.Z = e.Curr.Z;\n\t\t\t//e.Top = e.Next.Curr;\n\t\t\te.Top.X = e.Next.Curr.X;\n\t\t\te.Top.Y = e.Next.Curr.Y;\n\t\t\tif (ClipperLib.use_xyz) e.Top.Z = e.Next.Curr.Z;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//e.Top = e.Curr;\n\t\t\te.Top.X = e.Curr.X;\n\t\t\te.Top.Y = e.Curr.Y;\n\t\t\tif (ClipperLib.use_xyz) e.Top.Z = e.Curr.Z;\n\t\t\t//e.Bot = e.Next.Curr;\n\t\t\te.Bot.X = e.Next.Curr.X;\n\t\t\te.Bot.Y = e.Next.Curr.Y;\n\t\t\tif (ClipperLib.use_xyz) e.Bot.Z = e.Next.Curr.Z;\n\t\t}\n\t\tthis.SetDx(e);\n\t\te.PolyTyp = polyType;\n\t};\n\n\tClipperLib.ClipperBase.prototype.FindNextLocMin = function (E)\n\t{\n\t\tvar E2;\n\t\tfor (;;)\n\t\t{\n\t\t\twhile (ClipperLib.FPoint.op_Inequality(E.Bot, E.Prev.Bot) || ClipperLib.FPoint.op_Equality(E.Curr, E.Top))\n\t\t\t\tE = E.Next;\n\t\t\tif (E.Dx !== ClipperLib.ClipperBase.horizontal && E.Prev.Dx !== ClipperLib.ClipperBase.horizontal)\n\t\t\t\tbreak;\n\t\t\twhile (E.Prev.Dx === ClipperLib.ClipperBase.horizontal)\n\t\t\t\tE = E.Prev;\n\t\t\tE2 = E;\n\t\t\twhile (E.Dx === ClipperLib.ClipperBase.horizontal)\n\t\t\t\tE = E.Next;\n\t\t\tif (E.Top.Y === E.Prev.Bot.Y)\n\t\t\t\tcontinue;\n\t\t\t//ie just an intermediate horz.\n\t\t\tif (E2.Prev.Bot.X < E.Bot.X)\n\t\t\t\tE = E2;\n\t\t\tbreak;\n\t\t}\n\t\treturn E;\n\t};\n\n\tClipperLib.ClipperBase.prototype.ProcessBound = function (E, LeftBoundIsForward)\n\t{\n\t\tvar EStart;\n\t\tvar Result = E;\n\t\tvar Horz;\n\n\t\tif (Result.OutIdx === ClipperLib.ClipperBase.Skip)\n\t\t{\n\t\t\t//check if there are edges beyond the skip edge in the bound and if so\n\t\t\t//create another LocMin and calling ProcessBound once more ...\n\t\t\tE = Result;\n\t\t\tif (LeftBoundIsForward)\n\t\t\t{\n\t\t\t\twhile (E.Top.Y === E.Next.Bot.Y) E = E.Next;\n\t\t\t\twhile (E !== Result && E.Dx === ClipperLib.ClipperBase.horizontal) E = E.Prev;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile (E.Top.Y === E.Prev.Bot.Y) E = E.Prev;\n\t\t\t\twhile (E !== Result && E.Dx === ClipperLib.ClipperBase.horizontal) E = E.Next;\n\t\t\t}\n\t\t\tif (E === Result)\n\t\t\t{\n\t\t\t\tif (LeftBoundIsForward) Result = E.Next;\n\t\t\t\telse Result = E.Prev;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//there are more edges in the bound beyond result starting with E\n\t\t\t\tif (LeftBoundIsForward)\n\t\t\t\t\tE = Result.Next;\n\t\t\t\telse\n\t\t\t\t\tE = Result.Prev;\n\t\t\t\tvar locMin = new ClipperLib.LocalMinima();\n\t\t\t\tlocMin.Next = null;\n\t\t\t\tlocMin.Y = E.Bot.Y;\n\t\t\t\tlocMin.LeftBound = null;\n\t\t\t\tlocMin.RightBound = E;\n\t\t\t\tE.WindDelta = 0;\n\t\t\t\tResult = this.ProcessBound(E, LeftBoundIsForward);\n\t\t\t\tthis.InsertLocalMinima(locMin);\n\t\t\t}\n\t\t\treturn Result;\n\t\t}\n\n\t\tif (E.Dx === ClipperLib.ClipperBase.horizontal)\n\t\t{\n\t\t\t//We need to be careful with open paths because this may not be a\n\t\t\t//true local minima (ie E may be following a skip edge).\n\t\t\t//Also, consecutive horz. edges may start heading left before going right.\n\t\t\tif (LeftBoundIsForward) EStart = E.Prev;\n\t\t\telse EStart = E.Next;\n\n\t\t\tif (EStart.Dx === ClipperLib.ClipperBase.horizontal) //ie an adjoining horizontal skip edge\n\t\t\t{\n\t\t\t\tif (EStart.Bot.X !== E.Bot.X && EStart.Top.X !== E.Bot.X)\n\t\t\t\t\tthis.ReverseHorizontal(E);\n\t\t\t}\n\t\t\telse if (EStart.Bot.X !== E.Bot.X)\n\t\t\t\tthis.ReverseHorizontal(E);\n\t\t}\n\n\t\tEStart = E;\n\t\tif (LeftBoundIsForward)\n\t\t{\n\t\t\twhile (Result.Top.Y === Result.Next.Bot.Y && Result.Next.OutIdx !== ClipperLib.ClipperBase.Skip)\n\t\t\t\tResult = Result.Next;\n\t\t\tif (Result.Dx === ClipperLib.ClipperBase.horizontal && Result.Next.OutIdx !== ClipperLib.ClipperBase.Skip)\n\t\t\t{\n\t\t\t\t//nb: at the top of a bound, horizontals are added to the bound\n\t\t\t\t//only when the preceding edge attaches to the horizontal's left vertex\n\t\t\t\t//unless a Skip edge is encountered when that becomes the top divide\n\t\t\t\tHorz = Result;\n\t\t\t\twhile (Horz.Prev.Dx === ClipperLib.ClipperBase.horizontal)\n\t\t\t\t\tHorz = Horz.Prev;\n\t\t\t\tif (Horz.Prev.Top.X > Result.Next.Top.X)\n\t\t\t\t\tResult = Horz.Prev;\n\t\t\t}\n\t\t\twhile (E !== Result)\n\t\t\t{\n\t\t\t\tE.NextInLML = E.Next;\n\t\t\t\tif (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Prev.Top.X)\n\t\t\t\t\tthis.ReverseHorizontal(E);\n\t\t\t\tE = E.Next;\n\t\t\t}\n\t\t\tif (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Prev.Top.X)\n\t\t\t\tthis.ReverseHorizontal(E);\n\t\t\tResult = Result.Next;\n\t\t\t//move to the edge just beyond current bound\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile (Result.Top.Y === Result.Prev.Bot.Y && Result.Prev.OutIdx !== ClipperLib.ClipperBase.Skip)\n\t\t\t\tResult = Result.Prev;\n\t\t\tif (Result.Dx === ClipperLib.ClipperBase.horizontal && Result.Prev.OutIdx !== ClipperLib.ClipperBase.Skip)\n\t\t\t{\n\t\t\t\tHorz = Result;\n\t\t\t\twhile (Horz.Next.Dx === ClipperLib.ClipperBase.horizontal)\n\t\t\t\t\tHorz = Horz.Next;\n\t\t\t\tif (Horz.Next.Top.X === Result.Prev.Top.X || Horz.Next.Top.X > Result.Prev.Top.X)\n\t\t\t\t{\n\t\t\t\t\tResult = Horz.Next;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (E !== Result)\n\t\t\t{\n\t\t\t\tE.NextInLML = E.Prev;\n\t\t\t\tif (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Next.Top.X)\n\t\t\t\t\tthis.ReverseHorizontal(E);\n\t\t\t\tE = E.Prev;\n\t\t\t}\n\t\t\tif (E.Dx === ClipperLib.ClipperBase.horizontal && E !== EStart && E.Bot.X !== E.Next.Top.X)\n\t\t\t\tthis.ReverseHorizontal(E);\n\t\t\tResult = Result.Prev;\n\t\t\t//move to the edge just beyond current bound\n\t\t}\n\n\t\treturn Result;\n\t};\n\n\tClipperLib.ClipperBase.prototype.AddPath = function (pg, polyType, Closed)\n\t{\n\t\tif (ClipperLib.use_lines)\n\t\t{\n\t\t\tif (!Closed && polyType === ClipperLib.PolyType.ptClip)\n\t\t\t\tClipperLib.Error(\"AddPath: Open paths must be subject.\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!Closed)\n\t\t\t\tClipperLib.Error(\"AddPath: Open paths have been disabled.\");\n\t\t}\n\t\tvar highI = pg.length - 1;\n\t\tif (Closed)\n\t\t\twhile (highI > 0 && (ClipperLib.FPoint.op_Equality(pg[highI], pg[0])))\n\t\t\t\t--highI;\n\t\twhile (highI > 0 && (ClipperLib.FPoint.op_Equality(pg[highI], pg[highI - 1])))\n\t\t\t--highI;\n\t\tif ((Closed && highI < 2) || (!Closed && highI < 1))\n\t\t\treturn false;\n\t\t//create a new edge array ...\n\t\tvar edges = new Array();\n\t\tfor (var i = 0; i <= highI; i++)\n\t\t\tedges.push(new ClipperLib.TEdge());\n\t\tvar IsFlat = true;\n\t\t//1. Basic (first) edge initialization ...\n\n\t\t//edges[1].Curr = pg[1];\n\t\tedges[1].Curr.X = pg[1].X;\n\t\tedges[1].Curr.Y = pg[1].Y;\n\t\tif (ClipperLib.use_xyz) edges[1].Curr.Z = pg[1].Z;\n\n\t\tthis.RangeTest(pg[0]);\n\n\t\tthis.RangeTest(pg[highI]);\n\n\t\tthis.InitEdge(edges[0], edges[1], edges[highI], pg[0]);\n\t\tthis.InitEdge(edges[highI], edges[0], edges[highI - 1], pg[highI]);\n\t\tfor (var i = highI - 1; i >= 1; --i)\n\t\t{\n\t\t\tthis.RangeTest(pg[i]);\n\n\t\t\tthis.InitEdge(edges[i], edges[i + 1], edges[i - 1], pg[i]);\n\t\t}\n\n\t\tvar eStart = edges[0];\n\t\t//2. Remove duplicate vertices, and (when closed) collinear edges ...\n\t\tvar E = eStart,\n\t\t\teLoopStop = eStart;\n\t\tfor (;;)\n\t\t{\n\t\t\t//console.log(E.Next, eStart);\n\t\t\t//nb: allows matching start and end points when not Closed ...\n\t\t\tif (E.Curr === E.Next.Curr && (Closed || E.Next !== eStart))\n\t\t\t{\n\t\t\t\tif (E === E.Next)\n\t\t\t\t\tbreak;\n\t\t\t\tif (E === eStart)\n\t\t\t\t\teStart = E.Next;\n\t\t\t\tE = this.RemoveEdge(E);\n\t\t\t\teLoopStop = E;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (E.Prev === E.Next)\n\t\t\t\tbreak;\n\t\t\telse if (Closed && ClipperLib.ClipperBase.SlopesEqual4(E.Prev.Curr, E.Curr, E.Next.Curr) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(E.Prev.Curr, E.Curr, E.Next.Curr)))\n\t\t\t{\n\t\t\t\t//Collinear edges are allowed for open paths but in closed paths\n\t\t\t\t//the default is to merge adjacent collinear edges into a single edge.\n\t\t\t\t//However, if the PreserveCollinear property is enabled, only overlapping\n\t\t\t\t//collinear edges (ie spikes) will be removed from closed paths.\n\t\t\t\tif (E === eStart)\n\t\t\t\t\teStart = E.Next;\n\t\t\t\tE = this.RemoveEdge(E);\n\t\t\t\tE = E.Prev;\n\t\t\t\teLoopStop = E;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tE = E.Next;\n\t\t\tif ((E === eLoopStop) || (!Closed && E.Next === eStart)) break;\n\t\t}\n\t\tif ((!Closed && (E === E.Next)) || (Closed && (E.Prev === E.Next)))\n\t\t\treturn false;\n\t\tif (!Closed)\n\t\t{\n\t\t\tthis.m_HasOpenPaths = true;\n\t\t\teStart.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n\t\t}\n\t\t//3. Do second stage of edge initialization ...\n\t\tE = eStart;\n\t\tdo {\n\t\t\tthis.InitEdge2(E, polyType);\n\t\t\tE = E.Next;\n\t\t\tif (IsFlat && E.Curr.Y !== eStart.Curr.Y)\n\t\t\t\tIsFlat = false;\n\t\t}\n\t\twhile (E !== eStart)\n\t\t//4. Finally, add edge bounds to LocalMinima list ...\n\t\t//Totally flat paths must be handled differently when adding them\n\t\t//to LocalMinima list to avoid endless loops etc ...\n\t\tif (IsFlat)\n\t\t{\n\t\t\tif (Closed)\n\t\t\t\treturn false;\n\n\t\t\tE.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n\n\t\t\tvar locMin = new ClipperLib.LocalMinima();\n\t\t\tlocMin.Next = null;\n\t\t\tlocMin.Y = E.Bot.Y;\n\t\t\tlocMin.LeftBound = null;\n\t\t\tlocMin.RightBound = E;\n\t\t\tlocMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n\t\t\tlocMin.RightBound.WindDelta = 0;\n\n\t\t\tfor (;;)\n\t\t\t{\n\t\t\t\tif (E.Bot.X !== E.Prev.Top.X) this.ReverseHorizontal(E);\n\t\t\t\tif (E.Next.OutIdx === ClipperLib.ClipperBase.Skip) break;\n\t\t\t\tE.NextInLML = E.Next;\n\t\t\t\tE = E.Next;\n\t\t\t}\n\t\t\tthis.InsertLocalMinima(locMin);\n\t\t\tthis.m_edges.push(edges);\n\t\t\treturn true;\n\t\t}\n\t\tthis.m_edges.push(edges);\n\t\tvar leftBoundIsForward;\n\t\tvar EMin = null;\n\n\t\t//workaround to avoid an endless loop in the while loop below when\n\t\t//open paths have matching start and end points ...\n\t\tif (ClipperLib.FPoint.op_Equality(E.Prev.Bot, E.Prev.Top))\n\t\t\tE = E.Next;\n\n\t\tfor (;;)\n\t\t{\n\t\t\tE = this.FindNextLocMin(E);\n\t\t\tif (E === EMin)\n\t\t\t\tbreak;\n\t\t\telse if (EMin === null)\n\t\t\t\tEMin = E;\n\t\t\t//E and E.Prev now share a local minima (left aligned if horizontal).\n\t\t\t//Compare their slopes to find which starts which bound ...\n\t\t\tvar locMin = new ClipperLib.LocalMinima();\n\t\t\tlocMin.Next = null;\n\t\t\tlocMin.Y = E.Bot.Y;\n\t\t\tif (E.Dx < E.Prev.Dx)\n\t\t\t{\n\t\t\t\tlocMin.LeftBound = E.Prev;\n\t\t\t\tlocMin.RightBound = E;\n\t\t\t\tleftBoundIsForward = false;\n\t\t\t\t//Q.nextInLML = Q.prev\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlocMin.LeftBound = E;\n\t\t\t\tlocMin.RightBound = E.Prev;\n\t\t\t\tleftBoundIsForward = true;\n\t\t\t\t//Q.nextInLML = Q.next\n\t\t\t}\n\t\t\tlocMin.LeftBound.Side = ClipperLib.EdgeSide.esLeft;\n\t\t\tlocMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n\t\t\tif (!Closed)\n\t\t\t\tlocMin.LeftBound.WindDelta = 0;\n\t\t\telse if (locMin.LeftBound.Next === locMin.RightBound)\n\t\t\t\tlocMin.LeftBound.WindDelta = -1;\n\t\t\telse\n\t\t\t\tlocMin.LeftBound.WindDelta = 1;\n\t\t\tlocMin.RightBound.WindDelta = -locMin.LeftBound.WindDelta;\n\t\t\tE = this.ProcessBound(locMin.LeftBound, leftBoundIsForward);\n\t\t\tif (E.OutIdx === ClipperLib.ClipperBase.Skip)\n\t\t\t\tE = this.ProcessBound(E, leftBoundIsForward);\n\t\t\tvar E2 = this.ProcessBound(locMin.RightBound, !leftBoundIsForward);\n\t\t\tif (E2.OutIdx === ClipperLib.ClipperBase.Skip) E2 = this.ProcessBound(E2, !leftBoundIsForward);\n\t\t\tif (locMin.LeftBound.OutIdx === ClipperLib.ClipperBase.Skip)\n\t\t\t\tlocMin.LeftBound = null;\n\t\t\telse if (locMin.RightBound.OutIdx === ClipperLib.ClipperBase.Skip)\n\t\t\t\tlocMin.RightBound = null;\n\t\t\tthis.InsertLocalMinima(locMin);\n\t\t\tif (!leftBoundIsForward)\n\t\t\t\tE = E2;\n\t\t}\n\t\treturn true;\n\t};\n\n\tClipperLib.ClipperBase.prototype.AddPaths = function (ppg, polyType, closed)\n\t{\n\t\t//  console.log(\"-------------------------------------------\");\n\t\t//  console.log(JSON.stringify(ppg));\n\t\tvar result = false;\n\t\tfor (var i = 0, ilen = ppg.length; i < ilen; ++i)\n\t\t\tif (this.AddPath(ppg[i], polyType, closed))\n\t\t\t\tresult = true;\n\t\treturn result;\n\t};\n\n\tClipperLib.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function (pt1, pt2, pt3)\n\t{\n\t\tif ((ClipperLib.FPoint.op_Equality(pt1, pt3)) || (ClipperLib.FPoint.op_Equality(pt1, pt2)) || (ClipperLib.FPoint.op_Equality(pt3, pt2)))\n\n\t\t\t//if ((pt1 == pt3) || (pt1 == pt2) || (pt3 == pt2))\n\t\t\treturn false;\n\n\t\telse if (pt1.X !== pt3.X)\n\t\t\treturn (pt2.X > pt1.X) === (pt2.X < pt3.X);\n\t\telse\n\t\t\treturn (pt2.Y > pt1.Y) === (pt2.Y < pt3.Y);\n\t};\n\n\tClipperLib.ClipperBase.prototype.RemoveEdge = function (e)\n\t{\n\t\t//removes e from double_linked_list (but without removing from memory)\n\t\te.Prev.Next = e.Next;\n\t\te.Next.Prev = e.Prev;\n\t\tvar result = e.Next;\n\t\te.Prev = null; //flag as removed (see ClipperBase.Clear)\n\t\treturn result;\n\t};\n\n\tClipperLib.ClipperBase.prototype.SetDx = function (e)\n\t{\n\t\te.Delta.X = (e.Top.X - e.Bot.X);\n\t\te.Delta.Y = (e.Top.Y - e.Bot.Y);\n\t\tif (e.Delta.Y === 0) e.Dx = ClipperLib.ClipperBase.horizontal;\n\t\telse e.Dx = (e.Delta.X) / (e.Delta.Y);\n\t};\n\n\tClipperLib.ClipperBase.prototype.InsertLocalMinima = function (newLm)\n\t{\n\t\tif (this.m_MinimaList === null)\n\t\t{\n\t\t\tthis.m_MinimaList = newLm;\n\t\t}\n\t\telse if (newLm.Y >= this.m_MinimaList.Y)\n\t\t{\n\t\t\tnewLm.Next = this.m_MinimaList;\n\t\t\tthis.m_MinimaList = newLm;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar tmpLm = this.m_MinimaList;\n\t\t\twhile (tmpLm.Next !== null && (newLm.Y < tmpLm.Next.Y))\n\t\t\t\ttmpLm = tmpLm.Next;\n\t\t\tnewLm.Next = tmpLm.Next;\n\t\t\ttmpLm.Next = newLm;\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.prototype.PopLocalMinima = function (Y, current)\n\t{\n\t\tcurrent.v = this.m_CurrentLM;\n\t\tif (this.m_CurrentLM !== null && this.m_CurrentLM.Y === Y)\n\t\t{\n\t\t\tthis.m_CurrentLM = this.m_CurrentLM.Next;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tClipperLib.ClipperBase.prototype.ReverseHorizontal = function (e)\n\t{\n\t\t//swap horizontal edges' top and bottom x's so they follow the natural\n\t\t//progression of the bounds - ie so their xbots will align with the\n\t\t//adjoining lower edge. [Helpful in the ProcessHorizontal() method.]\n\t\tvar tmp = e.Top.X;\n\t\te.Top.X = e.Bot.X;\n\t\te.Bot.X = tmp;\n\t\tif (ClipperLib.use_xyz)\n\t\t{\n\t\t\ttmp = e.Top.Z;\n\t\t\te.Top.Z = e.Bot.Z;\n\t\t\te.Bot.Z = tmp;\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.prototype.Reset = function ()\n\t{\n\t\tthis.m_CurrentLM = this.m_MinimaList;\n\t\tif (this.m_CurrentLM === null) //ie nothing to process\n\t\t\treturn;\n\t\t//reset all edges ...\n\t\tthis.m_Scanbeam = null;\n\t\tvar lm = this.m_MinimaList;\n\t\twhile (lm !== null)\n\t\t{\n\t\t\tthis.InsertScanbeam(lm.Y);\n\t\t\tvar e = lm.LeftBound;\n\t\t\tif (e !== null)\n\t\t\t{\n\t\t\t\t//e.Curr = e.Bot;\n\t\t\t\te.Curr.X = e.Bot.X;\n\t\t\t\te.Curr.Y = e.Bot.Y;\n\t\t\t\tif (ClipperLib.use_xyz) e.Curr.Z = e.Bot.Z;\n\t\t\t\te.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t\t\t}\n\t\t\te = lm.RightBound;\n\t\t\tif (e !== null)\n\t\t\t{\n\t\t\t\t//e.Curr = e.Bot;\n\t\t\t\te.Curr.X = e.Bot.X;\n\t\t\t\te.Curr.Y = e.Bot.Y;\n\t\t\t\tif (ClipperLib.use_xyz) e.Curr.Z = e.Bot.Z;\n\t\t\t\te.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t\t\t}\n\t\t\tlm = lm.Next;\n\t\t}\n\t\tthis.m_ActiveEdges = null;\n\t};\n\n\tClipperLib.ClipperBase.prototype.InsertScanbeam = function (Y)\n\t{\n\t\t//single-linked list: sorted descending, ignoring dups.\n\t\tif (this.m_Scanbeam === null)\n\t\t{\n\t\t\tthis.m_Scanbeam = new ClipperLib.Scanbeam();\n\t\t\tthis.m_Scanbeam.Next = null;\n\t\t\tthis.m_Scanbeam.Y = Y;\n\t\t}\n\t\telse if (Y > this.m_Scanbeam.Y)\n\t\t{\n\t\t\tvar newSb = new ClipperLib.Scanbeam();\n\t\t\tnewSb.Y = Y;\n\t\t\tnewSb.Next = this.m_Scanbeam;\n\t\t\tthis.m_Scanbeam = newSb;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar sb2 = this.m_Scanbeam;\n\t\t\twhile (sb2.Next !== null && Y <= sb2.Next.Y)\n\t\t\t{\n\t\t\t\tsb2 = sb2.Next;\n\t\t\t}\n\t\t\tif (Y === sb2.Y)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t} //ie ignores duplicates\n\t\t\tvar newSb1 = new ClipperLib.Scanbeam();\n\t\t\tnewSb1.Y = Y;\n\t\t\tnewSb1.Next = sb2.Next;\n\t\t\tsb2.Next = newSb1;\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.prototype.PopScanbeam = function (Y)\n\t{\n\t\tif (this.m_Scanbeam === null)\n\t\t{\n\t\t\tY.v = 0;\n\t\t\treturn false;\n\t\t}\n\t\tY.v = this.m_Scanbeam.Y;\n\t\tthis.m_Scanbeam = this.m_Scanbeam.Next;\n\t\treturn true;\n\t};\n\n\tClipperLib.ClipperBase.prototype.LocalMinimaPending = function ()\n\t{\n\t\treturn (this.m_CurrentLM !== null);\n\t};\n\n\tClipperLib.ClipperBase.prototype.CreateOutRec = function ()\n\t{\n\t\tvar result = new ClipperLib.OutRec();\n\t\tresult.Idx = ClipperLib.ClipperBase.Unassigned;\n\t\tresult.IsHole = false;\n\t\tresult.IsOpen = false;\n\t\tresult.FirstLeft = null;\n\t\tresult.Pts = null;\n\t\tresult.BottomPt = null;\n\t\tresult.PolyNode = null;\n\t\tthis.m_PolyOuts.push(result);\n\t\tresult.Idx = this.m_PolyOuts.length - 1;\n\t\treturn result;\n\t};\n\n\tClipperLib.ClipperBase.prototype.DisposeOutRec = function (index)\n\t{\n\t\tvar outRec = this.m_PolyOuts[index];\n\t\toutRec.Pts = null;\n\t\toutRec = null;\n\t\tthis.m_PolyOuts[index] = null;\n\t};\n\n\tClipperLib.ClipperBase.prototype.UpdateEdgeIntoAEL = function (e)\n\t{\n\t\tif (e.NextInLML === null)\n\t\t{\n\t\t\tClipperLib.Error(\"UpdateEdgeIntoAEL: invalid call\");\n\t\t}\n\t\tvar AelPrev = e.PrevInAEL;\n\t\tvar AelNext = e.NextInAEL;\n\t\te.NextInLML.OutIdx = e.OutIdx;\n\t\tif (AelPrev !== null)\n\t\t{\n\t\t\tAelPrev.NextInAEL = e.NextInLML;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.m_ActiveEdges = e.NextInLML;\n\t\t}\n\t\tif (AelNext !== null)\n\t\t{\n\t\t\tAelNext.PrevInAEL = e.NextInLML;\n\t\t}\n\t\te.NextInLML.Side = e.Side;\n\t\te.NextInLML.WindDelta = e.WindDelta;\n\t\te.NextInLML.WindCnt = e.WindCnt;\n\t\te.NextInLML.WindCnt2 = e.WindCnt2;\n\t\te = e.NextInLML;\n\t\te.Curr.X = e.Bot.X;\n\t\te.Curr.Y = e.Bot.Y;\n\t\te.PrevInAEL = AelPrev;\n\t\te.NextInAEL = AelNext;\n\t\tif (!ClipperLib.ClipperBase.IsHorizontal(e))\n\t\t{\n\t\t\tthis.InsertScanbeam(e.Top.Y);\n\t\t}\n\t\treturn e;\n\t};\n\n\tClipperLib.ClipperBase.prototype.SwapPositionsInAEL = function (edge1, edge2)\n\t{\n\t\t//check that one or other edge hasn't already been removed from AEL ...\n\t\tif (edge1.NextInAEL === edge1.PrevInAEL || edge2.NextInAEL === edge2.PrevInAEL)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (edge1.NextInAEL === edge2)\n\t\t{\n\t\t\tvar next = edge2.NextInAEL;\n\t\t\tif (next !== null)\n\t\t\t{\n\t\t\t\tnext.PrevInAEL = edge1;\n\t\t\t}\n\t\t\tvar prev = edge1.PrevInAEL;\n\t\t\tif (prev !== null)\n\t\t\t{\n\t\t\t\tprev.NextInAEL = edge2;\n\t\t\t}\n\t\t\tedge2.PrevInAEL = prev;\n\t\t\tedge2.NextInAEL = edge1;\n\t\t\tedge1.PrevInAEL = edge2;\n\t\t\tedge1.NextInAEL = next;\n\t\t}\n\t\telse if (edge2.NextInAEL === edge1)\n\t\t{\n\t\t\tvar next1 = edge1.NextInAEL;\n\t\t\tif (next1 !== null)\n\t\t\t{\n\t\t\t\tnext1.PrevInAEL = edge2;\n\t\t\t}\n\t\t\tvar prev1 = edge2.PrevInAEL;\n\t\t\tif (prev1 !== null)\n\t\t\t{\n\t\t\t\tprev1.NextInAEL = edge1;\n\t\t\t}\n\t\t\tedge1.PrevInAEL = prev1;\n\t\t\tedge1.NextInAEL = edge2;\n\t\t\tedge2.PrevInAEL = edge1;\n\t\t\tedge2.NextInAEL = next1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar next2 = edge1.NextInAEL;\n\t\t\tvar prev2 = edge1.PrevInAEL;\n\t\t\tedge1.NextInAEL = edge2.NextInAEL;\n\t\t\tif (edge1.NextInAEL !== null)\n\t\t\t{\n\t\t\t\tedge1.NextInAEL.PrevInAEL = edge1;\n\t\t\t}\n\t\t\tedge1.PrevInAEL = edge2.PrevInAEL;\n\t\t\tif (edge1.PrevInAEL !== null)\n\t\t\t{\n\t\t\t\tedge1.PrevInAEL.NextInAEL = edge1;\n\t\t\t}\n\t\t\tedge2.NextInAEL = next2;\n\t\t\tif (edge2.NextInAEL !== null)\n\t\t\t{\n\t\t\t\tedge2.NextInAEL.PrevInAEL = edge2;\n\t\t\t}\n\t\t\tedge2.PrevInAEL = prev2;\n\t\t\tif (edge2.PrevInAEL !== null)\n\t\t\t{\n\t\t\t\tedge2.PrevInAEL.NextInAEL = edge2;\n\t\t\t}\n\t\t}\n\n\t\tif (edge1.PrevInAEL === null)\n\t\t{\n\t\t\tthis.m_ActiveEdges = edge1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (edge2.PrevInAEL === null)\n\t\t\t{\n\t\t\t\tthis.m_ActiveEdges = edge2;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.ClipperBase.prototype.DeleteFromAEL = function (e)\n\t{\n\t\tvar AelPrev = e.PrevInAEL;\n\t\tvar AelNext = e.NextInAEL;\n\t\tif (AelPrev === null && AelNext === null && e !== this.m_ActiveEdges)\n\t\t{\n\t\t\treturn;\n\t\t} //already deleted\n\t\tif (AelPrev !== null)\n\t\t{\n\t\t\tAelPrev.NextInAEL = AelNext;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.m_ActiveEdges = AelNext;\n\t\t}\n\t\tif (AelNext !== null)\n\t\t{\n\t\t\tAelNext.PrevInAEL = AelPrev;\n\t\t}\n\t\te.NextInAEL = null;\n\t\te.PrevInAEL = null;\n\t}\n\n\t// public Clipper(int InitOptions = 0)\n\t/**\n\t * @suppress {missingProperties}\n\t */\n\tClipperLib.Clipper = function (InitOptions)\n\t{\n\t\tif (typeof (InitOptions) === \"undefined\") InitOptions = 0;\n\t\tthis.m_PolyOuts = null;\n\t\tthis.m_ClipType = ClipperLib.ClipType.ctIntersection;\n\t\tthis.m_Scanbeam = null;\n\t\tthis.m_Maxima = null;\n\t\tthis.m_ActiveEdges = null;\n\t\tthis.m_SortedEdges = null;\n\t\tthis.m_IntersectList = null;\n\t\tthis.m_IntersectNodeComparer = null;\n\t\tthis.m_ExecuteLocked = false;\n\t\tthis.m_ClipFillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t\tthis.m_SubjFillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t\tthis.m_Joins = null;\n\t\tthis.m_GhostJoins = null;\n\t\tthis.m_UsingPolyTree = false;\n\t\tthis.ReverseSolution = false;\n\t\tthis.StrictlySimple = false;\n\n\t\tClipperLib.ClipperBase.call(this);\n\n\t\tthis.m_Scanbeam = null;\n\t\tthis.m_Maxima = null;\n\t\tthis.m_ActiveEdges = null;\n\t\tthis.m_SortedEdges = null;\n\t\tthis.m_IntersectList = new Array();\n\t\tthis.m_IntersectNodeComparer = ClipperLib.MyIntersectNodeSort.Compare;\n\t\tthis.m_ExecuteLocked = false;\n\t\tthis.m_UsingPolyTree = false;\n\t\tthis.m_PolyOuts = new Array();\n\t\tthis.m_Joins = new Array();\n\t\tthis.m_GhostJoins = new Array();\n\t\tthis.ReverseSolution = (1 & InitOptions) !== 0;\n\t\tthis.StrictlySimple = (2 & InitOptions) !== 0;\n\t\tthis.PreserveCollinear = (4 & InitOptions) !== 0;\n\t\tif (ClipperLib.use_xyz)\n\t\t{\n\t\t\tthis.ZFillFunction = null; // function (FPoint bot1, FPoint top1, FPoint bot2, FPoint top2, ref FPoint intersectPt);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.ioReverseSolution = 1;\n\tClipperLib.Clipper.ioStrictlySimple = 2;\n\tClipperLib.Clipper.ioPreserveCollinear = 4;\n\n\tClipperLib.Clipper.prototype.Clear = function ()\n\t{\n\t\tif (this.m_edges.length === 0)\n\t\t\treturn;\n\t\t//avoids problems with ClipperBase destructor\n\t\tthis.DisposeAllPolyPts();\n\t\tClipperLib.ClipperBase.prototype.Clear.call(this);\n\t};\n\n\tClipperLib.Clipper.prototype.InsertMaxima = function (X)\n\t{\n\t\t//double-linked list: sorted ascending, ignoring dups.\n\t\tvar newMax = new ClipperLib.Maxima();\n\t\tnewMax.X = X;\n\t\tif (this.m_Maxima === null)\n\t\t{\n\t\t\tthis.m_Maxima = newMax;\n\t\t\tthis.m_Maxima.Next = null;\n\t\t\tthis.m_Maxima.Prev = null;\n\t\t}\n\t\telse if (X < this.m_Maxima.X)\n\t\t{\n\t\t\tnewMax.Next = this.m_Maxima;\n\t\t\tnewMax.Prev = null;\n\t\t\tthis.m_Maxima = newMax;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar m = this.m_Maxima;\n\t\t\twhile (m.Next !== null && X >= m.Next.X)\n\t\t\t{\n\t\t\t\tm = m.Next;\n\t\t\t}\n\t\t\tif (X === m.X)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t} //ie ignores duplicates (& CG to clean up newMax)\n\t\t\t//insert newMax between m and m.Next ...\n\t\t\tnewMax.Next = m.Next;\n\t\t\tnewMax.Prev = m;\n\t\t\tif (m.Next !== null)\n\t\t\t{\n\t\t\t\tm.Next.Prev = newMax;\n\t\t\t}\n\t\t\tm.Next = newMax;\n\t\t}\n\t};\n\n\t// ************************************\n\tClipperLib.Clipper.prototype.Execute = function ()\n\t{\n\t\tvar a = arguments,\n\t\t\talen = a.length,\n\t\t\tispolytree = a[1] instanceof ClipperLib.PolyTree;\n\t\tif (alen === 4 && !ispolytree) // function (clipType, solution, subjFillType, clipFillType)\n\t\t{\n\t\t\tvar clipType = a[0],\n\t\t\t\tsolution = a[1],\n\t\t\t\tsubjFillType = a[2],\n\t\t\t\tclipFillType = a[3];\n\t\t\tif (this.m_ExecuteLocked)\n\t\t\t\treturn false;\n\t\t\tif (this.m_HasOpenPaths)\n\t\t\t\tClipperLib.Error(\"Error: PolyTree struct is needed for open path clipping.\");\n\t\t\tthis.m_ExecuteLocked = true;\n\t\t\tClipperLib.Clear(solution);\n\t\t\tthis.m_SubjFillType = subjFillType;\n\t\t\tthis.m_ClipFillType = clipFillType;\n\t\t\tthis.m_ClipType = clipType;\n\t\t\tthis.m_UsingPolyTree = false;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar succeeded = this.ExecuteInternal();\n\t\t\t\t//build the return polygons ...\n\t\t\t\tif (succeeded) this.BuildResult(solution);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.DisposeAllPolyPts();\n\t\t\t\tthis.m_ExecuteLocked = false;\n\t\t\t}\n\t\t\treturn succeeded;\n\t\t}\n\t\telse if (alen === 4 && ispolytree) // function (clipType, polytree, subjFillType, clipFillType)\n\t\t{\n\t\t\tvar clipType = a[0],\n\t\t\t\tpolytree = a[1],\n\t\t\t\tsubjFillType = a[2],\n\t\t\t\tclipFillType = a[3];\n\t\t\tif (this.m_ExecuteLocked)\n\t\t\t\treturn false;\n\t\t\tthis.m_ExecuteLocked = true;\n\t\t\tthis.m_SubjFillType = subjFillType;\n\t\t\tthis.m_ClipFillType = clipFillType;\n\t\t\tthis.m_ClipType = clipType;\n\t\t\tthis.m_UsingPolyTree = true;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar succeeded = this.ExecuteInternal();\n\t\t\t\t//build the return polygons ...\n\t\t\t\tif (succeeded) this.BuildResult2(polytree);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.DisposeAllPolyPts();\n\t\t\t\tthis.m_ExecuteLocked = false;\n\t\t\t}\n\t\t\treturn succeeded;\n\t\t}\n\t\telse if (alen === 2 && !ispolytree) // function (clipType, solution)\n\t\t{\n\t\t\tvar clipType = a[0],\n\t\t\t\tsolution = a[1];\n\t\t\treturn this.Execute(clipType, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\t\t}\n\t\telse if (alen === 2 && ispolytree) // function (clipType, polytree)\n\t\t{\n\t\t\tvar clipType = a[0],\n\t\t\t\tpolytree = a[1];\n\t\t\treturn this.Execute(clipType, polytree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.FixHoleLinkage = function (outRec)\n\t{\n\t\t//skip if an outermost polygon or\n\t\t//already already points to the correct FirstLeft ...\n\t\tif (outRec.FirstLeft === null || (outRec.IsHole !== outRec.FirstLeft.IsHole && outRec.FirstLeft.Pts !== null))\n\t\t\treturn;\n\t\tvar orfl = outRec.FirstLeft;\n\t\twhile (orfl !== null && ((orfl.IsHole === outRec.IsHole) || orfl.Pts === null))\n\t\t\torfl = orfl.FirstLeft;\n\t\toutRec.FirstLeft = orfl;\n\t};\n\n\tClipperLib.Clipper.prototype.ExecuteInternal = function ()\n\t{\n\t\ttry\n\t\t{\n\t\t\tthis.Reset();\n\t\t\tthis.m_SortedEdges = null;\n\t\t\tthis.m_Maxima = null;\n\n\t\t\tvar botY = {},\n\t\t\t\ttopY = {};\n\n\t\t\tif (!this.PopScanbeam(botY))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.InsertLocalMinimaIntoAEL(botY.v);\n\t\t\twhile (this.PopScanbeam(topY) || this.LocalMinimaPending())\n\t\t\t{\n\t\t\t\tthis.ProcessHorizontals();\n\t\t\t\tthis.m_GhostJoins.length = 0;\n\t\t\t\tif (!this.ProcessIntersections(topY.v))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.ProcessEdgesAtTopOfScanbeam(topY.v);\n\t\t\t\tbotY.v = topY.v;\n\t\t\t\tthis.InsertLocalMinimaIntoAEL(botY.v);\n\t\t\t}\n\n\t\t\t//fix orientations ...\n\t\t\tvar outRec, i, ilen;\n\t\t\t//fix orientations ...\n\t\t\tfor (i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t\t{\n\t\t\t\toutRec = this.m_PolyOuts[i];\n\t\t\t\tif (outRec.Pts === null || outRec.IsOpen) continue;\n\t\t\t\tif ((outRec.IsHole ^ this.ReverseSolution) == (this.Area$1(outRec) > 0))\n\t\t\t\t\tthis.ReversePolyPtLinks(outRec.Pts);\n\t\t\t}\n\n\t\t\tthis.JoinCommonEdges();\n\n\t\t\tfor (i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t\t{\n\t\t\t\toutRec = this.m_PolyOuts[i];\n\t\t\t\tif (outRec.Pts === null)\n\t\t\t\t\tcontinue;\n\t\t\t\telse if (outRec.IsOpen)\n\t\t\t\t\tthis.FixupOutPolyline(outRec);\n\t\t\t\telse\n\t\t\t\t\tthis.FixupOutPolygon(outRec);\n\t\t\t}\n\n\t\t\tif (this.StrictlySimple) this.DoSimplePolygons();\n\t\t\treturn true;\n\t\t}\n\t\t//catch { return false; }\n\t\tfinally\n\t\t{\n\t\t\tthis.m_Joins.length = 0;\n\t\t\tthis.m_GhostJoins.length = 0;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.DisposeAllPolyPts = function ()\n\t{\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; ++i)\n\t\t\tthis.DisposeOutRec(i);\n\t\tClipperLib.Clear(this.m_PolyOuts);\n\t};\n\n\tClipperLib.Clipper.prototype.AddJoin = function (Op1, Op2, OffPt)\n\t{\n\t\tvar j = new ClipperLib.Join();\n\t\tj.OutPt1 = Op1;\n\t\tj.OutPt2 = Op2;\n\t\t//j.OffPt = OffPt;\n\t\tj.OffPt.X = OffPt.X;\n\t\tj.OffPt.Y = OffPt.Y;\n\t\tif (ClipperLib.use_xyz) j.OffPt.Z = OffPt.Z;\n\t\tthis.m_Joins.push(j);\n\t};\n\n\tClipperLib.Clipper.prototype.AddGhostJoin = function (Op, OffPt)\n\t{\n\t\tvar j = new ClipperLib.Join();\n\t\tj.OutPt1 = Op;\n\t\t//j.OffPt = OffPt;\n\t\tj.OffPt.X = OffPt.X;\n\t\tj.OffPt.Y = OffPt.Y;\n\t\tif (ClipperLib.use_xyz) j.OffPt.Z = OffPt.Z;\n\t\tthis.m_GhostJoins.push(j);\n\t};\n\n\t//if (ClipperLib.use_xyz)\n\t//{\n\tClipperLib.Clipper.prototype.SetZ = function (pt, e1, e2)\n\t{\n\t\tif (this.ZFillFunction !== null)\n\t\t{\n\t\t\tif (pt.Z !== 0 || this.ZFillFunction === null) return;\n\t\t\telse if (ClipperLib.FPoint.op_Equality(pt, e1.Bot)) pt.Z = e1.Bot.Z;\n\t\t\telse if (ClipperLib.FPoint.op_Equality(pt, e1.Top)) pt.Z = e1.Top.Z;\n\t\t\telse if (ClipperLib.FPoint.op_Equality(pt, e2.Bot)) pt.Z = e2.Bot.Z;\n\t\t\telse if (ClipperLib.FPoint.op_Equality(pt, e2.Top)) pt.Z = e2.Top.Z;\n\t\t\telse this.ZFillFunction(e1.Bot, e1.Top, e2.Bot, e2.Top, pt);\n\t\t}\n\t};\n\t//}\n\n\tClipperLib.Clipper.prototype.InsertLocalMinimaIntoAEL = function (botY)\n\t{\n\t\tvar lm = {};\n\n\t\tvar lb;\n\t\tvar rb;\n\t\twhile (this.PopLocalMinima(botY, lm))\n\t\t{\n\t\t\tlb = lm.v.LeftBound;\n\t\t\trb = lm.v.RightBound;\n\n\t\t\tvar Op1 = null;\n\t\t\tif (lb === null)\n\t\t\t{\n\t\t\t\tthis.InsertEdgeIntoAEL(rb, null);\n\t\t\t\tthis.SetWindingCount(rb);\n\t\t\t\tif (this.IsContributing(rb))\n\t\t\t\t\tOp1 = this.AddOutPt(rb, rb.Bot);\n\t\t\t}\n\t\t\telse if (rb === null)\n\t\t\t{\n\t\t\t\tthis.InsertEdgeIntoAEL(lb, null);\n\t\t\t\tthis.SetWindingCount(lb);\n\t\t\t\tif (this.IsContributing(lb))\n\t\t\t\t\tOp1 = this.AddOutPt(lb, lb.Bot);\n\t\t\t\tthis.InsertScanbeam(lb.Top.Y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.InsertEdgeIntoAEL(lb, null);\n\t\t\t\tthis.InsertEdgeIntoAEL(rb, lb);\n\t\t\t\tthis.SetWindingCount(lb);\n\t\t\t\trb.WindCnt = lb.WindCnt;\n\t\t\t\trb.WindCnt2 = lb.WindCnt2;\n\t\t\t\tif (this.IsContributing(lb))\n\t\t\t\t\tOp1 = this.AddLocalMinPoly(lb, rb, lb.Bot);\n\t\t\t\tthis.InsertScanbeam(lb.Top.Y);\n\t\t\t}\n\t\t\tif (rb !== null)\n\t\t\t{\n\t\t\t\tif (ClipperLib.ClipperBase.IsHorizontal(rb))\n\t\t\t\t{\n\t\t\t\t\tif (rb.NextInLML !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.InsertScanbeam(rb.NextInLML.Top.Y);\n\t\t\t\t\t}\n\t\t\t\t\tthis.AddEdgeToSEL(rb);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.InsertScanbeam(rb.Top.Y);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lb === null || rb === null) continue;\n\t\t\t//if output polygons share an Edge with a horizontal rb, they'll need joining later ...\n\t\t\tif (Op1 !== null && ClipperLib.ClipperBase.IsHorizontal(rb) && this.m_GhostJoins.length > 0 && rb.WindDelta !== 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; i++)\n\t\t\t\t{\n\t\t\t\t\t//if the horizontal Rb and a 'ghost' horizontal overlap, then convert\n\t\t\t\t\t//the 'ghost' join to a real join ready for later ...\n\t\t\t\t\tvar j = this.m_GhostJoins[i];\n\n\t\t\t\t\tif (this.HorzSegmentsOverlap(j.OutPt1.Pt.X, j.OffPt.X, rb.Bot.X, rb.Top.X))\n\t\t\t\t\t\tthis.AddJoin(j.OutPt1, Op1, j.OffPt);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (lb.OutIdx >= 0 && lb.PrevInAEL !== null &&\n\t\t\t\tlb.PrevInAEL.Curr.X === lb.Bot.X &&\n\t\t\t\tlb.PrevInAEL.OutIdx >= 0 &&\n\t\t\t\tClipperLib.ClipperBase.SlopesEqual5(lb.PrevInAEL.Curr, lb.PrevInAEL.Top, lb.Curr, lb.Top) &&\n\t\t\t\tlb.WindDelta !== 0 && lb.PrevInAEL.WindDelta !== 0)\n\t\t\t{\n\t\t\t\tvar Op2 = this.AddOutPt(lb.PrevInAEL, lb.Bot);\n\t\t\t\tthis.AddJoin(Op1, Op2, lb.Top);\n\t\t\t}\n\t\t\tif (lb.NextInAEL !== rb)\n\t\t\t{\n\t\t\t\tif (rb.OutIdx >= 0 && rb.PrevInAEL.OutIdx >= 0 &&\n\t\t\t\t\tClipperLib.ClipperBase.SlopesEqual5(rb.PrevInAEL.Curr, rb.PrevInAEL.Top, rb.Curr, rb.Top) &&\n\t\t\t\t\trb.WindDelta !== 0 && rb.PrevInAEL.WindDelta !== 0)\n\t\t\t\t{\n\t\t\t\t\tvar Op2 = this.AddOutPt(rb.PrevInAEL, rb.Bot);\n\t\t\t\t\tthis.AddJoin(Op1, Op2, rb.Top);\n\t\t\t\t}\n\t\t\t\tvar e = lb.NextInAEL;\n\t\t\t\tif (e !== null)\n\t\t\t\t\twhile (e !== rb)\n\t\t\t\t\t{\n\t\t\t\t\t\t//nb: For calculating winding counts etc, IntersectEdges() assumes\n\t\t\t\t\t\t//that param1 will be to the right of param2 ABOVE the intersection ...\n\t\t\t\t\t\tthis.IntersectEdges(rb, e, lb.Curr);\n\t\t\t\t\t\t//order important here\n\t\t\t\t\t\te = e.NextInAEL;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.InsertEdgeIntoAEL = function (edge, startEdge)\n\t{\n\t\tif (this.m_ActiveEdges === null)\n\t\t{\n\t\t\tedge.PrevInAEL = null;\n\t\t\tedge.NextInAEL = null;\n\t\t\tthis.m_ActiveEdges = edge;\n\t\t}\n\t\telse if (startEdge === null && this.E2InsertsBeforeE1(this.m_ActiveEdges, edge))\n\t\t{\n\t\t\tedge.PrevInAEL = null;\n\t\t\tedge.NextInAEL = this.m_ActiveEdges;\n\t\t\tthis.m_ActiveEdges.PrevInAEL = edge;\n\t\t\tthis.m_ActiveEdges = edge;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (startEdge === null)\n\t\t\t\tstartEdge = this.m_ActiveEdges;\n\t\t\twhile (startEdge.NextInAEL !== null && !this.E2InsertsBeforeE1(startEdge.NextInAEL, edge))\n\t\t\t\tstartEdge = startEdge.NextInAEL;\n\t\t\tedge.NextInAEL = startEdge.NextInAEL;\n\t\t\tif (startEdge.NextInAEL !== null)\n\t\t\t\tstartEdge.NextInAEL.PrevInAEL = edge;\n\t\t\tedge.PrevInAEL = startEdge;\n\t\t\tstartEdge.NextInAEL = edge;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.E2InsertsBeforeE1 = function (e1, e2)\n\t{\n\t\tif (e2.Curr.X === e1.Curr.X)\n\t\t{\n\t\t\tif (e2.Top.Y > e1.Top.Y)\n\t\t\t\treturn e2.Top.X < ClipperLib.Clipper.TopX(e1, e2.Top.Y);\n\t\t\telse\n\t\t\t\treturn e1.Top.X > ClipperLib.Clipper.TopX(e2, e1.Top.Y);\n\t\t}\n\t\telse\n\t\t\treturn e2.Curr.X < e1.Curr.X;\n\t};\n\n\tClipperLib.Clipper.prototype.IsEvenOddFillType = function (edge)\n\t{\n\t\tif (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t\treturn this.m_SubjFillType === ClipperLib.PolyFillType.pftEvenOdd;\n\t\telse\n\t\t\treturn this.m_ClipFillType === ClipperLib.PolyFillType.pftEvenOdd;\n\t};\n\n\tClipperLib.Clipper.prototype.IsEvenOddAltFillType = function (edge)\n\t{\n\t\tif (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t\treturn this.m_ClipFillType === ClipperLib.PolyFillType.pftEvenOdd;\n\t\telse\n\t\t\treturn this.m_SubjFillType === ClipperLib.PolyFillType.pftEvenOdd;\n\t};\n\n\tClipperLib.Clipper.prototype.IsContributing = function (edge)\n\t{\n\t\tvar pft, pft2;\n\t\tif (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t{\n\t\t\tpft = this.m_SubjFillType;\n\t\t\tpft2 = this.m_ClipFillType;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpft = this.m_ClipFillType;\n\t\t\tpft2 = this.m_SubjFillType;\n\t\t}\n\t\tswitch (pft)\n\t\t{\n\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\tif (edge.WindDelta === 0 && edge.WindCnt !== 1)\n\t\t\t\treturn false;\n\t\t\tbreak;\n\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\tif (Math.abs(edge.WindCnt) !== 1)\n\t\t\t\treturn false;\n\t\t\tbreak;\n\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\tif (edge.WindCnt !== 1)\n\t\t\t\treturn false;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (edge.WindCnt !== -1)\n\t\t\t\treturn false;\n\t\t\tbreak;\n\t\t}\n\t\tswitch (this.m_ClipType)\n\t\t{\n\t\tcase ClipperLib.ClipType.ctIntersection:\n\t\t\tswitch (pft2)\n\t\t\t{\n\t\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\t\treturn (edge.WindCnt2 !== 0);\n\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\treturn (edge.WindCnt2 > 0);\n\t\t\tdefault:\n\t\t\t\treturn (edge.WindCnt2 < 0);\n\t\t\t}\n\t\tcase ClipperLib.ClipType.ctUnion:\n\t\t\tswitch (pft2)\n\t\t\t{\n\t\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\t\treturn (edge.WindCnt2 === 0);\n\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\treturn (edge.WindCnt2 <= 0);\n\t\t\tdefault:\n\t\t\t\treturn (edge.WindCnt2 >= 0);\n\t\t\t}\n\t\tcase ClipperLib.ClipType.ctDifference:\n\t\t\tif (edge.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t\t\tswitch (pft2)\n\t\t\t\t{\n\t\t\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\t\t\treturn (edge.WindCnt2 === 0);\n\t\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\t\treturn (edge.WindCnt2 <= 0);\n\t\t\t\tdefault:\n\t\t\t\t\treturn (edge.WindCnt2 >= 0);\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tswitch (pft2)\n\t\t\t\t{\n\t\t\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\t\t\treturn (edge.WindCnt2 !== 0);\n\t\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\t\treturn (edge.WindCnt2 > 0);\n\t\t\t\tdefault:\n\t\t\t\t\treturn (edge.WindCnt2 < 0);\n\t\t\t\t}\n\t\tcase ClipperLib.ClipType.ctXor:\n\t\t\tif (edge.WindDelta === 0)\n\t\t\t\tswitch (pft2)\n\t\t\t\t{\n\t\t\t\tcase ClipperLib.PolyFillType.pftEvenOdd:\n\t\t\t\tcase ClipperLib.PolyFillType.pftNonZero:\n\t\t\t\t\treturn (edge.WindCnt2 === 0);\n\t\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\t\treturn (edge.WindCnt2 <= 0);\n\t\t\t\tdefault:\n\t\t\t\t\treturn (edge.WindCnt2 >= 0);\n\t\t\t\t}\n\t\t\telse\n\t\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.SetWindingCount = function (edge)\n\t{\n\t\tvar e = edge.PrevInAEL;\n\t\t//find the edge of the same polytype that immediately preceeds 'edge' in AEL\n\t\twhile (e !== null && ((e.PolyTyp !== edge.PolyTyp) || (e.WindDelta === 0)))\n\t\t\te = e.PrevInAEL;\n\t\tif (e === null)\n\t\t{\n\t\t\tvar pft = (edge.PolyTyp === ClipperLib.PolyType.ptSubject ? this.m_SubjFillType : this.m_ClipFillType);\n\t\t\tif (edge.WindDelta === 0)\n\t\t\t{\n\t\t\t\tedge.WindCnt = (pft === ClipperLib.PolyFillType.pftNegative ? -1 : 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tedge.WindCnt = edge.WindDelta;\n\t\t\t}\n\t\t\tedge.WindCnt2 = 0;\n\t\t\te = this.m_ActiveEdges;\n\t\t\t//ie get ready to calc WindCnt2\n\t\t}\n\t\telse if (edge.WindDelta === 0 && this.m_ClipType !== ClipperLib.ClipType.ctUnion)\n\t\t{\n\t\t\tedge.WindCnt = 1;\n\t\t\tedge.WindCnt2 = e.WindCnt2;\n\t\t\te = e.NextInAEL;\n\t\t\t//ie get ready to calc WindCnt2\n\t\t}\n\t\telse if (this.IsEvenOddFillType(edge))\n\t\t{\n\t\t\t//EvenOdd filling ...\n\t\t\tif (edge.WindDelta === 0)\n\t\t\t{\n\t\t\t\t//are we inside a subj polygon ...\n\t\t\t\tvar Inside = true;\n\t\t\t\tvar e2 = e.PrevInAEL;\n\t\t\t\twhile (e2 !== null)\n\t\t\t\t{\n\t\t\t\t\tif (e2.PolyTyp === e.PolyTyp && e2.WindDelta !== 0)\n\t\t\t\t\t\tInside = !Inside;\n\t\t\t\t\te2 = e2.PrevInAEL;\n\t\t\t\t}\n\t\t\t\tedge.WindCnt = (Inside ? 0 : 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tedge.WindCnt = edge.WindDelta;\n\t\t\t}\n\t\t\tedge.WindCnt2 = e.WindCnt2;\n\t\t\te = e.NextInAEL;\n\t\t\t//ie get ready to calc WindCnt2\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//nonZero, Positive or Negative filling ...\n\t\t\tif (e.WindCnt * e.WindDelta < 0)\n\t\t\t{\n\t\t\t\t//prev edge is 'decreasing' WindCount (WC) toward zero\n\t\t\t\t//so we're outside the previous polygon ...\n\t\t\t\tif (Math.abs(e.WindCnt) > 1)\n\t\t\t\t{\n\t\t\t\t\t//outside prev poly but still inside another.\n\t\t\t\t\t//when reversing direction of prev poly use the same WC\n\t\t\t\t\tif (e.WindDelta * edge.WindDelta < 0)\n\t\t\t\t\t\tedge.WindCnt = e.WindCnt;\n\t\t\t\t\telse\n\t\t\t\t\t\tedge.WindCnt = e.WindCnt + edge.WindDelta;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tedge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//prev edge is 'increasing' WindCount (WC) away from zero\n\t\t\t\t//so we're inside the previous polygon ...\n\t\t\t\tif (edge.WindDelta === 0)\n\t\t\t\t\tedge.WindCnt = (e.WindCnt < 0 ? e.WindCnt - 1 : e.WindCnt + 1);\n\t\t\t\telse if (e.WindDelta * edge.WindDelta < 0)\n\t\t\t\t\tedge.WindCnt = e.WindCnt;\n\t\t\t\telse\n\t\t\t\t\tedge.WindCnt = e.WindCnt + edge.WindDelta;\n\t\t\t}\n\t\t\tedge.WindCnt2 = e.WindCnt2;\n\t\t\te = e.NextInAEL;\n\t\t\t//ie get ready to calc WindCnt2\n\t\t}\n\t\t//update WindCnt2 ...\n\t\tif (this.IsEvenOddAltFillType(edge))\n\t\t{\n\t\t\t//EvenOdd filling ...\n\t\t\twhile (e !== edge)\n\t\t\t{\n\t\t\t\tif (e.WindDelta !== 0)\n\t\t\t\t\tedge.WindCnt2 = (edge.WindCnt2 === 0 ? 1 : 0);\n\t\t\t\te = e.NextInAEL;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//nonZero, Positive or Negative filling ...\n\t\t\twhile (e !== edge)\n\t\t\t{\n\t\t\t\tedge.WindCnt2 += e.WindDelta;\n\t\t\t\te = e.NextInAEL;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.AddEdgeToSEL = function (edge)\n\t{\n\t\t//SEL pointers in PEdge are use to build transient lists of horizontal edges.\n\t\t//However, since we don't need to worry about processing order, all additions\n\t\t//are made to the front of the list ...\n\t\tif (this.m_SortedEdges === null)\n\t\t{\n\t\t\tthis.m_SortedEdges = edge;\n\t\t\tedge.PrevInSEL = null;\n\t\t\tedge.NextInSEL = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tedge.NextInSEL = this.m_SortedEdges;\n\t\t\tedge.PrevInSEL = null;\n\t\t\tthis.m_SortedEdges.PrevInSEL = edge;\n\t\t\tthis.m_SortedEdges = edge;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.PopEdgeFromSEL = function (e)\n\t{\n\t\t//Pop edge from front of SEL (ie SEL is a FILO list)\n\t\te.v = this.m_SortedEdges;\n\t\tif (e.v === null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tvar oldE = e.v;\n\t\tthis.m_SortedEdges = e.v.NextInSEL;\n\t\tif (this.m_SortedEdges !== null)\n\t\t{\n\t\t\tthis.m_SortedEdges.PrevInSEL = null;\n\t\t}\n\t\toldE.NextInSEL = null;\n\t\toldE.PrevInSEL = null;\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.CopyAELToSEL = function ()\n\t{\n\t\tvar e = this.m_ActiveEdges;\n\t\tthis.m_SortedEdges = e;\n\t\twhile (e !== null)\n\t\t{\n\t\t\te.PrevInSEL = e.PrevInAEL;\n\t\t\te.NextInSEL = e.NextInAEL;\n\t\t\te = e.NextInAEL;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.SwapPositionsInSEL = function (edge1, edge2)\n\t{\n\t\tif (edge1.NextInSEL === null && edge1.PrevInSEL === null)\n\t\t\treturn;\n\t\tif (edge2.NextInSEL === null && edge2.PrevInSEL === null)\n\t\t\treturn;\n\t\tif (edge1.NextInSEL === edge2)\n\t\t{\n\t\t\tvar next = edge2.NextInSEL;\n\t\t\tif (next !== null)\n\t\t\t\tnext.PrevInSEL = edge1;\n\t\t\tvar prev = edge1.PrevInSEL;\n\t\t\tif (prev !== null)\n\t\t\t\tprev.NextInSEL = edge2;\n\t\t\tedge2.PrevInSEL = prev;\n\t\t\tedge2.NextInSEL = edge1;\n\t\t\tedge1.PrevInSEL = edge2;\n\t\t\tedge1.NextInSEL = next;\n\t\t}\n\t\telse if (edge2.NextInSEL === edge1)\n\t\t{\n\t\t\tvar next = edge1.NextInSEL;\n\t\t\tif (next !== null)\n\t\t\t\tnext.PrevInSEL = edge2;\n\t\t\tvar prev = edge2.PrevInSEL;\n\t\t\tif (prev !== null)\n\t\t\t\tprev.NextInSEL = edge1;\n\t\t\tedge1.PrevInSEL = prev;\n\t\t\tedge1.NextInSEL = edge2;\n\t\t\tedge2.PrevInSEL = edge1;\n\t\t\tedge2.NextInSEL = next;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar next = edge1.NextInSEL;\n\t\t\tvar prev = edge1.PrevInSEL;\n\t\t\tedge1.NextInSEL = edge2.NextInSEL;\n\t\t\tif (edge1.NextInSEL !== null)\n\t\t\t\tedge1.NextInSEL.PrevInSEL = edge1;\n\t\t\tedge1.PrevInSEL = edge2.PrevInSEL;\n\t\t\tif (edge1.PrevInSEL !== null)\n\t\t\t\tedge1.PrevInSEL.NextInSEL = edge1;\n\t\t\tedge2.NextInSEL = next;\n\t\t\tif (edge2.NextInSEL !== null)\n\t\t\t\tedge2.NextInSEL.PrevInSEL = edge2;\n\t\t\tedge2.PrevInSEL = prev;\n\t\t\tif (edge2.PrevInSEL !== null)\n\t\t\t\tedge2.PrevInSEL.NextInSEL = edge2;\n\t\t}\n\t\tif (edge1.PrevInSEL === null)\n\t\t\tthis.m_SortedEdges = edge1;\n\t\telse if (edge2.PrevInSEL === null)\n\t\t\tthis.m_SortedEdges = edge2;\n\t};\n\n\tClipperLib.Clipper.prototype.AddLocalMaxPoly = function (e1, e2, pt)\n\t{\n\t\tthis.AddOutPt(e1, pt);\n\t\tif (e2.WindDelta === 0) this.AddOutPt(e2, pt);\n\t\tif (e1.OutIdx === e2.OutIdx)\n\t\t{\n\t\t\te1.OutIdx = -1;\n\t\t\te2.OutIdx = -1;\n\t\t}\n\t\telse if (e1.OutIdx < e2.OutIdx)\n\t\t\tthis.AppendPolygon(e1, e2);\n\t\telse\n\t\t\tthis.AppendPolygon(e2, e1);\n\t};\n\n\tClipperLib.Clipper.prototype.AddLocalMinPoly = function (e1, e2, pt)\n\t{\n\t\tvar result;\n\t\tvar e, prevE;\n\t\tif (ClipperLib.ClipperBase.IsHorizontal(e2) || (e1.Dx > e2.Dx))\n\t\t{\n\t\t\tresult = this.AddOutPt(e1, pt);\n\t\t\te2.OutIdx = e1.OutIdx;\n\t\t\te1.Side = ClipperLib.EdgeSide.esLeft;\n\t\t\te2.Side = ClipperLib.EdgeSide.esRight;\n\t\t\te = e1;\n\t\t\tif (e.PrevInAEL === e2)\n\t\t\t\tprevE = e2.PrevInAEL;\n\t\t\telse\n\t\t\t\tprevE = e.PrevInAEL;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.AddOutPt(e2, pt);\n\t\t\te1.OutIdx = e2.OutIdx;\n\t\t\te1.Side = ClipperLib.EdgeSide.esRight;\n\t\t\te2.Side = ClipperLib.EdgeSide.esLeft;\n\t\t\te = e2;\n\t\t\tif (e.PrevInAEL === e1)\n\t\t\t\tprevE = e1.PrevInAEL;\n\t\t\telse\n\t\t\t\tprevE = e.PrevInAEL;\n\t\t}\n\n\t\tif (prevE !== null && prevE.OutIdx >= 0 && prevE.Top.Y < pt.Y && e.Top.Y < pt.Y)\n\t\t{\n\t\t\tvar xPrev = ClipperLib.Clipper.TopX(prevE, pt.Y);\n\t\t\tvar xE = ClipperLib.Clipper.TopX(e, pt.Y);\n\t\t\tif ((xPrev === xE) && (e.WindDelta !== 0) && (prevE.WindDelta !== 0) && ClipperLib.ClipperBase.SlopesEqual5(new ClipperLib.FPoint2(xPrev, pt.Y), prevE.Top, new ClipperLib.FPoint2(xE, pt.Y), e.Top))\n\t\t\t{\n\t\t\t\tvar outPt = this.AddOutPt(prevE, pt);\n\t\t\t\tthis.AddJoin(result, outPt, e.Top);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.AddOutPt = function (e, pt)\n\t{\n\t\tif (e.OutIdx < 0)\n\t\t{\n\t\t\tvar outRec = this.CreateOutRec();\n\t\t\toutRec.IsOpen = (e.WindDelta === 0);\n\t\t\tvar newOp = new ClipperLib.OutPt();\n\t\t\toutRec.Pts = newOp;\n\t\t\tnewOp.Idx = outRec.Idx;\n\t\t\t//newOp.Pt = pt;\n\t\t\tnewOp.Pt.X = pt.X;\n\t\t\tnewOp.Pt.Y = pt.Y;\n\t\t\tif (ClipperLib.use_xyz) newOp.Pt.Z = pt.Z;\n\t\t\tnewOp.Next = newOp;\n\t\t\tnewOp.Prev = newOp;\n\t\t\tif (!outRec.IsOpen)\n\t\t\t\tthis.SetHoleState(e, outRec);\n\t\t\te.OutIdx = outRec.Idx;\n\t\t\t//nb: do this after SetZ !\n\t\t\treturn newOp;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar outRec = this.m_PolyOuts[e.OutIdx];\n\t\t\t//OutRec.Pts is the 'Left-most' point & OutRec.Pts.Prev is the 'Right-most'\n\t\t\tvar op = outRec.Pts;\n\t\t\tvar ToFront = (e.Side === ClipperLib.EdgeSide.esLeft);\n\t\t\tif (ToFront && ClipperLib.FPoint.op_Equality(pt, op.Pt))\n\t\t\t\treturn op;\n\t\t\telse if (!ToFront && ClipperLib.FPoint.op_Equality(pt, op.Prev.Pt))\n\t\t\t\treturn op.Prev;\n\t\t\tvar newOp = new ClipperLib.OutPt();\n\t\t\tnewOp.Idx = outRec.Idx;\n\t\t\t//newOp.Pt = pt;\n\t\t\tnewOp.Pt.X = pt.X;\n\t\t\tnewOp.Pt.Y = pt.Y;\n\t\t\tif (ClipperLib.use_xyz) newOp.Pt.Z = pt.Z;\n\t\t\tnewOp.Next = op;\n\t\t\tnewOp.Prev = op.Prev;\n\t\t\tnewOp.Prev.Next = newOp;\n\t\t\top.Prev = newOp;\n\t\t\tif (ToFront)\n\t\t\t\toutRec.Pts = newOp;\n\t\t\treturn newOp;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetLastOutPt = function (e)\n\t{\n\t\tvar outRec = this.m_PolyOuts[e.OutIdx];\n\t\tif (e.Side === ClipperLib.EdgeSide.esLeft)\n\t\t{\n\t\t\treturn outRec.Pts;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn outRec.Pts.Prev;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.SwapPoints = function (pt1, pt2)\n\t{\n\t\tvar tmp = new ClipperLib.FPoint1(pt1.Value);\n\t\t//pt1.Value = pt2.Value;\n\t\tpt1.Value.X = pt2.Value.X;\n\t\tpt1.Value.Y = pt2.Value.Y;\n\t\tif (ClipperLib.use_xyz) pt1.Value.Z = pt2.Value.Z;\n\t\t//pt2.Value = tmp;\n\t\tpt2.Value.X = tmp.X;\n\t\tpt2.Value.Y = tmp.Y;\n\t\tif (ClipperLib.use_xyz) pt2.Value.Z = tmp.Z;\n\t};\n\n\tClipperLib.Clipper.prototype.HorzSegmentsOverlap = function (seg1a, seg1b, seg2a, seg2b)\n\t{\n\t\tvar tmp;\n\t\tif (seg1a > seg1b)\n\t\t{\n\t\t\ttmp = seg1a;\n\t\t\tseg1a = seg1b;\n\t\t\tseg1b = tmp;\n\t\t}\n\t\tif (seg2a > seg2b)\n\t\t{\n\t\t\ttmp = seg2a;\n\t\t\tseg2a = seg2b;\n\t\t\tseg2b = tmp;\n\t\t}\n\t\treturn (seg1a < seg2b) && (seg2a < seg1b);\n\t}\n\n\tClipperLib.Clipper.prototype.SetHoleState = function (e, outRec)\n\t{\n\t\tvar e2 = e.PrevInAEL;\n\t\tvar eTmp = null;\n\t\twhile (e2 !== null)\n\t\t{\n\t\t\tif (e2.OutIdx >= 0 && e2.WindDelta !== 0)\n\t\t\t{\n\t\t\t\tif (eTmp === null)\n\t\t\t\t\teTmp = e2;\n\t\t\t\telse if (eTmp.OutIdx === e2.OutIdx)\n\t\t\t\t\teTmp = null; //paired\n\t\t\t}\n\t\t\te2 = e2.PrevInAEL;\n\t\t}\n\n\t\tif (eTmp === null)\n\t\t{\n\t\t\toutRec.FirstLeft = null;\n\t\t\toutRec.IsHole = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\toutRec.FirstLeft = this.m_PolyOuts[eTmp.OutIdx];\n\t\t\toutRec.IsHole = !outRec.FirstLeft.IsHole;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetDx = function (pt1, pt2)\n\t{\n\t\tif (pt1.Y === pt2.Y)\n\t\t\treturn ClipperLib.ClipperBase.horizontal;\n\t\telse\n\t\t\treturn (pt2.X - pt1.X) / (pt2.Y - pt1.Y);\n\t};\n\n\tClipperLib.Clipper.prototype.FirstIsBottomPt = function (btmPt1, btmPt2)\n\t{\n\t\tvar p = btmPt1.Prev;\n\t\twhile ((ClipperLib.FPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p !== btmPt1))\n\t\t\tp = p.Prev;\n\t\tvar dx1p = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n\t\tp = btmPt1.Next;\n\t\twhile ((ClipperLib.FPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p !== btmPt1))\n\t\t\tp = p.Next;\n\t\tvar dx1n = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n\t\tp = btmPt2.Prev;\n\t\twhile ((ClipperLib.FPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p !== btmPt2))\n\t\t\tp = p.Prev;\n\t\tvar dx2p = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n\t\tp = btmPt2.Next;\n\t\twhile ((ClipperLib.FPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p !== btmPt2))\n\t\t\tp = p.Next;\n\t\tvar dx2n = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n\n\t\tif (Math.max(dx1p, dx1n) === Math.max(dx2p, dx2n) && Math.min(dx1p, dx1n) === Math.min(dx2p, dx2n))\n\t\t{\n\t\t\treturn this.Area(btmPt1) > 0; //if otherwise identical use orientation\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (dx1p >= dx2p && dx1p >= dx2n) || (dx1n >= dx2p && dx1n >= dx2n);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetBottomPt = function (pp)\n\t{\n\t\tvar dups = null;\n\t\tvar p = pp.Next;\n\t\twhile (p !== pp)\n\t\t{\n\t\t\tif (p.Pt.Y > pp.Pt.Y)\n\t\t\t{\n\t\t\t\tpp = p;\n\t\t\t\tdups = null;\n\t\t\t}\n\t\t\telse if (p.Pt.Y === pp.Pt.Y && p.Pt.X <= pp.Pt.X)\n\t\t\t{\n\t\t\t\tif (p.Pt.X < pp.Pt.X)\n\t\t\t\t{\n\t\t\t\t\tdups = null;\n\t\t\t\t\tpp = p;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (p.Next !== pp && p.Prev !== pp)\n\t\t\t\t\t\tdups = p;\n\t\t\t\t}\n\t\t\t}\n\t\t\tp = p.Next;\n\t\t}\n\t\tif (dups !== null)\n\t\t{\n\t\t\t//there appears to be at least 2 vertices at bottomPt so ...\n\t\t\twhile (dups !== p)\n\t\t\t{\n\t\t\t\tif (!this.FirstIsBottomPt(p, dups))\n\t\t\t\t\tpp = dups;\n\t\t\t\tdups = dups.Next;\n\t\t\t\twhile (ClipperLib.FPoint.op_Inequality(dups.Pt, pp.Pt))\n\t\t\t\t\tdups = dups.Next;\n\t\t\t}\n\t\t}\n\t\treturn pp;\n\t};\n\n\tClipperLib.Clipper.prototype.GetLowermostRec = function (outRec1, outRec2)\n\t{\n\t\t//work out which polygon fragment has the correct hole state ...\n\t\tif (outRec1.BottomPt === null)\n\t\t\toutRec1.BottomPt = this.GetBottomPt(outRec1.Pts);\n\t\tif (outRec2.BottomPt === null)\n\t\t\toutRec2.BottomPt = this.GetBottomPt(outRec2.Pts);\n\t\tvar bPt1 = outRec1.BottomPt;\n\t\tvar bPt2 = outRec2.BottomPt;\n\t\tif (bPt1.Pt.Y > bPt2.Pt.Y)\n\t\t\treturn outRec1;\n\t\telse if (bPt1.Pt.Y < bPt2.Pt.Y)\n\t\t\treturn outRec2;\n\t\telse if (bPt1.Pt.X < bPt2.Pt.X)\n\t\t\treturn outRec1;\n\t\telse if (bPt1.Pt.X > bPt2.Pt.X)\n\t\t\treturn outRec2;\n\t\telse if (bPt1.Next === bPt1)\n\t\t\treturn outRec2;\n\t\telse if (bPt2.Next === bPt2)\n\t\t\treturn outRec1;\n\t\telse if (this.FirstIsBottomPt(bPt1, bPt2))\n\t\t\treturn outRec1;\n\t\telse\n\t\t\treturn outRec2;\n\t};\n\n\tClipperLib.Clipper.prototype.OutRec1RightOfOutRec2 = function (outRec1, outRec2)\n\t{\n\t\tdo {\n\t\t\toutRec1 = outRec1.FirstLeft;\n\t\t\tif (outRec1 === outRec2)\n\t\t\t\treturn true;\n\t\t}\n\t\twhile (outRec1 !== null)\n\t\treturn false;\n\t};\n\n\tClipperLib.Clipper.prototype.GetOutRec = function (idx)\n\t{\n\t\tvar outrec = this.m_PolyOuts[idx];\n\t\twhile (outrec !== this.m_PolyOuts[outrec.Idx])\n\t\t\toutrec = this.m_PolyOuts[outrec.Idx];\n\t\treturn outrec;\n\t};\n\n\tClipperLib.Clipper.prototype.AppendPolygon = function (e1, e2)\n\t{\n\t\t//get the start and ends of both output polygons ...\n\t\tvar outRec1 = this.m_PolyOuts[e1.OutIdx];\n\t\tvar outRec2 = this.m_PolyOuts[e2.OutIdx];\n\t\tvar holeStateRec;\n\t\tif (this.OutRec1RightOfOutRec2(outRec1, outRec2))\n\t\t\tholeStateRec = outRec2;\n\t\telse if (this.OutRec1RightOfOutRec2(outRec2, outRec1))\n\t\t\tholeStateRec = outRec1;\n\t\telse\n\t\t\tholeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n\t\t//get the start and ends of both output polygons and\n\t\t//join E2 poly onto E1 poly and delete pointers to E2 ...\n\n\t\tvar p1_lft = outRec1.Pts;\n\t\tvar p1_rt = p1_lft.Prev;\n\t\tvar p2_lft = outRec2.Pts;\n\t\tvar p2_rt = p2_lft.Prev;\n\t\t//join e2 poly onto e1 poly and delete pointers to e2 ...\n\t\tif (e1.Side === ClipperLib.EdgeSide.esLeft)\n\t\t{\n\t\t\tif (e2.Side === ClipperLib.EdgeSide.esLeft)\n\t\t\t{\n\t\t\t\t//z y x a b c\n\t\t\t\tthis.ReversePolyPtLinks(p2_lft);\n\t\t\t\tp2_lft.Next = p1_lft;\n\t\t\t\tp1_lft.Prev = p2_lft;\n\t\t\t\tp1_rt.Next = p2_rt;\n\t\t\t\tp2_rt.Prev = p1_rt;\n\t\t\t\toutRec1.Pts = p2_rt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//x y z a b c\n\t\t\t\tp2_rt.Next = p1_lft;\n\t\t\t\tp1_lft.Prev = p2_rt;\n\t\t\t\tp2_lft.Prev = p1_rt;\n\t\t\t\tp1_rt.Next = p2_lft;\n\t\t\t\toutRec1.Pts = p2_lft;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (e2.Side === ClipperLib.EdgeSide.esRight)\n\t\t\t{\n\t\t\t\t//a b c z y x\n\t\t\t\tthis.ReversePolyPtLinks(p2_lft);\n\t\t\t\tp1_rt.Next = p2_rt;\n\t\t\t\tp2_rt.Prev = p1_rt;\n\t\t\t\tp2_lft.Next = p1_lft;\n\t\t\t\tp1_lft.Prev = p2_lft;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//a b c x y z\n\t\t\t\tp1_rt.Next = p2_lft;\n\t\t\t\tp2_lft.Prev = p1_rt;\n\t\t\t\tp1_lft.Prev = p2_rt;\n\t\t\t\tp2_rt.Next = p1_lft;\n\t\t\t}\n\t\t}\n\t\toutRec1.BottomPt = null;\n\t\tif (holeStateRec === outRec2)\n\t\t{\n\t\t\tif (outRec2.FirstLeft !== outRec1)\n\t\t\t\toutRec1.FirstLeft = outRec2.FirstLeft;\n\t\t\toutRec1.IsHole = outRec2.IsHole;\n\t\t}\n\t\toutRec2.Pts = null;\n\t\toutRec2.BottomPt = null;\n\t\toutRec2.FirstLeft = outRec1;\n\t\tvar OKIdx = e1.OutIdx;\n\t\tvar ObsoleteIdx = e2.OutIdx;\n\t\te1.OutIdx = -1;\n\t\t//nb: safe because we only get here via AddLocalMaxPoly\n\t\te2.OutIdx = -1;\n\t\tvar e = this.m_ActiveEdges;\n\t\twhile (e !== null)\n\t\t{\n\t\t\tif (e.OutIdx === ObsoleteIdx)\n\t\t\t{\n\t\t\t\te.OutIdx = OKIdx;\n\t\t\t\te.Side = e1.Side;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\te = e.NextInAEL;\n\t\t}\n\t\toutRec2.Idx = outRec1.Idx;\n\t};\n\n\tClipperLib.Clipper.prototype.ReversePolyPtLinks = function (pp)\n\t{\n\t\tif (pp === null)\n\t\t\treturn;\n\t\tvar pp1;\n\t\tvar pp2;\n\t\tpp1 = pp;\n\t\tdo {\n\t\t\tpp2 = pp1.Next;\n\t\t\tpp1.Next = pp1.Prev;\n\t\t\tpp1.Prev = pp2;\n\t\t\tpp1 = pp2;\n\t\t}\n\t\twhile (pp1 !== pp)\n\t};\n\n\tClipperLib.Clipper.SwapSides = function (edge1, edge2)\n\t{\n\t\tvar side = edge1.Side;\n\t\tedge1.Side = edge2.Side;\n\t\tedge2.Side = side;\n\t};\n\n\tClipperLib.Clipper.SwapPolyIndexes = function (edge1, edge2)\n\t{\n\t\tvar outIdx = edge1.OutIdx;\n\t\tedge1.OutIdx = edge2.OutIdx;\n\t\tedge2.OutIdx = outIdx;\n\t};\n\n\tClipperLib.Clipper.prototype.IntersectEdges = function (e1, e2, pt)\n\t{\n\t\t//e1 will be to the left of e2 BELOW the intersection. Therefore e1 is before\n\t\t//e2 in AEL except when e1 is being inserted at the intersection point ...\n\t\tvar e1Contributing = (e1.OutIdx >= 0);\n\t\tvar e2Contributing = (e2.OutIdx >= 0);\n\n\t\tif (ClipperLib.use_xyz)\n\t\t\tthis.SetZ(pt, e1, e2);\n\n\t\tif (ClipperLib.use_lines)\n\t\t{\n\t\t\t//if either edge is on an OPEN path ...\n\t\t\tif (e1.WindDelta === 0 || e2.WindDelta === 0)\n\t\t\t{\n\t\t\t\t//ignore subject-subject open path intersections UNLESS they\n\t\t\t\t//are both open paths, AND they are both 'contributing maximas' ...\n\t\t\t\tif (e1.WindDelta === 0 && e2.WindDelta === 0) return;\n\t\t\t\t//if intersecting a subj line with a subj poly ...\n\t\t\t\telse if (e1.PolyTyp === e2.PolyTyp &&\n\t\t\t\t\te1.WindDelta !== e2.WindDelta && this.m_ClipType === ClipperLib.ClipType.ctUnion)\n\t\t\t\t{\n\t\t\t\t\tif (e1.WindDelta === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (e2Contributing)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.AddOutPt(e1, pt);\n\t\t\t\t\t\t\tif (e1Contributing)\n\t\t\t\t\t\t\t\te1.OutIdx = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (e1Contributing)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.AddOutPt(e2, pt);\n\t\t\t\t\t\t\tif (e2Contributing)\n\t\t\t\t\t\t\t\te2.OutIdx = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (e1.PolyTyp !== e2.PolyTyp)\n\t\t\t\t{\n\t\t\t\t\tif ((e1.WindDelta === 0) && Math.abs(e2.WindCnt) === 1 &&\n\t\t\t\t\t\t(this.m_ClipType !== ClipperLib.ClipType.ctUnion || e2.WindCnt2 === 0))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.AddOutPt(e1, pt);\n\t\t\t\t\t\tif (e1Contributing)\n\t\t\t\t\t\t\te1.OutIdx = -1;\n\t\t\t\t\t}\n\t\t\t\t\telse if ((e2.WindDelta === 0) && (Math.abs(e1.WindCnt) === 1) &&\n\t\t\t\t\t\t(this.m_ClipType !== ClipperLib.ClipType.ctUnion || e1.WindCnt2 === 0))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.AddOutPt(e2, pt);\n\t\t\t\t\t\tif (e2Contributing)\n\t\t\t\t\t\t\te2.OutIdx = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t//update winding counts...\n\t\t//assumes that e1 will be to the Right of e2 ABOVE the intersection\n\t\tif (e1.PolyTyp === e2.PolyTyp)\n\t\t{\n\t\t\tif (this.IsEvenOddFillType(e1))\n\t\t\t{\n\t\t\t\tvar oldE1WindCnt = e1.WindCnt;\n\t\t\t\te1.WindCnt = e2.WindCnt;\n\t\t\t\te2.WindCnt = oldE1WindCnt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (e1.WindCnt + e2.WindDelta === 0)\n\t\t\t\t\te1.WindCnt = -e1.WindCnt;\n\t\t\t\telse\n\t\t\t\t\te1.WindCnt += e2.WindDelta;\n\t\t\t\tif (e2.WindCnt - e1.WindDelta === 0)\n\t\t\t\t\te2.WindCnt = -e2.WindCnt;\n\t\t\t\telse\n\t\t\t\t\te2.WindCnt -= e1.WindDelta;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!this.IsEvenOddFillType(e2))\n\t\t\t\te1.WindCnt2 += e2.WindDelta;\n\t\t\telse\n\t\t\t\te1.WindCnt2 = (e1.WindCnt2 === 0) ? 1 : 0;\n\t\t\tif (!this.IsEvenOddFillType(e1))\n\t\t\t\te2.WindCnt2 -= e1.WindDelta;\n\t\t\telse\n\t\t\t\te2.WindCnt2 = (e2.WindCnt2 === 0) ? 1 : 0;\n\t\t}\n\t\tvar e1FillType, e2FillType, e1FillType2, e2FillType2;\n\t\tif (e1.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t{\n\t\t\te1FillType = this.m_SubjFillType;\n\t\t\te1FillType2 = this.m_ClipFillType;\n\t\t}\n\t\telse\n\t\t{\n\t\t\te1FillType = this.m_ClipFillType;\n\t\t\te1FillType2 = this.m_SubjFillType;\n\t\t}\n\t\tif (e2.PolyTyp === ClipperLib.PolyType.ptSubject)\n\t\t{\n\t\t\te2FillType = this.m_SubjFillType;\n\t\t\te2FillType2 = this.m_ClipFillType;\n\t\t}\n\t\telse\n\t\t{\n\t\t\te2FillType = this.m_ClipFillType;\n\t\t\te2FillType2 = this.m_SubjFillType;\n\t\t}\n\t\tvar e1Wc, e2Wc;\n\t\tswitch (e1FillType)\n\t\t{\n\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\te1Wc = e1.WindCnt;\n\t\t\tbreak;\n\t\tcase ClipperLib.PolyFillType.pftNegative:\n\t\t\te1Wc = -e1.WindCnt;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\te1Wc = Math.abs(e1.WindCnt);\n\t\t\tbreak;\n\t\t}\n\t\tswitch (e2FillType)\n\t\t{\n\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\te2Wc = e2.WindCnt;\n\t\t\tbreak;\n\t\tcase ClipperLib.PolyFillType.pftNegative:\n\t\t\te2Wc = -e2.WindCnt;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\te2Wc = Math.abs(e2.WindCnt);\n\t\t\tbreak;\n\t\t}\n\t\tif (e1Contributing && e2Contributing)\n\t\t{\n\t\t\tif ((e1Wc !== 0 && e1Wc !== 1) || (e2Wc !== 0 && e2Wc !== 1) ||\n\t\t\t\t(e1.PolyTyp !== e2.PolyTyp && this.m_ClipType !== ClipperLib.ClipType.ctXor))\n\t\t\t{\n\t\t\t\tthis.AddLocalMaxPoly(e1, e2, pt);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.AddOutPt(e1, pt);\n\t\t\t\tthis.AddOutPt(e2, pt);\n\t\t\t\tClipperLib.Clipper.SwapSides(e1, e2);\n\t\t\t\tClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t\t\t}\n\t\t}\n\t\telse if (e1Contributing)\n\t\t{\n\t\t\tif (e2Wc === 0 || e2Wc === 1)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(e1, pt);\n\t\t\t\tClipperLib.Clipper.SwapSides(e1, e2);\n\t\t\t\tClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t\t\t}\n\t\t}\n\t\telse if (e2Contributing)\n\t\t{\n\t\t\tif (e1Wc === 0 || e1Wc === 1)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(e2, pt);\n\t\t\t\tClipperLib.Clipper.SwapSides(e1, e2);\n\t\t\t\tClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t\t\t}\n\t\t}\n\t\telse if ((e1Wc === 0 || e1Wc === 1) && (e2Wc === 0 || e2Wc === 1))\n\t\t{\n\t\t\t//neither edge is currently contributing ...\n\t\t\tvar e1Wc2, e2Wc2;\n\t\t\tswitch (e1FillType2)\n\t\t\t{\n\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\te1Wc2 = e1.WindCnt2;\n\t\t\t\tbreak;\n\t\t\tcase ClipperLib.PolyFillType.pftNegative:\n\t\t\t\te1Wc2 = -e1.WindCnt2;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\te1Wc2 = Math.abs(e1.WindCnt2);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tswitch (e2FillType2)\n\t\t\t{\n\t\t\tcase ClipperLib.PolyFillType.pftPositive:\n\t\t\t\te2Wc2 = e2.WindCnt2;\n\t\t\t\tbreak;\n\t\t\tcase ClipperLib.PolyFillType.pftNegative:\n\t\t\t\te2Wc2 = -e2.WindCnt2;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\te2Wc2 = Math.abs(e2.WindCnt2);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (e1.PolyTyp !== e2.PolyTyp)\n\t\t\t{\n\t\t\t\tthis.AddLocalMinPoly(e1, e2, pt);\n\t\t\t}\n\t\t\telse if (e1Wc === 1 && e2Wc === 1)\n\t\t\t\tswitch (this.m_ClipType)\n\t\t\t\t{\n\t\t\t\tcase ClipperLib.ClipType.ctIntersection:\n\t\t\t\t\tif (e1Wc2 > 0 && e2Wc2 > 0)\n\t\t\t\t\t\tthis.AddLocalMinPoly(e1, e2, pt);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ClipperLib.ClipType.ctUnion:\n\t\t\t\t\tif (e1Wc2 <= 0 && e2Wc2 <= 0)\n\t\t\t\t\t\tthis.AddLocalMinPoly(e1, e2, pt);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ClipperLib.ClipType.ctDifference:\n\t\t\t\t\tif (((e1.PolyTyp === ClipperLib.PolyType.ptClip) && (e1Wc2 > 0) && (e2Wc2 > 0)) ||\n\t\t\t\t\t\t((e1.PolyTyp === ClipperLib.PolyType.ptSubject) && (e1Wc2 <= 0) && (e2Wc2 <= 0)))\n\t\t\t\t\t\tthis.AddLocalMinPoly(e1, e2, pt);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ClipperLib.ClipType.ctXor:\n\t\t\t\t\tthis.AddLocalMinPoly(e1, e2, pt);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tClipperLib.Clipper.SwapSides(e1, e2);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.DeleteFromSEL = function (e)\n\t{\n\t\tvar SelPrev = e.PrevInSEL;\n\t\tvar SelNext = e.NextInSEL;\n\t\tif (SelPrev === null && SelNext === null && (e !== this.m_SortedEdges))\n\t\t\treturn;\n\t\t//already deleted\n\t\tif (SelPrev !== null)\n\t\t\tSelPrev.NextInSEL = SelNext;\n\t\telse\n\t\t\tthis.m_SortedEdges = SelNext;\n\t\tif (SelNext !== null)\n\t\t\tSelNext.PrevInSEL = SelPrev;\n\t\te.NextInSEL = null;\n\t\te.PrevInSEL = null;\n\t};\n\n\tClipperLib.Clipper.prototype.ProcessHorizontals = function ()\n\t{\n\t\tvar horzEdge = {}; //m_SortedEdges;\n\t\twhile (this.PopEdgeFromSEL(horzEdge))\n\t\t{\n\t\t\tthis.ProcessHorizontal(horzEdge.v);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetHorzDirection = function (HorzEdge, $var)\n\t{\n\t\tif (HorzEdge.Bot.X < HorzEdge.Top.X)\n\t\t{\n\t\t\t$var.Left = HorzEdge.Bot.X;\n\t\t\t$var.Right = HorzEdge.Top.X;\n\t\t\t$var.Dir = ClipperLib.Direction.dLeftToRight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$var.Left = HorzEdge.Top.X;\n\t\t\t$var.Right = HorzEdge.Bot.X;\n\t\t\t$var.Dir = ClipperLib.Direction.dRightToLeft;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.ProcessHorizontal = function (horzEdge)\n\t{\n\t\tvar $var = {\n\t\t\tDir: null,\n\t\t\tLeft: null,\n\t\t\tRight: null\n\t\t};\n\n\t\tthis.GetHorzDirection(horzEdge, $var);\n\t\tvar dir = $var.Dir;\n\t\tvar horzLeft = $var.Left;\n\t\tvar horzRight = $var.Right;\n\n\t\tvar IsOpen = horzEdge.WindDelta === 0;\n\n\t\tvar eLastHorz = horzEdge,\n\t\t\teMaxPair = null;\n\t\twhile (eLastHorz.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(eLastHorz.NextInLML))\n\t\t\teLastHorz = eLastHorz.NextInLML;\n\t\tif (eLastHorz.NextInLML === null)\n\t\t\teMaxPair = this.GetMaximaPair(eLastHorz);\n\n\t\tvar currMax = this.m_Maxima;\n\t\tif (currMax !== null)\n\t\t{\n\t\t\t//get the first maxima in range (X) ...\n\t\t\tif (dir === ClipperLib.Direction.dLeftToRight)\n\t\t\t{\n\t\t\t\twhile (currMax !== null && currMax.X <= horzEdge.Bot.X)\n\t\t\t\t{\n\t\t\t\t\tcurrMax = currMax.Next;\n\t\t\t\t}\n\t\t\t\tif (currMax !== null && currMax.X >= eLastHorz.Top.X)\n\t\t\t\t{\n\t\t\t\t\tcurrMax = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile (currMax.Next !== null && currMax.Next.X < horzEdge.Bot.X)\n\t\t\t\t{\n\t\t\t\t\tcurrMax = currMax.Next;\n\t\t\t\t}\n\t\t\t\tif (currMax.X <= eLastHorz.Top.X)\n\t\t\t\t{\n\t\t\t\t\tcurrMax = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar op1 = null;\n\t\tfor (;;) //loop through consec. horizontal edges\n\t\t{\n\t\t\tvar IsLastHorz = (horzEdge === eLastHorz);\n\t\t\tvar e = this.GetNextInAEL(horzEdge, dir);\n\t\t\twhile (e !== null)\n\t\t\t{\n\t\t\t\t//this code block inserts extra coords into horizontal edges (in output\n\t\t\t\t//polygons) whereever maxima touch these horizontal edges. This helps\n\t\t\t\t//'simplifying' polygons (ie if the Simplify property is set).\n\t\t\t\tif (currMax !== null)\n\t\t\t\t{\n\t\t\t\t\tif (dir === ClipperLib.Direction.dLeftToRight)\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (currMax !== null && currMax.X < e.Curr.X)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (horzEdge.OutIdx >= 0 && !IsOpen)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.AddOutPt(horzEdge, new ClipperLib.FPoint2(currMax.X, horzEdge.Bot.Y));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurrMax = currMax.Next;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\twhile (currMax !== null && currMax.X > e.Curr.X)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (horzEdge.OutIdx >= 0 && !IsOpen)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.AddOutPt(horzEdge, new ClipperLib.FPoint2(currMax.X, horzEdge.Bot.Y));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurrMax = currMax.Prev;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ((dir === ClipperLib.Direction.dLeftToRight && e.Curr.X > horzRight) || (dir === ClipperLib.Direction.dRightToLeft && e.Curr.X < horzLeft))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t//Also break if we've got to the end of an intermediate horizontal edge ...\n\t\t\t\t//nb: Smaller Dx's are to the right of larger Dx's ABOVE the horizontal.\n\t\t\t\tif (e.Curr.X === horzEdge.Top.X && horzEdge.NextInLML !== null && e.Dx < horzEdge.NextInLML.Dx)\n\t\t\t\t\tbreak;\n\n\t\t\t\tif (horzEdge.OutIdx >= 0 && !IsOpen) //note: may be done multiple times\n\t\t\t\t{\n\t\t\t\t\tif (ClipperLib.use_xyz)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (dir === ClipperLib.Direction.dLeftToRight)\n\t\t\t\t\t\t\tthis.SetZ(e.Curr, horzEdge, e);\n\t\t\t\t\t\telse this.SetZ(e.Curr, e, horzEdge);\n\t\t\t\t\t}\n\n\t\t\t\t\top1 = this.AddOutPt(horzEdge, e.Curr);\n\t\t\t\t\tvar eNextHorz = this.m_SortedEdges;\n\t\t\t\t\twhile (eNextHorz !== null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (eNextHorz.OutIdx >= 0 && this.HorzSegmentsOverlap(horzEdge.Bot.X, horzEdge.Top.X, eNextHorz.Bot.X, eNextHorz.Top.X))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar op2 = this.GetLastOutPt(eNextHorz);\n\t\t\t\t\t\t\tthis.AddJoin(op2, op1, eNextHorz.Top);\n\t\t\t\t\t\t}\n\t\t\t\t\t\teNextHorz = eNextHorz.NextInSEL;\n\t\t\t\t\t}\n\t\t\t\t\tthis.AddGhostJoin(op1, horzEdge.Bot);\n\t\t\t\t}\n\n\t\t\t\t//OK, so far we're still in range of the horizontal Edge  but make sure\n\t\t\t\t//we're at the last of consec. horizontals when matching with eMaxPair\n\t\t\t\tif (e === eMaxPair && IsLastHorz)\n\t\t\t\t{\n\t\t\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.AddLocalMaxPoly(horzEdge, eMaxPair, horzEdge.Top);\n\t\t\t\t\t}\n\t\t\t\t\tthis.DeleteFromAEL(horzEdge);\n\t\t\t\t\tthis.DeleteFromAEL(eMaxPair);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (dir === ClipperLib.Direction.dLeftToRight)\n\t\t\t\t{\n\t\t\t\t\tvar Pt = new ClipperLib.FPoint2(e.Curr.X, horzEdge.Curr.Y);\n\t\t\t\t\tthis.IntersectEdges(horzEdge, e, Pt);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar Pt = new ClipperLib.FPoint2(e.Curr.X, horzEdge.Curr.Y);\n\t\t\t\t\tthis.IntersectEdges(e, horzEdge, Pt);\n\t\t\t\t}\n\t\t\t\tvar eNext = this.GetNextInAEL(e, dir);\n\t\t\t\tthis.SwapPositionsInAEL(horzEdge, e);\n\t\t\t\te = eNext;\n\t\t\t} //end while(e !== null)\n\n\t\t\t//Break out of loop if HorzEdge.NextInLML is not also horizontal ...\n\t\t\tif (horzEdge.NextInLML === null || !ClipperLib.ClipperBase.IsHorizontal(horzEdge.NextInLML))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\thorzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(horzEdge, horzEdge.Bot);\n\t\t\t}\n\n\t\t\t$var = {\n\t\t\t\tDir: dir,\n\t\t\t\tLeft: horzLeft,\n\t\t\t\tRight: horzRight\n\t\t\t};\n\n\t\t\tthis.GetHorzDirection(horzEdge, $var);\n\t\t\tdir = $var.Dir;\n\t\t\thorzLeft = $var.Left;\n\t\t\thorzRight = $var.Right;\n\n\t\t} //end for (;;)\n\n\t\tif (horzEdge.OutIdx >= 0 && op1 === null)\n\t\t{\n\t\t\top1 = this.GetLastOutPt(horzEdge);\n\t\t\tvar eNextHorz = this.m_SortedEdges;\n\t\t\twhile (eNextHorz !== null)\n\t\t\t{\n\t\t\t\tif (eNextHorz.OutIdx >= 0 && this.HorzSegmentsOverlap(horzEdge.Bot.X, horzEdge.Top.X, eNextHorz.Bot.X, eNextHorz.Top.X))\n\t\t\t\t{\n\t\t\t\t\tvar op2 = this.GetLastOutPt(eNextHorz);\n\t\t\t\t\tthis.AddJoin(op2, op1, eNextHorz.Top);\n\t\t\t\t}\n\t\t\t\teNextHorz = eNextHorz.NextInSEL;\n\t\t\t}\n\t\t\tthis.AddGhostJoin(op1, horzEdge.Top);\n\t\t}\n\n\t\tif (horzEdge.NextInLML !== null)\n\t\t{\n\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t{\n\t\t\t\top1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\n\t\t\t\thorzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t\t\t\tif (horzEdge.WindDelta === 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//nb: HorzEdge is no longer horizontal here\n\t\t\t\tvar ePrev = horzEdge.PrevInAEL;\n\t\t\t\tvar eNext = horzEdge.NextInAEL;\n\t\t\t\tif (ePrev !== null && ePrev.Curr.X === horzEdge.Bot.X && ePrev.Curr.Y === horzEdge.Bot.Y && ePrev.WindDelta === 0 && (ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y && ClipperLib.ClipperBase.SlopesEqual3(horzEdge, ePrev)))\n\t\t\t\t{\n\t\t\t\t\tvar op2 = this.AddOutPt(ePrev, horzEdge.Bot);\n\t\t\t\t\tthis.AddJoin(op1, op2, horzEdge.Top);\n\t\t\t\t}\n\t\t\t\telse if (eNext !== null && eNext.Curr.X === horzEdge.Bot.X && eNext.Curr.Y === horzEdge.Bot.Y && eNext.WindDelta !== 0 && eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y && ClipperLib.ClipperBase.SlopesEqual3(horzEdge, eNext))\n\t\t\t\t{\n\t\t\t\t\tvar op2 = this.AddOutPt(eNext, horzEdge.Bot);\n\t\t\t\t\tthis.AddJoin(op1, op2, horzEdge.Top);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thorzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(horzEdge, horzEdge.Top);\n\t\t\t}\n\t\t\tthis.DeleteFromAEL(horzEdge);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetNextInAEL = function (e, Direction)\n\t{\n\t\treturn Direction === ClipperLib.Direction.dLeftToRight ? e.NextInAEL : e.PrevInAEL;\n\t};\n\n\tClipperLib.Clipper.prototype.IsMinima = function (e)\n\t{\n\t\treturn e !== null && (e.Prev.NextInLML !== e) && (e.Next.NextInLML !== e);\n\t};\n\n\tClipperLib.Clipper.prototype.IsMaxima = function (e, Y)\n\t{\n\t\treturn (e !== null && e.Top.Y === Y && e.NextInLML === null);\n\t};\n\n\tClipperLib.Clipper.prototype.IsIntermediate = function (e, Y)\n\t{\n\t\treturn (e.Top.Y === Y && e.NextInLML !== null);\n\t};\n\n\tClipperLib.Clipper.prototype.GetMaximaPair = function (e)\n\t{\n\t\tif ((ClipperLib.FPoint.op_Equality(e.Next.Top, e.Top)) && e.Next.NextInLML === null)\n\t\t{\n\t\t\treturn e.Next;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ((ClipperLib.FPoint.op_Equality(e.Prev.Top, e.Top)) && e.Prev.NextInLML === null)\n\t\t\t{\n\t\t\t\treturn e.Prev;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.GetMaximaPairEx = function (e)\n\t{\n\t\t//as above but returns null if MaxPair isn't in AEL (unless it's horizontal)\n\t\tvar result = this.GetMaximaPair(e);\n\t\tif (result === null || result.OutIdx === ClipperLib.ClipperBase.Skip ||\n\t\t\t((result.NextInAEL === result.PrevInAEL) && !ClipperLib.ClipperBase.IsHorizontal(result)))\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.ProcessIntersections = function (topY)\n\t{\n\t\tif (this.m_ActiveEdges === null)\n\t\t\treturn true;\n\t\ttry\n\t\t{\n\t\t\tthis.BuildIntersectList(topY);\n\t\t\tif (this.m_IntersectList.length === 0)\n\t\t\t\treturn true;\n\t\t\tif (this.m_IntersectList.length === 1 || this.FixupIntersectionOrder())\n\t\t\t\tthis.ProcessIntersectList();\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tcatch ($$e2)\n\t\t{\n\t\t\tthis.m_SortedEdges = null;\n\t\t\tthis.m_IntersectList.length = 0;\n\t\t\tClipperLib.Error(\"ProcessIntersections error\");\n\t\t}\n\t\tthis.m_SortedEdges = null;\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.BuildIntersectList = function (topY)\n\t{\n\t\tif (this.m_ActiveEdges === null)\n\t\t\treturn;\n\t\t//prepare for sorting ...\n\t\tvar e = this.m_ActiveEdges;\n\t\t//console.log(JSON.stringify(JSON.decycle( e )));\n\t\tthis.m_SortedEdges = e;\n\t\twhile (e !== null)\n\t\t{\n\t\t\te.PrevInSEL = e.PrevInAEL;\n\t\t\te.NextInSEL = e.NextInAEL;\n\t\t\te.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n\t\t\te = e.NextInAEL;\n\t\t}\n\t\t//bubblesort ...\n\t\tvar isModified = true;\n\t\twhile (isModified && this.m_SortedEdges !== null)\n\t\t{\n\t\t\tisModified = false;\n\t\t\te = this.m_SortedEdges;\n\t\t\twhile (e.NextInSEL !== null)\n\t\t\t{\n\t\t\t\tvar eNext = e.NextInSEL;\n\t\t\t\tvar pt = new ClipperLib.FPoint0();\n\t\t\t\t//console.log(\"e.Curr.X: \" + e.Curr.X + \" eNext.Curr.X\" + eNext.Curr.X);\n\t\t\t\tif (e.Curr.X > eNext.Curr.X)\n\t\t\t\t{\n\t\t\t\t\tthis.IntersectPoint(e, eNext, pt);\n\t\t\t\t\tif (pt.Y < topY)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt = new ClipperLib.FPoint2(ClipperLib.Clipper.TopX(e, topY), topY);\n\t\t\t\t\t}\n\t\t\t\t\tvar newNode = new ClipperLib.IntersectNode();\n\t\t\t\t\tnewNode.Edge1 = e;\n\t\t\t\t\tnewNode.Edge2 = eNext;\n\t\t\t\t\t//newNode.Pt = pt;\n\t\t\t\t\tnewNode.Pt.X = pt.X;\n\t\t\t\t\tnewNode.Pt.Y = pt.Y;\n\t\t\t\t\tif (ClipperLib.use_xyz) newNode.Pt.Z = pt.Z;\n\t\t\t\t\tthis.m_IntersectList.push(newNode);\n\t\t\t\t\tthis.SwapPositionsInSEL(e, eNext);\n\t\t\t\t\tisModified = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\te = eNext;\n\t\t\t}\n\t\t\tif (e.PrevInSEL !== null)\n\t\t\t\te.PrevInSEL.NextInSEL = null;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.m_SortedEdges = null;\n\t};\n\n\tClipperLib.Clipper.prototype.EdgesAdjacent = function (inode)\n\t{\n\t\treturn (inode.Edge1.NextInSEL === inode.Edge2) || (inode.Edge1.PrevInSEL === inode.Edge2);\n\t};\n\n\tClipperLib.Clipper.IntersectNodeSort = function (node1, node2)\n\t{\n\t\t//the following typecast is safe because the differences in Pt.Y will\n\t\t//be limited to the height of the scanbeam.\n\t\treturn (node2.Pt.Y - node1.Pt.Y);\n\t};\n\n\tClipperLib.Clipper.prototype.FixupIntersectionOrder = function ()\n\t{\n\t\t//pre-condition: intersections are sorted bottom-most first.\n\t\t//Now it's crucial that intersections are made only between adjacent edges,\n\t\t//so to ensure this the order of intersections may need adjusting ...\n\t\tthis.m_IntersectList.sort(this.m_IntersectNodeComparer);\n\t\tthis.CopyAELToSEL();\n\t\tvar cnt = this.m_IntersectList.length;\n\t\tfor (var i = 0; i < cnt; i++)\n\t\t{\n\t\t\tif (!this.EdgesAdjacent(this.m_IntersectList[i]))\n\t\t\t{\n\t\t\t\tvar j = i + 1;\n\t\t\t\twhile (j < cnt && !this.EdgesAdjacent(this.m_IntersectList[j]))\n\t\t\t\t\tj++;\n\t\t\t\tif (j === cnt)\n\t\t\t\t\treturn false;\n\t\t\t\tvar tmp = this.m_IntersectList[i];\n\t\t\t\tthis.m_IntersectList[i] = this.m_IntersectList[j];\n\t\t\t\tthis.m_IntersectList[j] = tmp;\n\t\t\t}\n\t\t\tthis.SwapPositionsInSEL(this.m_IntersectList[i].Edge1, this.m_IntersectList[i].Edge2);\n\t\t}\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.ProcessIntersectList = function ()\n\t{\n\t\tfor (var i = 0, ilen = this.m_IntersectList.length; i < ilen; i++)\n\t\t{\n\t\t\tvar iNode = this.m_IntersectList[i];\n\t\t\tthis.IntersectEdges(iNode.Edge1, iNode.Edge2, iNode.Pt);\n\t\t\tthis.SwapPositionsInAEL(iNode.Edge1, iNode.Edge2);\n\t\t}\n\t\tthis.m_IntersectList.length = 0;\n\t};\n\n\tClipperLib.Clipper.TopX = function (edge, currentY)\n\t{\n\t\t//if (edge.Bot == edge.Curr) alert (\"edge.Bot = edge.Curr\");\n\t\t//if (edge.Bot == edge.Top) alert (\"edge.Bot = edge.Top\");\n\t\tif (currentY === edge.Top.Y)\n\t\t\treturn edge.Top.X;\n\t\treturn edge.Bot.X + edge.Dx * (currentY - edge.Bot.Y);\n\t};\n\n\tClipperLib.Clipper.prototype.IntersectPoint = function (edge1, edge2, ip)\n\t{\n\t\tip.X = 0;\n\t\tip.Y = 0;\n\t\tvar b1, b2;\n\t\t//nb: with very large coordinate values, it's possible for SlopesEqual() to\n\t\t//return false but for the edge.Dx value be equal due to double precision rounding.\n\t\tif (edge1.Dx === edge2.Dx)\n\t\t{\n\t\t\tip.Y = edge1.Curr.Y;\n\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t\treturn;\n\t\t}\n\t\tif (edge1.Delta.X === 0)\n\t\t{\n\t\t\tip.X = edge1.Bot.X;\n\t\t\tif (ClipperLib.ClipperBase.IsHorizontal(edge2))\n\t\t\t{\n\t\t\t\tip.Y = edge2.Bot.Y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2 = edge2.Bot.Y - (edge2.Bot.X / edge2.Dx);\n\t\t\t\tip.Y = ip.X / edge2.Dx + b2;\n\t\t\t}\n\t\t}\n\t\telse if (edge2.Delta.X === 0)\n\t\t{\n\t\t\tip.X = edge2.Bot.X;\n\t\t\tif (ClipperLib.ClipperBase.IsHorizontal(edge1))\n\t\t\t{\n\t\t\t\tip.Y = edge1.Bot.Y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb1 = edge1.Bot.Y - (edge1.Bot.X / edge1.Dx);\n\t\t\t\tip.Y = ip.X / edge1.Dx + b1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tb1 = edge1.Bot.X - edge1.Bot.Y * edge1.Dx;\n\t\t\tb2 = edge2.Bot.X - edge2.Bot.Y * edge2.Dx;\n\t\t\tvar q = (b2 - b1) / (edge1.Dx - edge2.Dx);\n\t\t\tip.Y = q;\n\t\t\tif (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n\t\t\t\tip.X = edge1.Dx * q + b1;\n\t\t\telse\n\t\t\t\tip.X = edge2.Dx * q + b2;\n\t\t}\n\t\tif (ip.Y < edge1.Top.Y || ip.Y < edge2.Top.Y)\n\t\t{\n\t\t\tif (edge1.Top.Y > edge2.Top.Y)\n\t\t\t{\n\t\t\t\tip.Y = edge1.Top.Y;\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge2, edge1.Top.Y);\n\t\t\t\treturn ip.X < edge1.Top.X;\n\t\t\t}\n\t\t\telse\n\t\t\t\tip.Y = edge2.Top.Y;\n\t\t\tif (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t\telse\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n\t\t}\n\t\t//finally, don't allow 'ip' to be BELOW curr.Y (ie bottom of scanbeam) ...\n\t\tif (ip.Y > edge1.Curr.Y)\n\t\t{\n\t\t\tip.Y = edge1.Curr.Y;\n\t\t\t//better to use the more vertical edge to derive X ...\n\t\t\tif (Math.abs(edge1.Dx) > Math.abs(edge2.Dx))\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n\t\t\telse\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function (topY)\n\t{\n\t\tvar e = this.m_ActiveEdges;\n\n\t\twhile (e !== null)\n\t\t{\n\t\t\t//1. process maxima, treating them as if they're 'bent' horizontal edges,\n\t\t\t//   but exclude maxima with horizontal edges. nb: e can't be a horizontal.\n\t\t\tvar IsMaximaEdge = this.IsMaxima(e, topY);\n\t\t\tif (IsMaximaEdge)\n\t\t\t{\n\t\t\t\tvar eMaxPair = this.GetMaximaPairEx(e);\n\t\t\t\tIsMaximaEdge = (eMaxPair === null || !ClipperLib.ClipperBase.IsHorizontal(eMaxPair));\n\t\t\t}\n\t\t\tif (IsMaximaEdge)\n\t\t\t{\n\t\t\t\tif (this.StrictlySimple)\n\t\t\t\t{\n\t\t\t\t\tthis.InsertMaxima(e.Top.X);\n\t\t\t\t}\n\t\t\t\tvar ePrev = e.PrevInAEL;\n\t\t\t\tthis.DoMaxima(e);\n\t\t\t\tif (ePrev === null)\n\t\t\t\t\te = this.m_ActiveEdges;\n\t\t\t\telse\n\t\t\t\t\te = ePrev.NextInAEL;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//2. promote horizontal edges, otherwise update Curr.X and Curr.Y ...\n\t\t\t\tif (this.IsIntermediate(e, topY) && ClipperLib.ClipperBase.IsHorizontal(e.NextInLML))\n\t\t\t\t{\n\t\t\t\t\te = this.UpdateEdgeIntoAEL(e);\n\t\t\t\t\tif (e.OutIdx >= 0)\n\t\t\t\t\t\tthis.AddOutPt(e, e.Bot);\n\t\t\t\t\tthis.AddEdgeToSEL(e);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\te.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n\t\t\t\t\te.Curr.Y = topY;\n\t\t\t\t}\n\n\t\t\t\tif (ClipperLib.use_xyz)\n\t\t\t\t{\n\t\t\t\t\tif (e.Top.Y === topY) e.Curr.Z = e.Top.Z;\n\t\t\t\t\telse if (e.Bot.Y === topY) e.Curr.Z = e.Bot.Z;\n\t\t\t\t\telse e.Curr.Z = 0;\n\t\t\t\t}\n\n\t\t\t\t//When StrictlySimple and 'e' is being touched by another edge, then\n\t\t\t\t//make sure both edges have a vertex here ...\n\t\t\t\tif (this.StrictlySimple)\n\t\t\t\t{\n\t\t\t\t\tvar ePrev = e.PrevInAEL;\n\t\t\t\t\tif ((e.OutIdx >= 0) && (e.WindDelta !== 0) && ePrev !== null &&\n\t\t\t\t\t\t(ePrev.OutIdx >= 0) && (ePrev.Curr.X === e.Curr.X) &&\n\t\t\t\t\t\t(ePrev.WindDelta !== 0))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ip = new ClipperLib.FPoint1(e.Curr);\n\n\t\t\t\t\t\tif (ClipperLib.use_xyz)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.SetZ(ip, ePrev, e);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar op = this.AddOutPt(ePrev, ip);\n\t\t\t\t\t\tvar op2 = this.AddOutPt(e, ip);\n\t\t\t\t\t\tthis.AddJoin(op, op2, ip); //StrictlySimple (type-3) join\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\te = e.NextInAEL;\n\t\t\t}\n\t\t}\n\t\t//3. Process horizontals at the Top of the scanbeam ...\n\t\tthis.ProcessHorizontals();\n\t\tthis.m_Maxima = null;\n\t\t//4. Promote intermediate vertices ...\n\t\te = this.m_ActiveEdges;\n\t\twhile (e !== null)\n\t\t{\n\t\t\tif (this.IsIntermediate(e, topY))\n\t\t\t{\n\t\t\t\tvar op = null;\n\t\t\t\tif (e.OutIdx >= 0)\n\t\t\t\t\top = this.AddOutPt(e, e.Top);\n\t\t\t\te = this.UpdateEdgeIntoAEL(e);\n\t\t\t\t//if output polygons share an edge, they'll need joining later ...\n\t\t\t\tvar ePrev = e.PrevInAEL;\n\t\t\t\tvar eNext = e.NextInAEL;\n\n\t\t\t\tif (ePrev !== null && ePrev.Curr.X === e.Bot.X && ePrev.Curr.Y === e.Bot.Y && op !== null && ePrev.OutIdx >= 0 && ePrev.Curr.Y === ePrev.Top.Y && ClipperLib.ClipperBase.SlopesEqual5(e.Curr, e.Top, ePrev.Curr, ePrev.Top) && (e.WindDelta !== 0) && (ePrev.WindDelta !== 0))\n\t\t\t\t{\n\t\t\t\t\tvar op2 = this.AddOutPt(ePrev2, e.Bot);\n\t\t\t\t\tthis.AddJoin(op, op2, e.Top);\n\t\t\t\t}\n\t\t\t\telse if (eNext !== null && eNext.Curr.X === e.Bot.X && eNext.Curr.Y === e.Bot.Y && op !== null && eNext.OutIdx >= 0 && eNext.Curr.Y === eNext.Top.Y && ClipperLib.ClipperBase.SlopesEqual5(e.Curr, e.Top, eNext.Curr, eNext.Top) && (e.WindDelta !== 0) && (eNext.WindDelta !== 0))\n\t\t\t\t{\n\t\t\t\t\tvar op2 = this.AddOutPt(eNext, e.Bot);\n\t\t\t\t\tthis.AddJoin(op, op2, e.Top);\n\t\t\t\t}\n\t\t\t}\n\t\t\te = e.NextInAEL;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.DoMaxima = function (e)\n\t{\n\t\tvar eMaxPair = this.GetMaximaPairEx(e);\n\t\tif (eMaxPair === null)\n\t\t{\n\t\t\tif (e.OutIdx >= 0)\n\t\t\t\tthis.AddOutPt(e, e.Top);\n\t\t\tthis.DeleteFromAEL(e);\n\t\t\treturn;\n\t\t}\n\t\tvar eNext = e.NextInAEL;\n\t\twhile (eNext !== null && eNext !== eMaxPair)\n\t\t{\n\t\t\tthis.IntersectEdges(e, eNext, e.Top);\n\t\t\tthis.SwapPositionsInAEL(e, eNext);\n\t\t\teNext = e.NextInAEL;\n\t\t}\n\t\tif (e.OutIdx === -1 && eMaxPair.OutIdx === -1)\n\t\t{\n\t\t\tthis.DeleteFromAEL(e);\n\t\t\tthis.DeleteFromAEL(eMaxPair);\n\t\t}\n\t\telse if (e.OutIdx >= 0 && eMaxPair.OutIdx >= 0)\n\t\t{\n\t\t\tif (e.OutIdx >= 0) this.AddLocalMaxPoly(e, eMaxPair, e.Top);\n\t\t\tthis.DeleteFromAEL(e);\n\t\t\tthis.DeleteFromAEL(eMaxPair);\n\t\t}\n\t\telse if (ClipperLib.use_lines && e.WindDelta === 0)\n\t\t{\n\t\t\tif (e.OutIdx >= 0)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(e, e.Top);\n\t\t\t\te.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t\t\t}\n\t\t\tthis.DeleteFromAEL(e);\n\t\t\tif (eMaxPair.OutIdx >= 0)\n\t\t\t{\n\t\t\t\tthis.AddOutPt(eMaxPair, e.Top);\n\t\t\t\teMaxPair.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t\t\t}\n\t\t\tthis.DeleteFromAEL(eMaxPair);\n\t\t}\n\t\telse\n\t\t\tClipperLib.Error(\"DoMaxima error\");\n\t};\n\n\tClipperLib.Clipper.ReversePaths = function (polys)\n\t{\n\t\tfor (var i = 0, len = polys.length; i < len; i++)\n\t\t\tpolys[i].reverse();\n\t};\n\n\tClipperLib.Clipper.Orientation = function (poly)\n\t{\n\t\treturn ClipperLib.Clipper.Area(poly) >= 0;\n\t};\n\n\tClipperLib.Clipper.prototype.PointCount = function (pts)\n\t{\n\t\tif (pts === null)\n\t\t\treturn 0;\n\t\tvar result = 0;\n\t\tvar p = pts;\n\t\tdo {\n\t\t\tresult++;\n\t\t\tp = p.Next;\n\t\t}\n\t\twhile (p !== pts)\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.BuildResult = function (polyg)\n\t{\n\t\tClipperLib.Clear(polyg);\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\tvar outRec = this.m_PolyOuts[i];\n\t\t\tif (outRec.Pts === null)\n\t\t\t\tcontinue;\n\t\t\tvar p = outRec.Pts.Prev;\n\t\t\tvar cnt = this.PointCount(p);\n\t\t\tif (cnt < 2)\n\t\t\t\tcontinue;\n\t\t\tvar pg = new Array(cnt);\n\t\t\tfor (var j = 0; j < cnt; j++)\n\t\t\t{\n\t\t\t\tpg[j] = p.Pt;\n\t\t\t\tp = p.Prev;\n\t\t\t}\n\t\t\tpolyg.push(pg);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.BuildResult2 = function (polytree)\n\t{\n\t\tpolytree.Clear();\n\t\t//add each output polygon/contour to polytree ...\n\t\t//polytree.m_AllPolys.set_Capacity(this.m_PolyOuts.length);\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\tvar outRec = this.m_PolyOuts[i];\n\t\t\tvar cnt = this.PointCount(outRec.Pts);\n\t\t\tif ((outRec.IsOpen && cnt < 2) || (!outRec.IsOpen && cnt < 3))\n\t\t\t\tcontinue;\n\t\t\tthis.FixHoleLinkage(outRec);\n\t\t\tvar pn = new ClipperLib.PolyNode();\n\t\t\tpolytree.m_AllPolys.push(pn);\n\t\t\toutRec.PolyNode = pn;\n\t\t\tpn.m_polygon.length = cnt;\n\t\t\tvar op = outRec.Pts.Prev;\n\t\t\tfor (var j = 0; j < cnt; j++)\n\t\t\t{\n\t\t\t\tpn.m_polygon[j] = op.Pt;\n\t\t\t\top = op.Prev;\n\t\t\t}\n\t\t}\n\t\t//fixup PolyNode links etc ...\n\t\t//polytree.m_Childs.set_Capacity(this.m_PolyOuts.length);\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\tvar outRec = this.m_PolyOuts[i];\n\t\t\tif (outRec.PolyNode === null)\n\t\t\t\tcontinue;\n\t\t\telse if (outRec.IsOpen)\n\t\t\t{\n\t\t\t\toutRec.PolyNode.IsOpen = true;\n\t\t\t\tpolytree.AddChild(outRec.PolyNode);\n\t\t\t}\n\t\t\telse if (outRec.FirstLeft !== null && outRec.FirstLeft.PolyNode !== null)\n\t\t\t\toutRec.FirstLeft.PolyNode.AddChild(outRec.PolyNode);\n\t\t\telse\n\t\t\t\tpolytree.AddChild(outRec.PolyNode);\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.FixupOutPolyline = function (outRec)\n\t{\n\t\tvar pp = outRec.Pts;\n\t\tvar lastPP = pp.Prev;\n\t\twhile (pp !== lastPP)\n\t\t{\n\t\t\tpp = pp.Next;\n\t\t\tif (ClipperLib.FPoint.op_Equality(pp.Pt, pp.Prev.Pt))\n\t\t\t{\n\t\t\t\tif (pp === lastPP)\n\t\t\t\t{\n\t\t\t\t\tlastPP = pp.Prev;\n\t\t\t\t}\n\t\t\t\tvar tmpPP = pp.Prev;\n\t\t\t\ttmpPP.Next = pp.Next;\n\t\t\t\tpp.Next.Prev = tmpPP;\n\t\t\t\tpp = tmpPP;\n\t\t\t}\n\t\t}\n\t\tif (pp === pp.Prev)\n\t\t{\n\t\t\toutRec.Pts = null;\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.FixupOutPolygon = function (outRec)\n\t{\n\t\t//FixupOutPolygon() - removes duplicate points and simplifies consecutive\n\t\t//parallel edges by removing the middle vertex.\n\t\tvar lastOK = null;\n\t\toutRec.BottomPt = null;\n\t\tvar pp = outRec.Pts;\n\t\tvar preserveCol = this.PreserveCollinear || this.StrictlySimple;\n\t\tfor (;;)\n\t\t{\n\t\t\tif (pp.Prev === pp || pp.Prev === pp.Next)\n\t\t\t{\n\t\t\t\toutRec.Pts = null;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//test for duplicate points and collinear edges ...\n\t\t\tif ((ClipperLib.FPoint.op_Equality(pp.Pt, pp.Next.Pt)) || (ClipperLib.FPoint.op_Equality(pp.Pt, pp.Prev.Pt)) || (ClipperLib.ClipperBase.SlopesEqual4(pp.Prev.Pt, pp.Pt, pp.Next.Pt) && (!preserveCol || !this.Pt2IsBetweenPt1AndPt3(pp.Prev.Pt, pp.Pt, pp.Next.Pt))))\n\t\t\t{\n\t\t\t\tlastOK = null;\n\t\t\t\tpp.Prev.Next = pp.Next;\n\t\t\t\tpp.Next.Prev = pp.Prev;\n\t\t\t\tpp = pp.Prev;\n\t\t\t}\n\t\t\telse if (pp === lastOK)\n\t\t\t\tbreak;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (lastOK === null)\n\t\t\t\t\tlastOK = pp;\n\t\t\t\tpp = pp.Next;\n\t\t\t}\n\t\t}\n\t\toutRec.Pts = pp;\n\t};\n\n\tClipperLib.Clipper.prototype.DupOutPt = function (outPt, InsertAfter)\n\t{\n\t\tvar result = new ClipperLib.OutPt();\n\t\t//result.Pt = outPt.Pt;\n\t\tresult.Pt.X = outPt.Pt.X;\n\t\tresult.Pt.Y = outPt.Pt.Y;\n\t\tif (ClipperLib.use_xyz) result.Pt.Z = outPt.Pt.Z;\n\t\tresult.Idx = outPt.Idx;\n\t\tif (InsertAfter)\n\t\t{\n\t\t\tresult.Next = outPt.Next;\n\t\t\tresult.Prev = outPt;\n\t\t\toutPt.Next.Prev = result;\n\t\t\toutPt.Next = result;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.Prev = outPt.Prev;\n\t\t\tresult.Next = outPt;\n\t\t\toutPt.Prev.Next = result;\n\t\t\toutPt.Prev = result;\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.GetOverlap = function (a1, a2, b1, b2, $val)\n\t{\n\t\tif (a1 < a2)\n\t\t{\n\t\t\tif (b1 < b2)\n\t\t\t{\n\t\t\t\t$val.Left = Math.max(a1, b1);\n\t\t\t\t$val.Right = Math.min(a2, b2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$val.Left = Math.max(a1, b2);\n\t\t\t\t$val.Right = Math.min(a2, b1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b1 < b2)\n\t\t\t{\n\t\t\t\t$val.Left = Math.max(a2, b1);\n\t\t\t\t$val.Right = Math.min(a1, b2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$val.Left = Math.max(a2, b2);\n\t\t\t\t$val.Right = Math.min(a1, b1);\n\t\t\t}\n\t\t}\n\t\treturn $val.Left < $val.Right;\n\t};\n\n\tClipperLib.Clipper.prototype.JoinHorz = function (op1, op1b, op2, op2b, Pt, DiscardLeft)\n\t{\n\t\tvar Dir1 = (op1.Pt.X > op1b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n\t\tvar Dir2 = (op2.Pt.X > op2b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n\t\tif (Dir1 === Dir2)\n\t\t\treturn false;\n\t\t//When DiscardLeft, we want Op1b to be on the Left of Op1, otherwise we\n\t\t//want Op1b to be on the Right. (And likewise with Op2 and Op2b.)\n\t\t//So, to facilitate this while inserting Op1b and Op2b ...\n\t\t//when DiscardLeft, make sure we're AT or RIGHT of Pt before adding Op1b,\n\t\t//otherwise make sure we're AT or LEFT of Pt. (Likewise with Op2b.)\n\t\tif (Dir1 === ClipperLib.Direction.dLeftToRight)\n\t\t{\n\t\t\twhile (op1.Next.Pt.X <= Pt.X &&\n\t\t\t\top1.Next.Pt.X >= op1.Pt.X && op1.Next.Pt.Y === Pt.Y)\n\t\t\t\top1 = op1.Next;\n\t\t\tif (DiscardLeft && (op1.Pt.X !== Pt.X))\n\t\t\t\top1 = op1.Next;\n\t\t\top1b = this.DupOutPt(op1, !DiscardLeft);\n\t\t\tif (ClipperLib.FPoint.op_Inequality(op1b.Pt, Pt))\n\t\t\t{\n\t\t\t\top1 = op1b;\n\t\t\t\t//op1.Pt = Pt;\n\t\t\t\top1.Pt.X = Pt.X;\n\t\t\t\top1.Pt.Y = Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) op1.Pt.Z = Pt.Z;\n\t\t\t\top1b = this.DupOutPt(op1, !DiscardLeft);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile (op1.Next.Pt.X >= Pt.X &&\n\t\t\t\top1.Next.Pt.X <= op1.Pt.X && op1.Next.Pt.Y === Pt.Y)\n\t\t\t\top1 = op1.Next;\n\t\t\tif (!DiscardLeft && (op1.Pt.X !== Pt.X))\n\t\t\t\top1 = op1.Next;\n\t\t\top1b = this.DupOutPt(op1, DiscardLeft);\n\t\t\tif (ClipperLib.FPoint.op_Inequality(op1b.Pt, Pt))\n\t\t\t{\n\t\t\t\top1 = op1b;\n\t\t\t\t//op1.Pt = Pt;\n\t\t\t\top1.Pt.X = Pt.X;\n\t\t\t\top1.Pt.Y = Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) op1.Pt.Z = Pt.Z;\n\t\t\t\top1b = this.DupOutPt(op1, DiscardLeft);\n\t\t\t}\n\t\t}\n\t\tif (Dir2 === ClipperLib.Direction.dLeftToRight)\n\t\t{\n\t\t\twhile (op2.Next.Pt.X <= Pt.X &&\n\t\t\t\top2.Next.Pt.X >= op2.Pt.X && op2.Next.Pt.Y === Pt.Y)\n\t\t\t\top2 = op2.Next;\n\t\t\tif (DiscardLeft && (op2.Pt.X !== Pt.X))\n\t\t\t\top2 = op2.Next;\n\t\t\top2b = this.DupOutPt(op2, !DiscardLeft);\n\t\t\tif (ClipperLib.FPoint.op_Inequality(op2b.Pt, Pt))\n\t\t\t{\n\t\t\t\top2 = op2b;\n\t\t\t\t//op2.Pt = Pt;\n\t\t\t\top2.Pt.X = Pt.X;\n\t\t\t\top2.Pt.Y = Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) op2.Pt.Z = Pt.Z;\n\t\t\t\top2b = this.DupOutPt(op2, !DiscardLeft);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhile (op2.Next.Pt.X >= Pt.X &&\n\t\t\t\top2.Next.Pt.X <= op2.Pt.X && op2.Next.Pt.Y === Pt.Y)\n\t\t\t\top2 = op2.Next;\n\t\t\tif (!DiscardLeft && (op2.Pt.X !== Pt.X))\n\t\t\t\top2 = op2.Next;\n\t\t\top2b = this.DupOutPt(op2, DiscardLeft);\n\t\t\tif (ClipperLib.FPoint.op_Inequality(op2b.Pt, Pt))\n\t\t\t{\n\t\t\t\top2 = op2b;\n\t\t\t\t//op2.Pt = Pt;\n\t\t\t\top2.Pt.X = Pt.X;\n\t\t\t\top2.Pt.Y = Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) op2.Pt.Z = Pt.Z;\n\t\t\t\top2b = this.DupOutPt(op2, DiscardLeft);\n\t\t\t}\n\t\t}\n\t\tif ((Dir1 === ClipperLib.Direction.dLeftToRight) === DiscardLeft)\n\t\t{\n\t\t\top1.Prev = op2;\n\t\t\top2.Next = op1;\n\t\t\top1b.Next = op2b;\n\t\t\top2b.Prev = op1b;\n\t\t}\n\t\telse\n\t\t{\n\t\t\top1.Next = op2;\n\t\t\top2.Prev = op1;\n\t\t\top1b.Prev = op2b;\n\t\t\top2b.Next = op1b;\n\t\t}\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.JoinPoints = function (j, outRec1, outRec2)\n\t{\n\t\tvar op1 = j.OutPt1,\n\t\t\top1b = new ClipperLib.OutPt();\n\t\tvar op2 = j.OutPt2,\n\t\t\top2b = new ClipperLib.OutPt();\n\t\t//There are 3 kinds of joins for output polygons ...\n\t\t//1. Horizontal joins where Join.OutPt1 & Join.OutPt2 are vertices anywhere\n\t\t//along (horizontal) collinear edges (& Join.OffPt is on the same horizontal).\n\t\t//2. Non-horizontal joins where Join.OutPt1 & Join.OutPt2 are at the same\n\t\t//location at the Bottom of the overlapping segment (& Join.OffPt is above).\n\t\t//3. StrictlySimple joins where edges touch but are not collinear and where\n\t\t//Join.OutPt1, Join.OutPt2 & Join.OffPt all share the same point.\n\t\tvar isHorizontal = (j.OutPt1.Pt.Y === j.OffPt.Y);\n\t\tif (isHorizontal && (ClipperLib.FPoint.op_Equality(j.OffPt, j.OutPt1.Pt)) && (ClipperLib.FPoint.op_Equality(j.OffPt, j.OutPt2.Pt)))\n\t\t{\n\t\t\t//Strictly Simple join ...\n\t\t\tif (outRec1 !== outRec2) return false;\n\n\t\t\top1b = j.OutPt1.Next;\n\t\t\twhile (op1b !== op1 && (ClipperLib.FPoint.op_Equality(op1b.Pt, j.OffPt)))\n\t\t\t\top1b = op1b.Next;\n\t\t\tvar reverse1 = (op1b.Pt.Y > j.OffPt.Y);\n\t\t\top2b = j.OutPt2.Next;\n\t\t\twhile (op2b !== op2 && (ClipperLib.FPoint.op_Equality(op2b.Pt, j.OffPt)))\n\t\t\t\top2b = op2b.Next;\n\t\t\tvar reverse2 = (op2b.Pt.Y > j.OffPt.Y);\n\t\t\tif (reverse1 === reverse2)\n\t\t\t\treturn false;\n\t\t\tif (reverse1)\n\t\t\t{\n\t\t\t\top1b = this.DupOutPt(op1, false);\n\t\t\t\top2b = this.DupOutPt(op2, true);\n\t\t\t\top1.Prev = op2;\n\t\t\t\top2.Next = op1;\n\t\t\t\top1b.Next = op2b;\n\t\t\t\top2b.Prev = op1b;\n\t\t\t\tj.OutPt1 = op1;\n\t\t\t\tj.OutPt2 = op1b;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\top1b = this.DupOutPt(op1, true);\n\t\t\t\top2b = this.DupOutPt(op2, false);\n\t\t\t\top1.Next = op2;\n\t\t\t\top2.Prev = op1;\n\t\t\t\top1b.Prev = op2b;\n\t\t\t\top2b.Next = op1b;\n\t\t\t\tj.OutPt1 = op1;\n\t\t\t\tj.OutPt2 = op1b;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if (isHorizontal)\n\t\t{\n\t\t\t//treat horizontal joins differently to non-horizontal joins since with\n\t\t\t//them we're not yet sure where the overlapping is. OutPt1.Pt & OutPt2.Pt\n\t\t\t//may be anywhere along the horizontal edge.\n\t\t\top1b = op1;\n\t\t\twhile (op1.Prev.Pt.Y === op1.Pt.Y && op1.Prev !== op1b && op1.Prev !== op2)\n\t\t\t\top1 = op1.Prev;\n\t\t\twhile (op1b.Next.Pt.Y === op1b.Pt.Y && op1b.Next !== op1 && op1b.Next !== op2)\n\t\t\t\top1b = op1b.Next;\n\t\t\tif (op1b.Next === op1 || op1b.Next === op2)\n\t\t\t\treturn false;\n\t\t\t//a flat 'polygon'\n\t\t\top2b = op2;\n\t\t\twhile (op2.Prev.Pt.Y === op2.Pt.Y && op2.Prev !== op2b && op2.Prev !== op1b)\n\t\t\t\top2 = op2.Prev;\n\t\t\twhile (op2b.Next.Pt.Y === op2b.Pt.Y && op2b.Next !== op2 && op2b.Next !== op1)\n\t\t\t\top2b = op2b.Next;\n\t\t\tif (op2b.Next === op2 || op2b.Next === op1)\n\t\t\t\treturn false;\n\t\t\t//a flat 'polygon'\n\t\t\t//Op1 -. Op1b & Op2 -. Op2b are the extremites of the horizontal edges\n\n\t\t\tvar $val = {\n\t\t\t\tLeft: null,\n\t\t\t\tRight: null\n\t\t\t};\n\n\t\t\tif (!this.GetOverlap(op1.Pt.X, op1b.Pt.X, op2.Pt.X, op2b.Pt.X, $val))\n\t\t\t\treturn false;\n\t\t\tvar Left = $val.Left;\n\t\t\tvar Right = $val.Right;\n\n\t\t\t//DiscardLeftSide: when overlapping edges are joined, a spike will created\n\t\t\t//which needs to be cleaned up. However, we don't want Op1 or Op2 caught up\n\t\t\t//on the discard Side as either may still be needed for other joins ...\n\t\t\tvar Pt = new ClipperLib.FPoint0();\n\t\t\tvar DiscardLeftSide;\n\t\t\tif (op1.Pt.X >= Left && op1.Pt.X <= Right)\n\t\t\t{\n\t\t\t\t//Pt = op1.Pt;\n\t\t\t\tPt.X = op1.Pt.X;\n\t\t\t\tPt.Y = op1.Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) Pt.Z = op1.Pt.Z;\n\t\t\t\tDiscardLeftSide = (op1.Pt.X > op1b.Pt.X);\n\t\t\t}\n\t\t\telse if (op2.Pt.X >= Left && op2.Pt.X <= Right)\n\t\t\t{\n\t\t\t\t//Pt = op2.Pt;\n\t\t\t\tPt.X = op2.Pt.X;\n\t\t\t\tPt.Y = op2.Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) Pt.Z = op2.Pt.Z;\n\t\t\t\tDiscardLeftSide = (op2.Pt.X > op2b.Pt.X);\n\t\t\t}\n\t\t\telse if (op1b.Pt.X >= Left && op1b.Pt.X <= Right)\n\t\t\t{\n\t\t\t\t//Pt = op1b.Pt;\n\t\t\t\tPt.X = op1b.Pt.X;\n\t\t\t\tPt.Y = op1b.Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) Pt.Z = op1b.Pt.Z;\n\t\t\t\tDiscardLeftSide = op1b.Pt.X > op1.Pt.X;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Pt = op2b.Pt;\n\t\t\t\tPt.X = op2b.Pt.X;\n\t\t\t\tPt.Y = op2b.Pt.Y;\n\t\t\t\tif (ClipperLib.use_xyz) Pt.Z = op2b.Pt.Z;\n\t\t\t\tDiscardLeftSide = (op2b.Pt.X > op2.Pt.X);\n\t\t\t}\n\t\t\tj.OutPt1 = op1;\n\t\t\tj.OutPt2 = op2;\n\t\t\treturn this.JoinHorz(op1, op1b, op2, op2b, Pt, DiscardLeftSide);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//nb: For non-horizontal joins ...\n\t\t\t//    1. Jr.OutPt1.Pt.Y == Jr.OutPt2.Pt.Y\n\t\t\t//    2. Jr.OutPt1.Pt > Jr.OffPt.Y\n\t\t\t//make sure the polygons are correctly oriented ...\n\t\t\top1b = op1.Next;\n\t\t\twhile ((ClipperLib.FPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b !== op1))\n\t\t\t\top1b = op1b.Next;\n\t\t\tvar Reverse1 = ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual4(op1.Pt, op1b.Pt, j.OffPt));\n\t\t\tif (Reverse1)\n\t\t\t{\n\t\t\t\top1b = op1.Prev;\n\t\t\t\twhile ((ClipperLib.FPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b !== op1))\n\t\t\t\t\top1b = op1b.Prev;\n\n\t\t\t\tif ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual4(op1.Pt, op1b.Pt, j.OffPt))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\top2b = op2.Next;\n\t\t\twhile ((ClipperLib.FPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b !== op2))\n\t\t\t\top2b = op2b.Next;\n\n\t\t\tvar Reverse2 = ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual4(op2.Pt, op2b.Pt, j.OffPt));\n\t\t\tif (Reverse2)\n\t\t\t{\n\t\t\t\top2b = op2.Prev;\n\t\t\t\twhile ((ClipperLib.FPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b !== op2))\n\t\t\t\t\top2b = op2b.Prev;\n\n\t\t\t\tif ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual4(op2.Pt, op2b.Pt, j.OffPt))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ((op1b === op1) || (op2b === op2) || (op1b === op2b) ||\n\t\t\t\t((outRec1 === outRec2) && (Reverse1 === Reverse2)))\n\t\t\t\treturn false;\n\t\t\tif (Reverse1)\n\t\t\t{\n\t\t\t\top1b = this.DupOutPt(op1, false);\n\t\t\t\top2b = this.DupOutPt(op2, true);\n\t\t\t\top1.Prev = op2;\n\t\t\t\top2.Next = op1;\n\t\t\t\top1b.Next = op2b;\n\t\t\t\top2b.Prev = op1b;\n\t\t\t\tj.OutPt1 = op1;\n\t\t\t\tj.OutPt2 = op1b;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\top1b = this.DupOutPt(op1, true);\n\t\t\t\top2b = this.DupOutPt(op2, false);\n\t\t\t\top1.Next = op2;\n\t\t\t\top2.Prev = op1;\n\t\t\t\top1b.Prev = op2b;\n\t\t\t\top2b.Next = op1b;\n\t\t\t\tj.OutPt1 = op1;\n\t\t\t\tj.OutPt2 = op1b;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.Clipper.GetBounds = function (paths)\n\t{\n\t\tvar i = 0,\n\t\t\tcnt = paths.length;\n\t\twhile (i < cnt && paths[i].length === 0) i++;\n\t\tif (i === cnt) return new ClipperLib.FRect(0, 0, 0, 0);\n\t\tvar result = new ClipperLib.FRect();\n\t\tresult.left = paths[i][0].X;\n\t\tresult.right = result.left;\n\t\tresult.top = paths[i][0].Y;\n\t\tresult.bottom = result.top;\n\t\tfor (; i < cnt; i++)\n\t\t\tfor (var j = 0, jlen = paths[i].length; j < jlen; j++)\n\t\t\t{\n\t\t\t\tif (paths[i][j].X < result.left) result.left = paths[i][j].X;\n\t\t\t\telse if (paths[i][j].X > result.right) result.right = paths[i][j].X;\n\t\t\t\tif (paths[i][j].Y < result.top) result.top = paths[i][j].Y;\n\t\t\t\telse if (paths[i][j].Y > result.bottom) result.bottom = paths[i][j].Y;\n\t\t\t}\n\t\treturn result;\n\t}\n\tClipperLib.Clipper.prototype.GetBounds2 = function (ops)\n\t{\n\t\tvar opStart = ops;\n\t\tvar result = new ClipperLib.FRect();\n\t\tresult.left = ops.Pt.X;\n\t\tresult.right = ops.Pt.X;\n\t\tresult.top = ops.Pt.Y;\n\t\tresult.bottom = ops.Pt.Y;\n\t\tops = ops.Next;\n\t\twhile (ops !== opStart)\n\t\t{\n\t\t\tif (ops.Pt.X < result.left)\n\t\t\t\tresult.left = ops.Pt.X;\n\t\t\tif (ops.Pt.X > result.right)\n\t\t\t\tresult.right = ops.Pt.X;\n\t\t\tif (ops.Pt.Y < result.top)\n\t\t\t\tresult.top = ops.Pt.Y;\n\t\t\tif (ops.Pt.Y > result.bottom)\n\t\t\t\tresult.bottom = ops.Pt.Y;\n\t\t\tops = ops.Next;\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.PointInPolygon = function (pt, path)\n\t{\n\t\t//returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\t//See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n\t\t//http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n\t\tvar result = 0,\n\t\t\tcnt = path.length;\n\t\tif (cnt < 3)\n\t\t\treturn 0;\n\t\tvar ip = path[0];\n\t\tfor (var i = 1; i <= cnt; ++i)\n\t\t{\n\t\t\tvar ipNext = (i === cnt ? path[0] : path[i]);\n\t\t\tif (ipNext.Y === pt.Y)\n\t\t\t{\n\t\t\t\tif ((ipNext.X === pt.X) || (ip.Y === pt.Y && ((ipNext.X > pt.X) === (ip.X < pt.X))))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ((ip.Y < pt.Y) !== (ipNext.Y < pt.Y))\n\t\t\t{\n\t\t\t\tif (ip.X >= pt.X)\n\t\t\t\t{\n\t\t\t\t\tif (ipNext.X > pt.X)\n\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n\t\t\t\t\t\tif (d === 0)\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\telse if ((d > 0) === (ipNext.Y > ip.Y))\n\t\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (ipNext.X > pt.X)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n\t\t\t\t\t\tif (d === 0)\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\telse if ((d > 0) === (ipNext.Y > ip.Y))\n\t\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tip = ipNext;\n\t\t}\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.PointInPolygon = function (pt, op)\n\t{\n\t\t//returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\tvar result = 0;\n\t\tvar startOp = op;\n\t\tvar ptx = pt.X,\n\t\t\tpty = pt.Y;\n\t\tvar poly0x = op.Pt.X,\n\t\t\tpoly0y = op.Pt.Y;\n\t\tdo {\n\t\t\top = op.Next;\n\t\t\tvar poly1x = op.Pt.X,\n\t\t\t\tpoly1y = op.Pt.Y;\n\t\t\tif (poly1y === pty)\n\t\t\t{\n\t\t\t\tif ((poly1x === ptx) || (poly0y === pty && ((poly1x > ptx) === (poly0x < ptx))))\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ((poly0y < pty) !== (poly1y < pty))\n\t\t\t{\n\t\t\t\tif (poly0x >= ptx)\n\t\t\t\t{\n\t\t\t\t\tif (poly1x > ptx)\n\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n\t\t\t\t\t\tif (d === 0)\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\tif ((d > 0) === (poly1y > poly0y))\n\t\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (poly1x > ptx)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n\t\t\t\t\t\tif (d === 0)\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\tif ((d > 0) === (poly1y > poly0y))\n\t\t\t\t\t\t\tresult = 1 - result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpoly0x = poly1x;\n\t\t\tpoly0y = poly1y;\n\t\t} while (startOp !== op);\n\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.prototype.Poly2ContainsPoly1 = function (outPt1, outPt2)\n\t{\n\t\tvar op = outPt1;\n\t\tdo {\n\t\t\t//nb: PointInPolygon returns 0 if false, +1 if true, -1 if pt on polygon\n\t\t\tvar res = this.PointInPolygon(op.Pt, outPt2);\n\t\t\tif (res >= 0)\n\t\t\t\treturn res > 0;\n\t\t\top = op.Next;\n\t\t}\n\t\twhile (op !== outPt1)\n\t\treturn true;\n\t};\n\n\tClipperLib.Clipper.prototype.FixupFirstLefts1 = function (OldOutRec, NewOutRec)\n\t{\n\t\tvar outRec, firstLeft;\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\toutRec = this.m_PolyOuts[i];\n\t\t\tfirstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n\t\t\tif (outRec.Pts !== null && firstLeft === OldOutRec)\n\t\t\t{\n\t\t\t\tif (this.Poly2ContainsPoly1(outRec.Pts, NewOutRec.Pts))\n\t\t\t\t\toutRec.FirstLeft = NewOutRec;\n\t\t\t}\n\t\t}\n\t}\n\n\tClipperLib.Clipper.prototype.FixupFirstLefts2 = function (innerOutRec, outerOutRec)\n\t{\n\t\t//A polygon has split into two such that one is now the inner of the other.\n\t\t//It's possible that these polygons now wrap around other polygons, so check\n\t\t//every polygon that's also contained by OuterOutRec's FirstLeft container\n\t\t//(including nil) to see if they've become inner to the new inner polygon ...\n\t\tvar orfl = outerOutRec.FirstLeft;\n\t\tvar outRec, firstLeft;\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\toutRec = this.m_PolyOuts[i];\n\t\t\tif (outRec.Pts === null || outRec === outerOutRec || outRec === innerOutRec)\n\t\t\t\tcontinue;\n\t\t\tfirstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n\t\t\tif (firstLeft !== orfl && firstLeft !== innerOutRec && firstLeft !== outerOutRec)\n\t\t\t\tcontinue;\n\t\t\tif (this.Poly2ContainsPoly1(outRec.Pts, innerOutRec.Pts))\n\t\t\t\toutRec.FirstLeft = innerOutRec;\n\t\t\telse if (this.Poly2ContainsPoly1(outRec.Pts, outerOutRec.Pts))\n\t\t\t\toutRec.FirstLeft = outerOutRec;\n\t\t\telse if (outRec.FirstLeft === innerOutRec || outRec.FirstLeft === outerOutRec)\n\t\t\t\toutRec.FirstLeft = orfl;\n\t\t}\n\t}\n\n\tClipperLib.Clipper.prototype.FixupFirstLefts3 = function (OldOutRec, NewOutRec)\n\t{\n\t\t//same as FixupFirstLefts1 but doesn't call Poly2ContainsPoly1()\n\t\tvar outRec;\n\t\tvar firstLeft;\n\t\tfor (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t\t{\n\t\t\toutRec = this.m_PolyOuts[i];\n\t\t\tfirstLeft = ClipperLib.Clipper.ParseFirstLeft(outRec.FirstLeft);\n\t\t\tif (outRec.Pts !== null && firstLeft === OldOutRec)\n\t\t\t\toutRec.FirstLeft = NewOutRec;\n\t\t}\n\t}\n\n\tClipperLib.Clipper.ParseFirstLeft = function (FirstLeft)\n\t{\n\t\twhile (FirstLeft !== null && FirstLeft.Pts === null)\n\t\t\tFirstLeft = FirstLeft.FirstLeft;\n\t\treturn FirstLeft;\n\t};\n\n\tClipperLib.Clipper.prototype.JoinCommonEdges = function ()\n\t{\n\t\tfor (var i = 0, ilen = this.m_Joins.length; i < ilen; i++)\n\t\t{\n\t\t\tvar join = this.m_Joins[i];\n\t\t\tvar outRec1 = this.GetOutRec(join.OutPt1.Idx);\n\t\t\tvar outRec2 = this.GetOutRec(join.OutPt2.Idx);\n\t\t\tif (outRec1.Pts === null || outRec2.Pts === null)\n\t\t\t\tcontinue;\n\n\t\t\tif (outRec1.IsOpen || outRec2.IsOpen)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//get the polygon fragment with the correct hole state (FirstLeft)\n\t\t\t//before calling JoinPoints() ...\n\t\t\tvar holeStateRec;\n\t\t\tif (outRec1 === outRec2)\n\t\t\t\tholeStateRec = outRec1;\n\t\t\telse if (this.OutRec1RightOfOutRec2(outRec1, outRec2))\n\t\t\t\tholeStateRec = outRec2;\n\t\t\telse if (this.OutRec1RightOfOutRec2(outRec2, outRec1))\n\t\t\t\tholeStateRec = outRec1;\n\t\t\telse\n\t\t\t\tholeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n\t\t\tif (!this.JoinPoints(join, outRec1, outRec2)) continue;\n\n\t\t\tif (outRec1 === outRec2)\n\t\t\t{\n\t\t\t\t//instead of joining two polygons, we've just created a new one by\n\t\t\t\t//splitting one polygon into two.\n\t\t\t\toutRec1.Pts = join.OutPt1;\n\t\t\t\toutRec1.BottomPt = null;\n\t\t\t\toutRec2 = this.CreateOutRec();\n\t\t\t\toutRec2.Pts = join.OutPt2;\n\t\t\t\t//update all OutRec2.Pts Idx's ...\n\t\t\t\tthis.UpdateOutPtIdxs(outRec2);\n\n\t\t\t\tif (this.Poly2ContainsPoly1(outRec2.Pts, outRec1.Pts))\n\t\t\t\t{\n\t\t\t\t\t//outRec1 contains outRec2 ...\n\t\t\t\t\toutRec2.IsHole = !outRec1.IsHole;\n\t\t\t\t\toutRec2.FirstLeft = outRec1;\n\t\t\t\t\tif (this.m_UsingPolyTree)\n\t\t\t\t\t\tthis.FixupFirstLefts2(outRec2, outRec1);\n\t\t\t\t\tif ((outRec2.IsHole ^ this.ReverseSolution) == (this.Area$1(outRec2) > 0))\n\t\t\t\t\t\tthis.ReversePolyPtLinks(outRec2.Pts);\n\t\t\t\t}\n\t\t\t\telse if (this.Poly2ContainsPoly1(outRec1.Pts, outRec2.Pts))\n\t\t\t\t{\n\t\t\t\t\t//outRec2 contains outRec1 ...\n\t\t\t\t\toutRec2.IsHole = outRec1.IsHole;\n\t\t\t\t\toutRec1.IsHole = !outRec2.IsHole;\n\t\t\t\t\toutRec2.FirstLeft = outRec1.FirstLeft;\n\t\t\t\t\toutRec1.FirstLeft = outRec2;\n\t\t\t\t\tif (this.m_UsingPolyTree)\n\t\t\t\t\t\tthis.FixupFirstLefts2(outRec1, outRec2);\n\n\t\t\t\t\tif ((outRec1.IsHole ^ this.ReverseSolution) == (this.Area$1(outRec1) > 0))\n\t\t\t\t\t\tthis.ReversePolyPtLinks(outRec1.Pts);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//the 2 polygons are completely separate ...\n\t\t\t\t\toutRec2.IsHole = outRec1.IsHole;\n\t\t\t\t\toutRec2.FirstLeft = outRec1.FirstLeft;\n\t\t\t\t\t//fixup FirstLeft pointers that may need reassigning to OutRec2\n\t\t\t\t\tif (this.m_UsingPolyTree)\n\t\t\t\t\t\tthis.FixupFirstLefts1(outRec1, outRec2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//joined 2 polygons together ...\n\t\t\t\toutRec2.Pts = null;\n\t\t\t\toutRec2.BottomPt = null;\n\t\t\t\toutRec2.Idx = outRec1.Idx;\n\t\t\t\toutRec1.IsHole = holeStateRec.IsHole;\n\t\t\t\tif (holeStateRec === outRec2)\n\t\t\t\t\toutRec1.FirstLeft = outRec2.FirstLeft;\n\t\t\t\toutRec2.FirstLeft = outRec1;\n\t\t\t\t//fixup FirstLeft pointers that may need reassigning to OutRec1\n\t\t\t\tif (this.m_UsingPolyTree)\n\t\t\t\t\tthis.FixupFirstLefts3(outRec2, outRec1);\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.Clipper.prototype.UpdateOutPtIdxs = function (outrec)\n\t{\n\t\tvar op = outrec.Pts;\n\t\tdo {\n\t\t\top.Idx = outrec.Idx;\n\t\t\top = op.Prev;\n\t\t}\n\t\twhile (op !== outrec.Pts)\n\t};\n\n\tClipperLib.Clipper.prototype.DoSimplePolygons = function ()\n\t{\n\t\tvar i = 0;\n\t\twhile (i < this.m_PolyOuts.length)\n\t\t{\n\t\t\tvar outrec = this.m_PolyOuts[i++];\n\t\t\tvar op = outrec.Pts;\n\t\t\tif (op === null || outrec.IsOpen)\n\t\t\t\tcontinue;\n\t\t\tdo //for each Pt in Polygon until duplicate found do ...\n\t\t\t{\n\t\t\t\tvar op2 = op.Next;\n\t\t\t\twhile (op2 !== outrec.Pts)\n\t\t\t\t{\n\t\t\t\t\tif ((ClipperLib.FPoint.op_Equality(op.Pt, op2.Pt)) && op2.Next !== op && op2.Prev !== op)\n\t\t\t\t\t{\n\t\t\t\t\t\t//split the polygon into two ...\n\t\t\t\t\t\tvar op3 = op.Prev;\n\t\t\t\t\t\tvar op4 = op2.Prev;\n\t\t\t\t\t\top.Prev = op4;\n\t\t\t\t\t\top4.Next = op;\n\t\t\t\t\t\top2.Prev = op3;\n\t\t\t\t\t\top3.Next = op2;\n\t\t\t\t\t\toutrec.Pts = op;\n\t\t\t\t\t\tvar outrec2 = this.CreateOutRec();\n\t\t\t\t\t\toutrec2.Pts = op2;\n\t\t\t\t\t\tthis.UpdateOutPtIdxs(outrec2);\n\t\t\t\t\t\tif (this.Poly2ContainsPoly1(outrec2.Pts, outrec.Pts))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//OutRec2 is contained by OutRec1 ...\n\t\t\t\t\t\t\toutrec2.IsHole = !outrec.IsHole;\n\t\t\t\t\t\t\toutrec2.FirstLeft = outrec;\n\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec2, outrec);\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (this.Poly2ContainsPoly1(outrec.Pts, outrec2.Pts))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//OutRec1 is contained by OutRec2 ...\n\t\t\t\t\t\t\toutrec2.IsHole = outrec.IsHole;\n\t\t\t\t\t\t\toutrec.IsHole = !outrec2.IsHole;\n\t\t\t\t\t\t\toutrec2.FirstLeft = outrec.FirstLeft;\n\t\t\t\t\t\t\toutrec.FirstLeft = outrec2;\n\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec, outrec2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//the 2 polygons are separate ...\n\t\t\t\t\t\t\toutrec2.IsHole = outrec.IsHole;\n\t\t\t\t\t\t\toutrec2.FirstLeft = outrec.FirstLeft;\n\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts1(outrec, outrec2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\top2 = op;\n\t\t\t\t\t\t//ie get ready for the next iteration\n\t\t\t\t\t}\n\t\t\t\t\top2 = op2.Next;\n\t\t\t\t}\n\t\t\t\top = op.Next;\n\t\t\t}\n\t\t\twhile (op !== outrec.Pts)\n\t\t}\n\t};\n\n\tClipperLib.Clipper.Area = function (poly)\n\t{\n\t\tif (!Array.isArray(poly))\n\t\t\treturn 0;\n\t\tvar cnt = poly.length;\n\t\tif (cnt < 3)\n\t\t\treturn 0;\n\t\tvar a = 0;\n\t\tfor (var i = 0, j = cnt - 1; i < cnt; ++i)\n\t\t{\n\t\t\ta += (poly[j].X + poly[i].X) * (poly[j].Y - poly[i].Y);\n\t\t\tj = i;\n\t\t}\n\t\treturn -a * 0.5;\n\t};\n\n\tClipperLib.Clipper.prototype.Area = function (op)\n\t{\n\t\tvar opFirst = op;\n\t\tif (op === null) return 0;\n\t\tvar a = 0;\n\t\tdo {\n\t\t\ta = a + (op.Prev.Pt.X + op.Pt.X) * (op.Prev.Pt.Y - op.Pt.Y);\n\t\t\top = op.Next;\n\t\t} while (op !== opFirst); // && typeof op !== 'undefined');\n\t\treturn a * 0.5;\n\t}\n\n\tClipperLib.Clipper.prototype.Area$1 = function (outRec)\n\t{\n\t\treturn this.Area(outRec.Pts);\n\t};\n\n\tClipperLib.Clipper.SimplifyPolygon = function (poly, fillType)\n\t{\n\t\tvar result = new Array();\n\t\tvar c = new ClipperLib.Clipper(0);\n\t\tc.StrictlySimple = true;\n\t\tc.AddPath(poly, ClipperLib.PolyType.ptSubject, true);\n\t\tc.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.SimplifyPolygons = function (polys, fillType)\n\t{\n\t\tif (typeof (fillType) === \"undefined\") fillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t\tvar result = new Array();\n\t\tvar c = new ClipperLib.Clipper(0);\n\t\tc.StrictlySimple = true;\n\t\tc.AddPaths(polys, ClipperLib.PolyType.ptSubject, true);\n\t\tc.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.DistanceSqrd = function (pt1, pt2)\n\t{\n\t\tvar dx = (pt1.X - pt2.X);\n\t\tvar dy = (pt1.Y - pt2.Y);\n\t\treturn (dx * dx + dy * dy);\n\t};\n\n\tClipperLib.Clipper.DistanceFromLineSqrd = function (pt, ln1, ln2)\n\t{\n\t\t//The equation of a line in general form (Ax + By + C = 0)\n\t\t//given 2 points (x¹,y¹) & (x²,y²) is ...\n\t\t//(y¹ - y²)x + (x² - x¹)y + (y² - y¹)x¹ - (x² - x¹)y¹ = 0\n\t\t//A = (y¹ - y²); B = (x² - x¹); C = (y² - y¹)x¹ - (x² - x¹)y¹\n\t\t//perpendicular distance of point (x³,y³) = (Ax³ + By³ + C)/Sqrt(A² + B²)\n\t\t//see http://en.wikipedia.org/wiki/Perpendicular_distance\n\t\tvar A = ln1.Y - ln2.Y;\n\t\tvar B = ln2.X - ln1.X;\n\t\tvar C = A * ln1.X + B * ln1.Y;\n\t\tC = A * pt.X + B * pt.Y - C;\n\t\treturn (C * C) / (A * A + B * B);\n\t};\n\n\tClipperLib.Clipper.SlopesNearCollinear = function (pt1, pt2, pt3, distSqrd)\n\t{\n\t\t//this function is more accurate when the point that's GEOMETRICALLY\n\t\t//between the other 2 points is the one that's tested for distance.\n\t\t//nb: with 'spikes', either pt1 or pt3 is geometrically between the other pts\n\t\tif (Math.abs(pt1.X - pt2.X) > Math.abs(pt1.Y - pt2.Y))\n\t\t{\n\t\t\tif ((pt1.X > pt2.X) === (pt1.X < pt3.X))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\t\telse if ((pt2.X > pt1.X) === (pt2.X < pt3.X))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\telse\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ((pt1.Y > pt2.Y) === (pt1.Y < pt3.Y))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\t\telse if ((pt2.Y > pt1.Y) === (pt2.Y < pt3.Y))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\telse\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t}\n\t}\n\n\tClipperLib.Clipper.PointsAreClose = function (pt1, pt2, distSqrd)\n\t{\n\t\tvar dx = pt1.X - pt2.X;\n\t\tvar dy = pt1.Y - pt2.Y;\n\t\treturn ((dx * dx) + (dy * dy) <= distSqrd);\n\t};\n\n\tClipperLib.Clipper.ExcludeOp = function (op)\n\t{\n\t\tvar result = op.Prev;\n\t\tresult.Next = op.Next;\n\t\top.Next.Prev = result;\n\t\tresult.Idx = 0;\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.CleanPolygon = function (path, distance)\n\t{\n\t\tif (typeof (distance) === \"undefined\") distance = 1.415;\n\t\t//distance = proximity in units/pixels below which vertices will be stripped.\n\t\t//Default ~= sqrt(2) so when adjacent vertices or semi-adjacent vertices have\n\t\t//both x & y coords within 1 unit, then the second vertex will be stripped.\n\t\tvar cnt = path.length;\n\t\tif (cnt === 0)\n\t\t\treturn new Array();\n\t\tvar outPts = new Array(cnt);\n\t\tfor (var i = 0; i < cnt; ++i)\n\t\t\toutPts[i] = new ClipperLib.OutPt();\n\t\tfor (var i = 0; i < cnt; ++i)\n\t\t{\n\t\t\toutPts[i].Pt = path[i];\n\t\t\toutPts[i].Next = outPts[(i + 1) % cnt];\n\t\t\toutPts[i].Next.Prev = outPts[i];\n\t\t\toutPts[i].Idx = 0;\n\t\t}\n\t\tvar distSqrd = distance * distance;\n\t\tvar op = outPts[0];\n\t\twhile (op.Idx === 0 && op.Next !== op.Prev)\n\t\t{\n\t\t\tif (ClipperLib.Clipper.PointsAreClose(op.Pt, op.Prev.Pt, distSqrd))\n\t\t\t{\n\t\t\t\top = ClipperLib.Clipper.ExcludeOp(op);\n\t\t\t\tcnt--;\n\t\t\t}\n\t\t\telse if (ClipperLib.Clipper.PointsAreClose(op.Prev.Pt, op.Next.Pt, distSqrd))\n\t\t\t{\n\t\t\t\tClipperLib.Clipper.ExcludeOp(op.Next);\n\t\t\t\top = ClipperLib.Clipper.ExcludeOp(op);\n\t\t\t\tcnt -= 2;\n\t\t\t}\n\t\t\telse if (ClipperLib.Clipper.SlopesNearCollinear(op.Prev.Pt, op.Pt, op.Next.Pt, distSqrd))\n\t\t\t{\n\t\t\t\top = ClipperLib.Clipper.ExcludeOp(op);\n\t\t\t\tcnt--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\top.Idx = 1;\n\t\t\t\top = op.Next;\n\t\t\t}\n\t\t}\n\t\tif (cnt < 3)\n\t\t\tcnt = 0;\n\t\tvar result = new Array(cnt);\n\t\tfor (var i = 0; i < cnt; ++i)\n\t\t{\n\t\t\tresult[i] = new ClipperLib.FPoint1(op.Pt);\n\t\t\top = op.Next;\n\t\t}\n\t\toutPts = null;\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.CleanPolygons = function (polys, distance)\n\t{\n\t\tvar result = new Array(polys.length);\n\t\tfor (var i = 0, ilen = polys.length; i < ilen; i++)\n\t\t\tresult[i] = ClipperLib.Clipper.CleanPolygon(polys[i], distance);\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.Minkowski = function (pattern, path, IsSum, IsClosed)\n\t{\n\t\tvar delta = (IsClosed ? 1 : 0);\n\t\tvar polyCnt = pattern.length;\n\t\tvar pathCnt = path.length;\n\t\tvar result = new Array();\n\t\tif (IsSum)\n\t\t\tfor (var i = 0; i < pathCnt; i++)\n\t\t\t{\n\t\t\t\tvar p = new Array(polyCnt);\n\t\t\t\tfor (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n\t\t\t\t\tp[j] = new ClipperLib.FPoint2(path[i].X + ip.X, path[i].Y + ip.Y);\n\t\t\t\tresult.push(p);\n\t\t\t}\n\t\telse\n\t\t\tfor (var i = 0; i < pathCnt; i++)\n\t\t\t{\n\t\t\t\tvar p = new Array(polyCnt);\n\t\t\t\tfor (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n\t\t\t\t\tp[j] = new ClipperLib.FPoint2(path[i].X - ip.X, path[i].Y - ip.Y);\n\t\t\t\tresult.push(p);\n\t\t\t}\n\t\tvar quads = new Array();\n\t\tfor (var i = 0; i < pathCnt - 1 + delta; i++)\n\t\t\tfor (var j = 0; j < polyCnt; j++)\n\t\t\t{\n\t\t\t\tvar quad = new Array();\n\t\t\t\tquad.push(result[i % pathCnt][j % polyCnt]);\n\t\t\t\tquad.push(result[(i + 1) % pathCnt][j % polyCnt]);\n\t\t\t\tquad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);\n\t\t\t\tquad.push(result[i % pathCnt][(j + 1) % polyCnt]);\n\t\t\t\tif (!ClipperLib.Clipper.Orientation(quad))\n\t\t\t\t\tquad.reverse();\n\t\t\t\tquads.push(quad);\n\t\t\t}\n\t\treturn quads;\n\t};\n\n\tClipperLib.Clipper.MinkowskiSum = function (pattern, path_or_paths, pathIsClosed)\n\t{\n\t\tif (!(path_or_paths[0] instanceof Array))\n\t\t{\n\t\t\tvar path = path_or_paths;\n\t\t\tvar paths = ClipperLib.Clipper.Minkowski(pattern, path, true, pathIsClosed);\n\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\treturn paths;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar paths = path_or_paths;\n\t\t\tvar solution = new ClipperLib.Paths();\n\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\tfor (var i = 0; i < paths.length; ++i)\n\t\t\t{\n\t\t\t\tvar tmp = ClipperLib.Clipper.Minkowski(pattern, paths[i], true, pathIsClosed);\n\t\t\t\tc.AddPaths(tmp, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\tif (pathIsClosed)\n\t\t\t\t{\n\t\t\t\t\tvar path = ClipperLib.Clipper.TranslatePath(paths[i], pattern[0]);\n\t\t\t\t\tc.AddPath(path, ClipperLib.PolyType.ptClip, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, solution,\n\t\t\t\tClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\treturn solution;\n\t\t}\n\t}\n\n\tClipperLib.Clipper.TranslatePath = function (path, delta)\n\t{\n\t\tvar outPath = new ClipperLib.Path();\n\t\tfor (var i = 0; i < path.length; i++)\n\t\t\toutPath.push(new ClipperLib.FPoint2(path[i].X + delta.X, path[i].Y + delta.Y));\n\t\treturn outPath;\n\t}\n\n\tClipperLib.Clipper.MinkowskiDiff = function (poly1, poly2)\n\t{\n\t\tvar paths = ClipperLib.Clipper.Minkowski(poly1, poly2, false, true);\n\t\tvar c = new ClipperLib.Clipper();\n\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\treturn paths;\n\t}\n\n\tClipperLib.Clipper.PolyTreeToPaths = function (polytree)\n\t{\n\t\tvar result = new Array();\n\t\t//result.set_Capacity(polytree.get_Total());\n\t\tClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntAny, result);\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.AddPolyNodeToPaths = function (polynode, nt, paths)\n\t{\n\t\tvar match = true;\n\t\tswitch (nt)\n\t\t{\n\t\t\tcase ClipperLib.Clipper.NodeType.ntOpen:\n\t\t\t\treturn;\n\t\t\tcase ClipperLib.Clipper.NodeType.ntClosed:\n\t\t\t\tmatch = !polynode.IsOpen;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tif (polynode.m_polygon.length > 0 && match)\n\t\t\tpaths.push(polynode.m_polygon);\n\t\tfor (var $i3 = 0, $t3 = polynode.Childs(), $l3 = $t3.length, pn = $t3[$i3]; $i3 < $l3; $i3++, pn = $t3[$i3])\n\t\t\tClipperLib.Clipper.AddPolyNodeToPaths(pn, nt, paths);\n\t};\n\n\tClipperLib.Clipper.OpenPathsFromPolyTree = function (polytree)\n\t{\n\t\tvar result = new ClipperLib.Paths();\n\t\t//result.set_Capacity(polytree.ChildCount());\n\t\tfor (var i = 0, ilen = polytree.ChildCount(); i < ilen; i++)\n\t\t\tif (polytree.Childs()[i].IsOpen)\n\t\t\t\tresult.push(polytree.Childs()[i].m_polygon);\n\t\treturn result;\n\t};\n\n\tClipperLib.Clipper.ClosedPathsFromPolyTree = function (polytree)\n\t{\n\t\tvar result = new ClipperLib.Paths();\n\t\t//result.set_Capacity(polytree.Total());\n\t\tClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntClosed, result);\n\t\treturn result;\n\t};\n\n\tInherit(ClipperLib.Clipper, ClipperLib.ClipperBase);\n\tClipperLib.Clipper.NodeType = {\n\t\tntAny: 0,\n\t\tntOpen: 1,\n\t\tntClosed: 2\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.ClipperOffset = function (miterLimit, arcTolerance)\n\t{\n\t\tif (typeof (miterLimit) === \"undefined\") miterLimit = 2;\n\t\tif (typeof (arcTolerance) === \"undefined\") arcTolerance = ClipperLib.ClipperOffset.def_arc_tolerance;\n\t\tthis.m_destPolys = new ClipperLib.Paths();\n\t\tthis.m_srcPoly = new ClipperLib.Path();\n\t\tthis.m_destPoly = new ClipperLib.Path();\n\t\tthis.m_normals = new Array();\n\t\tthis.m_delta = 0;\n\t\tthis.m_sinA = 0;\n\t\tthis.m_sin = 0;\n\t\tthis.m_cos = 0;\n\t\tthis.m_miterLim = 0;\n\t\tthis.m_StepsPerRad = 0;\n\t\tthis.m_lowest = new ClipperLib.FPoint0();\n\t\tthis.m_polyNodes = new ClipperLib.PolyNode();\n\t\tthis.MiterLimit = miterLimit;\n\t\tthis.ArcTolerance = arcTolerance;\n\t\tthis.m_lowest.X = -1;\n\t};\n\n\tClipperLib.ClipperOffset.two_pi = 6.28318530717959;\n\tClipperLib.ClipperOffset.def_arc_tolerance = 0.25;\n\tClipperLib.ClipperOffset.prototype.Clear = function ()\n\t{\n\t\tClipperLib.Clear(this.m_polyNodes.Childs());\n\t\tthis.m_lowest.X = -1;\n\t};\n\n\tClipperLib.ClipperOffset.prototype.AddPath = function (path, joinType, endType)\n\t{\n\t\tvar highI = path.length - 1;\n\t\tif (highI < 0)\n\t\t\treturn;\n\t\tvar newNode = new ClipperLib.PolyNode();\n\t\tnewNode.m_jointype = joinType;\n\t\tnewNode.m_endtype = endType;\n\t\t//strip duplicate points from path and also get index to the lowest point ...\n\t\tif (endType === ClipperLib.EndType.etClosedLine || endType === ClipperLib.EndType.etClosedPolygon)\n\t\t\twhile (highI > 0 && ClipperLib.FPoint.op_Equality(path[0], path[highI]))\n\t\t\t\thighI--;\n\t\t//newNode.m_polygon.set_Capacity(highI + 1);\n\t\tnewNode.m_polygon.push(path[0]);\n\t\tvar j = 0,\n\t\t\tk = 0;\n\t\tfor (var i = 1; i <= highI; i++)\n\t\t\tif (ClipperLib.FPoint.op_Inequality(newNode.m_polygon[j], path[i]))\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t\tnewNode.m_polygon.push(path[i]);\n\t\t\t\tif (path[i].Y > newNode.m_polygon[k].Y || (path[i].Y === newNode.m_polygon[k].Y && path[i].X < newNode.m_polygon[k].X))\n\t\t\t\t\tk = j;\n\t\t\t}\n\t\tif (endType === ClipperLib.EndType.etClosedPolygon && j < 2) return;\n\n\t\tthis.m_polyNodes.AddChild(newNode);\n\t\t//if this path's lowest pt is lower than all the others then update m_lowest\n\t\tif (endType !== ClipperLib.EndType.etClosedPolygon)\n\t\t\treturn;\n\t\tif (this.m_lowest.X < 0)\n\t\t\tthis.m_lowest = new ClipperLib.FPoint2(this.m_polyNodes.ChildCount() - 1, k);\n\t\telse\n\t\t{\n\t\t\tvar ip = this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];\n\t\t\tif (newNode.m_polygon[k].Y > ip.Y || (newNode.m_polygon[k].Y === ip.Y && newNode.m_polygon[k].X < ip.X))\n\t\t\t\tthis.m_lowest = new ClipperLib.FPoint2(this.m_polyNodes.ChildCount() - 1, k);\n\t\t}\n\t};\n\n\tClipperLib.ClipperOffset.prototype.AddPaths = function (paths, joinType, endType)\n\t{\n\t\tfor (var i = 0, ilen = paths.length; i < ilen; i++)\n\t\t\tthis.AddPath(paths[i], joinType, endType);\n\t};\n\n\tClipperLib.ClipperOffset.prototype.FixOrientations = function ()\n\t{\n\t\t//fixup orientations of all closed paths if the orientation of the\n\t\t//closed path with the lowermost vertex is wrong ...\n\t\tif (this.m_lowest.X >= 0 && !ClipperLib.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))\n\t\t{\n\t\t\tfor (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t\t\t{\n\t\t\t\tvar node = this.m_polyNodes.Childs()[i];\n\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etClosedPolygon || (node.m_endtype === ClipperLib.EndType.etClosedLine && ClipperLib.Clipper.Orientation(node.m_polygon)))\n\t\t\t\t\tnode.m_polygon.reverse();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t\t\t{\n\t\t\t\tvar node = this.m_polyNodes.Childs()[i];\n\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etClosedLine && !ClipperLib.Clipper.Orientation(node.m_polygon))\n\t\t\t\t\tnode.m_polygon.reverse();\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.ClipperOffset.GetUnitNormal = function (pt1, pt2)\n\t{\n\t\tvar dx = (pt2.X - pt1.X);\n\t\tvar dy = (pt2.Y - pt1.Y);\n\t\tif ((dx === 0) && (dy === 0))\n\t\t\treturn new ClipperLib.FPoint2(0, 0);\n\t\tvar f = 1 / Math.sqrt(dx * dx + dy * dy);\n\t\tdx *= f;\n\t\tdy *= f;\n\t\treturn new ClipperLib.FPoint2(dy, -dx);\n\t};\n\n\tClipperLib.ClipperOffset.prototype.DoOffset = function (delta)\n\t{\n\t\tthis.m_destPolys = new Array();\n\t\tthis.m_delta = delta;\n\t\t//if Zero offset, just copy any CLOSED polygons to m_p and return ...\n\t\tif (ClipperLib.ClipperBase.near_zero(delta))\n\t\t{\n\t\t\t//this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount);\n\t\t\tfor (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t\t\t{\n\t\t\t\tvar node = this.m_polyNodes.Childs()[i];\n\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n\t\t\t\t\tthis.m_destPolys.push(node.m_polygon);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t//see offset_triginometry3.svg in the documentation folder ...\n\t\tif (this.MiterLimit > 2)\n\t\t\tthis.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);\n\t\telse\n\t\t\tthis.m_miterLim = 0.5;\n\t\tvar y;\n\t\tif (this.ArcTolerance <= 0)\n\t\t\ty = ClipperLib.ClipperOffset.def_arc_tolerance;\n\t\telse if (this.ArcTolerance > Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance)\n\t\t\ty = Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance;\n\t\telse\n\t\t\ty = this.ArcTolerance;\n\t\t//see offset_triginometry2.svg in the documentation folder ...\n\t\tvar steps = 3.14159265358979 / Math.acos(1 - y / Math.abs(delta));\n\t\tthis.m_sin = Math.sin(ClipperLib.ClipperOffset.two_pi / steps);\n\t\tthis.m_cos = Math.cos(ClipperLib.ClipperOffset.two_pi / steps);\n\t\tthis.m_StepsPerRad = steps / ClipperLib.ClipperOffset.two_pi;\n\t\tif (delta < 0)\n\t\t\tthis.m_sin = -this.m_sin;\n\t\t//this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount * 2);\n\t\tfor (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t\t{\n\t\t\tvar node = this.m_polyNodes.Childs()[i];\n\t\t\tthis.m_srcPoly = node.m_polygon;\n\t\t\tvar len = this.m_srcPoly.length;\n\t\t\tif (len === 0 || (delta <= 0 && (len < 3 || node.m_endtype !== ClipperLib.EndType.etClosedPolygon)))\n\t\t\t\tcontinue;\n\t\t\tthis.m_destPoly = new Array();\n\t\t\tif (len === 1)\n\t\t\t{\n\t\t\t\tif (node.m_jointype === ClipperLib.JoinType.jtRound)\n\t\t\t\t{\n\t\t\t\t\tvar X = 1,\n\t\t\t\t\t\tY = 0;\n\t\t\t\t\tfor (var j = 1; j <= steps; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[0].X + X * delta, this.m_srcPoly[0].Y + Y * delta));\n\t\t\t\t\t\tvar X2 = X;\n\t\t\t\t\t\tX = X * this.m_cos - this.m_sin * Y;\n\t\t\t\t\t\tY = X2 * this.m_sin + Y * this.m_cos;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar X = -1,\n\t\t\t\t\t\tY = -1;\n\t\t\t\t\tfor (var j = 0; j < 4; ++j)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[0].X + X * delta, this.m_srcPoly[0].Y + Y * delta));\n\t\t\t\t\t\tif (X < 0)\n\t\t\t\t\t\t\tX = 1;\n\t\t\t\t\t\telse if (Y < 0)\n\t\t\t\t\t\t\tY = 1;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tX = -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.m_destPolys.push(this.m_destPoly);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//build m_normals ...\n\t\t\tthis.m_normals.length = 0;\n\t\t\t//this.m_normals.set_Capacity(len);\n\t\t\tfor (var j = 0; j < len - 1; j++)\n\t\t\t\tthis.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[j], this.m_srcPoly[j + 1]));\n\t\t\tif (node.m_endtype === ClipperLib.EndType.etClosedLine || node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n\t\t\t\tthis.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[len - 1], this.m_srcPoly[0]));\n\t\t\telse\n\t\t\t\tthis.m_normals.push(new ClipperLib.FPoint1(this.m_normals[len - 2]));\n\t\t\tif (node.m_endtype === ClipperLib.EndType.etClosedPolygon)\n\t\t\t{\n\t\t\t\tvar k = len - 1;\n\t\t\t\tfor (var j = 0; j < len; j++)\n\t\t\t\t\tk = this.OffsetPoint(j, k, node.m_jointype);\n\t\t\t\tthis.m_destPolys.push(this.m_destPoly);\n\t\t\t}\n\t\t\telse if (node.m_endtype === ClipperLib.EndType.etClosedLine)\n\t\t\t{\n\t\t\t\tvar k = len - 1;\n\t\t\t\tfor (var j = 0; j < len; j++)\n\t\t\t\t\tk = this.OffsetPoint(j, k, node.m_jointype);\n\t\t\t\tthis.m_destPolys.push(this.m_destPoly);\n\t\t\t\tthis.m_destPoly = new Array();\n\t\t\t\t//re-build m_normals ...\n\t\t\t\tvar n = this.m_normals[len - 1];\n\t\t\t\tfor (var j = len - 1; j > 0; j--)\n\t\t\t\t\tthis.m_normals[j] = new ClipperLib.FPoint2(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n\t\t\t\tthis.m_normals[0] = new ClipperLib.FPoint2(-n.X, -n.Y);\n\t\t\t\tk = 0;\n\t\t\t\tfor (var j = len - 1; j >= 0; j--)\n\t\t\t\t\tk = this.OffsetPoint(j, k, node.m_jointype);\n\t\t\t\tthis.m_destPolys.push(this.m_destPoly);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar k = 0;\n\t\t\t\tfor (var j = 1; j < len - 1; ++j)\n\t\t\t\t\tk = this.OffsetPoint(j, k, node.m_jointype);\n\t\t\t\tvar pt1;\n\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etOpenButt)\n\t\t\t\t{\n\t\t\t\t\tvar j = len - 1;\n\t\t\t\t\tpt1 = new ClipperLib.FPoint2(this.m_srcPoly[j].X + this.m_normals[j].X * delta, this.m_srcPoly[j].Y + this.m_normals[j].Y * delta);\n\t\t\t\t\tthis.m_destPoly.push(pt1);\n\t\t\t\t\tpt1 = new ClipperLib.FPoint2(this.m_srcPoly[j].X - this.m_normals[j].X * delta, this.m_srcPoly[j].Y - this.m_normals[j].Y * delta);\n\t\t\t\t\tthis.m_destPoly.push(pt1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar j = len - 1;\n\t\t\t\t\tk = len - 2;\n\t\t\t\t\tthis.m_sinA = 0;\n\t\t\t\t\tthis.m_normals[j] = new ClipperLib.FPoint2(-this.m_normals[j].X, -this.m_normals[j].Y);\n\t\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etOpenSquare)\n\t\t\t\t\t\tthis.DoSquare(j, k);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.DoRound(j, k);\n\t\t\t\t}\n\t\t\t\t//re-build m_normals ...\n\t\t\t\tfor (var j = len - 1; j > 0; j--)\n\t\t\t\t\tthis.m_normals[j] = new ClipperLib.FPoint2(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n\t\t\t\tthis.m_normals[0] = new ClipperLib.FPoint2(-this.m_normals[1].X, -this.m_normals[1].Y);\n\t\t\t\tk = len - 1;\n\t\t\t\tfor (var j = k - 1; j > 0; --j)\n\t\t\t\t\tk = this.OffsetPoint(j, k, node.m_jointype);\n\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etOpenButt)\n\t\t\t\t{\n\t\t\t\t\tpt1 = new ClipperLib.FPoint2(this.m_srcPoly[0].X - this.m_normals[0].X * delta, this.m_srcPoly[0].Y - this.m_normals[0].Y * delta);\n\t\t\t\t\tthis.m_destPoly.push(pt1);\n\t\t\t\t\tpt1 = new ClipperLib.FPoint2(this.m_srcPoly[0].X + this.m_normals[0].X * delta, this.m_srcPoly[0].Y + this.m_normals[0].Y * delta);\n\t\t\t\t\tthis.m_destPoly.push(pt1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tk = 1;\n\t\t\t\t\tthis.m_sinA = 0;\n\t\t\t\t\tif (node.m_endtype === ClipperLib.EndType.etOpenSquare)\n\t\t\t\t\t\tthis.DoSquare(0, 1);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.DoRound(0, 1);\n\t\t\t\t}\n\t\t\t\tthis.m_destPolys.push(this.m_destPoly);\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.ClipperOffset.prototype.Execute = function ()\n\t{\n\t\tvar a = arguments,\n\t\t\tispolytree = a[0] instanceof ClipperLib.PolyTree;\n\t\tif (!ispolytree) // function (solution, delta)\n\t\t{\n\t\t\tvar solution = a[0],\n\t\t\t\tdelta = a[1];\n\t\t\tClipperLib.Clear(solution);\n\t\t\tthis.FixOrientations();\n\t\t\tthis.DoOffset(delta);\n\t\t\t//now clean up 'corners' ...\n\t\t\tvar clpr = new ClipperLib.Clipper(0);\n\t\t\tclpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n\t\t\tif (delta > 0)\n\t\t\t{\n\t\t\t\tclpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n\t\t\t\tvar outer = new ClipperLib.Path();\n\t\t\t\touter.push(new ClipperLib.FPoint2(r.left - 10, r.bottom + 10));\n\t\t\t\touter.push(new ClipperLib.FPoint2(r.right + 10, r.bottom + 10));\n\t\t\t\touter.push(new ClipperLib.FPoint2(r.right + 10, r.top - 10));\n\t\t\t\touter.push(new ClipperLib.FPoint2(r.left - 10, r.top - 10));\n\t\t\t\tclpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\tclpr.ReverseSolution = true;\n\t\t\t\tclpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n\t\t\t\tif (solution.length > 0)\n\t\t\t\t\tsolution.splice(0, 1);\n\t\t\t}\n\t\t\t//console.log(JSON.stringify(solution));\n\t\t}\n\t\telse // function (polytree, delta)\n\t\t{\n\t\t\tvar solution = a[0],\n\t\t\t\tdelta = a[1];\n\t\t\tsolution.Clear();\n\t\t\tthis.FixOrientations();\n\t\t\tthis.DoOffset(delta);\n\t\t\t//now clean up 'corners' ...\n\t\t\tvar clpr = new ClipperLib.Clipper(0);\n\t\t\tclpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n\t\t\tif (delta > 0)\n\t\t\t{\n\t\t\t\tclpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n\t\t\t\tvar outer = new ClipperLib.Path();\n\t\t\t\touter.push(new ClipperLib.FPoint2(r.left - 10, r.bottom + 10));\n\t\t\t\touter.push(new ClipperLib.FPoint2(r.right + 10, r.bottom + 10));\n\t\t\t\touter.push(new ClipperLib.FPoint2(r.right + 10, r.top - 10));\n\t\t\t\touter.push(new ClipperLib.FPoint2(r.left - 10, r.top - 10));\n\t\t\t\tclpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\tclpr.ReverseSolution = true;\n\t\t\t\tclpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n\t\t\t\t//remove the outer PolyNode rectangle ...\n\t\t\t\tif (solution.ChildCount() === 1 && solution.Childs()[0].ChildCount() > 0)\n\t\t\t\t{\n\t\t\t\t\tvar outerNode = solution.Childs()[0];\n\t\t\t\t\t//solution.Childs.set_Capacity(outerNode.ChildCount);\n\t\t\t\t\tsolution.Childs()[0] = outerNode.Childs()[0];\n\t\t\t\t\tsolution.Childs()[0].m_Parent = solution;\n\t\t\t\t\tfor (var i = 1; i < outerNode.ChildCount(); i++)\n\t\t\t\t\t\tsolution.AddChild(outerNode.Childs()[i]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tsolution.Clear();\n\t\t\t}\n\t\t}\n\t};\n\n\tClipperLib.ClipperOffset.prototype.OffsetPoint = function (j, k, jointype)\n\t{\n\t\t//cross product ...\n\t\tthis.m_sinA = (this.m_normals[k].X * this.m_normals[j].Y - this.m_normals[j].X * this.m_normals[k].Y);\n\n\t\tif (this.m_sinA === 0)\n\t\t{\n      return k;\n\t\t}\n\n/*\n\t\telse if (this.m_sinA < 0.00005 && this.m_sinA > -0.00005)\n{\n\t\t\tconsole.log(this.m_sinA);\n      return k;\n}\n*/\n/*\n\t\tif (Math.abs(this.m_sinA * this.m_delta) < 1.0)\n\t\t{\n\t\t\t//dot product ...\n\t\t\tvar cosA = (this.m_normals[k].X * this.m_normals[j].X + this.m_normals[j].Y * this.m_normals[k].Y);\n\t\t\tif (cosA > 0) // angle ==> 0 degrees\n\t\t\t{\n\t\t\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta,\n\t\t\t\t\tthis.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta));\n\t\t\t\treturn k;\n\t\t\t}\n\t\t\t//else angle ==> 180 degrees\n\t\t}\n*/\n\t\telse if (this.m_sinA > 1)\n\t\t\tthis.m_sinA = 1.0;\n\t\telse if (this.m_sinA < -1)\n\t\t\tthis.m_sinA = -1.0;\n\t\tif (this.m_sinA * this.m_delta < 0)\n\t\t{\n\t\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta,\n\t\t\t\tthis.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta));\n\t\t\tthis.m_destPoly.push(new ClipperLib.FPoint1(this.m_srcPoly[j]));\n\t\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta,\n\t\t\t\tthis.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta));\n\t\t}\n\t\telse\n\t\t\tswitch (jointype)\n\t\t\t{\n\t\t\tcase ClipperLib.JoinType.jtMiter:\n\t\t\t\t{\n\t\t\t\t\tvar r = 1 + (this.m_normals[j].X * this.m_normals[k].X + this.m_normals[j].Y * this.m_normals[k].Y);\n\t\t\t\t\tif (r >= this.m_miterLim)\n\t\t\t\t\t\tthis.DoMiter(j, k, r);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.DoSquare(j, k);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase ClipperLib.JoinType.jtSquare:\n\t\t\t\tthis.DoSquare(j, k);\n\t\t\t\tbreak;\n\t\t\tcase ClipperLib.JoinType.jtRound:\n\t\t\t\tthis.DoRound(j, k);\n\t\t\t\tbreak;\n\t\t\t}\n\t\tk = j;\n\t\treturn k;\n\t};\n\n\tClipperLib.ClipperOffset.prototype.DoSquare = function (j, k)\n\t{\n\t\tvar dx = Math.tan(Math.atan2(this.m_sinA,\n\t\t\tthis.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y) / 4);\n\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(\n\t\t\tthis.m_srcPoly[j].X + this.m_delta * (this.m_normals[k].X - this.m_normals[k].Y * dx),\n\t\t\tthis.m_srcPoly[j].Y + this.m_delta * (this.m_normals[k].Y + this.m_normals[k].X * dx)));\n\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(\n\t\t\tthis.m_srcPoly[j].X + this.m_delta * (this.m_normals[j].X + this.m_normals[j].Y * dx),\n\t\t\tthis.m_srcPoly[j].Y + this.m_delta * (this.m_normals[j].Y - this.m_normals[j].X * dx)));\n\t};\n\n\tClipperLib.ClipperOffset.prototype.DoMiter = function (j, k, r)\n\t{\n\t\tvar q = this.m_delta / r;\n\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(\n\t\t\tthis.m_srcPoly[j].X + (this.m_normals[k].X + this.m_normals[j].X) * q,\n\t\t\tthis.m_srcPoly[j].Y + (this.m_normals[k].Y + this.m_normals[j].Y) * q));\n\t};\n\n\tClipperLib.ClipperOffset.prototype.DoRound = function (j, k)\n\t{\n\t\tvar a = Math.atan2(this.m_sinA,\n\t\t\tthis.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y);\n\n\t\tvar steps = Math.max(Math.round(this.m_StepsPerRad * Math.abs(a)), 1);\n\n\t\tvar X = this.m_normals[k].X,\n\t\t\tY = this.m_normals[k].Y,\n\t\t\tX2;\n\t\tfor (var i = 0; i < steps; ++i)\n\t\t{\n\t\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(\n\t\t\t\tthis.m_srcPoly[j].X + X * this.m_delta,\n\t\t\t\tthis.m_srcPoly[j].Y + Y * this.m_delta));\n\t\t\tX2 = X;\n\t\t\tX = X * this.m_cos - this.m_sin * Y;\n\t\t\tY = X2 * this.m_sin + Y * this.m_cos;\n\t\t}\n\t\tthis.m_destPoly.push(new ClipperLib.FPoint2(\n\t\t\tthis.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta,\n\t\t\tthis.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta));\n\t};\n\n\tClipperLib.Error = function (message)\n\t{\n\t\ttry\n\t\t{\n\t\t\tthrow new Error(message);\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\talert(err.message);\n\t\t}\n\t};\n\n\t// ---------------------------------------------\n\n\t// JS extension by Timo 2013\n\tClipperLib.JS = {};\n\n\tClipperLib.JS.AreaOfPolygon = function (poly)\n\t{\n\t\treturn ClipperLib.Clipper.Area(poly);\n\t};\n\n\tClipperLib.JS.AreaOfPolygons = function (poly)\n\t{\n\t\tvar area = 0;\n\t\tfor (var i = 0; i < poly.length; i++)\n\t\t{\n\t\t\tarea += ClipperLib.Clipper.Area(poly[i]);\n\t\t}\n\t\treturn area;\n\t};\n\n\tClipperLib.JS.BoundsOfPath = function (path)\n\t{\n\t\treturn ClipperLib.JS.BoundsOfPaths([path]);\n\t};\n\n\tClipperLib.JS.BoundsOfPaths = function (paths)\n\t{\n\t\tvar bounds = ClipperLib.Clipper.GetBounds(paths);\n\t\treturn bounds;\n\t};\n\n\t// Clean() joins vertices that are too near each other\n\t// and causes distortion to offsetted polygons without cleaning\n\tClipperLib.JS.Clean = function (polygon, delta)\n\t{\n\t\tif (!(polygon instanceof Array)) return [];\n\t\tvar isPolygons = polygon[0] instanceof Array;\n\t\tvar polygon = ClipperLib.JS.Clone(polygon);\n\t\tif (typeof delta !== \"number\" || delta === null)\n\t\t{\n\t\t\tClipperLib.Error(\"Delta is not a number in Clean().\");\n\t\t\treturn polygon;\n\t\t}\n\t\tif (polygon.length === 0 || (polygon.length === 1 && polygon[0].length === 0) || delta < 0) return polygon;\n\t\tif (!isPolygons) polygon = [polygon];\n\t\tvar k_length = polygon.length;\n\t\tvar len, poly, result, d, p, j, i;\n\t\tvar results = [];\n\t\tfor (var k = 0; k < k_length; k++)\n\t\t{\n\t\t\tpoly = polygon[k];\n\t\t\tlen = poly.length;\n\t\t\tif (len === 0) continue;\n\t\t\telse if (len < 3)\n\t\t\t{\n\t\t\t\tresult = poly;\n\t\t\t\tresults.push(result);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult = poly;\n\t\t\td = delta * delta;\n\t\t\t//d = Math.floor(c_delta * c_delta);\n\t\t\tp = poly[0];\n\t\t\tj = 1;\n\t\t\tfor (i = 1; i < len; i++)\n\t\t\t{\n\t\t\t\tif ((poly[i].X - p.X) * (poly[i].X - p.X) +\n\t\t\t\t\t(poly[i].Y - p.Y) * (poly[i].Y - p.Y) <= d)\n\t\t\t\t\tcontinue;\n\t\t\t\tresult[j] = poly[i];\n\t\t\t\tp = poly[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tp = poly[j - 1];\n\t\t\tif ((poly[0].X - p.X) * (poly[0].X - p.X) +\n\t\t\t\t(poly[0].Y - p.Y) * (poly[0].Y - p.Y) <= d)\n\t\t\t\tj--;\n\t\t\tif (j < len)\n\t\t\t\tresult.splice(j, len - j);\n\t\t\tif (result.length) results.push(result);\n\t\t}\n\t\tif (!isPolygons && results.length) results = results[0];\n\t\telse if (!isPolygons && results.length === 0) results = [];\n\t\telse if (isPolygons && results.length === 0) results = [\n\t\t\t[]\n\t\t];\n\t\treturn results;\n\t}\n\t// Make deep copy of Polygons or Polygon\n\t// so that also FPoint objects are cloned and not only referenced\n\t// This should be the fastest way\n\tClipperLib.JS.Clone = function (polygon)\n\t{\n\t\tif (!(polygon instanceof Array)) return [];\n\t\tif (polygon.length === 0) return [];\n\t\telse if (polygon.length === 1 && polygon[0].length === 0) return [\n\t\t\t[]\n\t\t];\n\t\tvar isPolygons = polygon[0] instanceof Array;\n\t\tif (!isPolygons) polygon = [polygon];\n\t\tvar len = polygon.length,\n\t\t\tplen, i, j, result;\n\t\tvar results = new Array(len);\n\t\tfor (i = 0; i < len; i++)\n\t\t{\n\t\t\tplen = polygon[i].length;\n\t\t\tresult = new Array(plen);\n\t\t\tfor (j = 0; j < plen; j++)\n\t\t\t{\n\t\t\t\tresult[j] = {\n\t\t\t\t\tX: polygon[i][j].X,\n\t\t\t\t\tY: polygon[i][j].Y\n\t\t\t\t};\n\n\t\t\t}\n\t\t\tresults[i] = result;\n\t\t}\n\t\tif (!isPolygons) results = results[0];\n\t\treturn results;\n\t};\n\n\t// Removes points that doesn't affect much to the visual appearance.\n\t// If middle point is at or under certain distance (tolerance) of the line segment between\n\t// start and end point, the middle point is removed.\n\tClipperLib.JS.Lighten = function (polygon, tolerance)\n\t{\n\t\tif (!(polygon instanceof Array)) return [];\n\t\tif (typeof tolerance !== \"number\" || tolerance === null)\n\t\t{\n\t\t\tClipperLib.Error(\"Tolerance is not a number in Lighten().\")\n\t\t\treturn ClipperLib.JS.Clone(polygon);\n\t\t}\n\t\tif (polygon.length === 0 || (polygon.length === 1 && polygon[0].length === 0) || tolerance < 0)\n\t\t{\n\t\t\treturn ClipperLib.JS.Clone(polygon);\n\t\t}\n\t\tvar isPolygons = polygon[0] instanceof Array;\n\t\tif (!isPolygons) polygon = [polygon];\n\t\tvar i, j, poly, k, poly2, plen, A, B, P, d, rem, addlast;\n\t\tvar bxax, byay, l, ax, ay;\n\t\tvar len = polygon.length;\n\t\tvar toleranceSq = tolerance * tolerance;\n\t\tvar results = [];\n\t\tfor (i = 0; i < len; i++)\n\t\t{\n\t\t\tpoly = polygon[i];\n\t\t\tplen = poly.length;\n\t\t\tif (plen === 0) continue;\n\t\t\tfor (k = 0; k < 1000000; k++) // could be forever loop, but wiser to restrict max repeat count\n\t\t\t{\n\t\t\t\tpoly2 = [];\n\t\t\t\tplen = poly.length;\n\t\t\t\t// the first have to added to the end, if first and last are not the same\n\t\t\t\t// this way we ensure that also the actual last point can be removed if needed\n\t\t\t\tif (poly[plen - 1].X !== poly[0].X || poly[plen - 1].Y !== poly[0].Y)\n\t\t\t\t{\n\t\t\t\t\taddlast = 1;\n\t\t\t\t\tpoly.push(\n\t\t\t\t\t{\n\t\t\t\t\t\tX: poly[0].X,\n\t\t\t\t\t\tY: poly[0].Y\n\t\t\t\t\t});\n\t\t\t\t\tplen = poly.length;\n\t\t\t\t}\n\t\t\t\telse addlast = 0;\n\t\t\t\trem = []; // Indexes of removed points\n\t\t\t\tfor (j = 0; j < plen - 2; j++)\n\t\t\t\t{\n\t\t\t\t\tA = poly[j]; // Start point of line segment\n\t\t\t\t\tP = poly[j + 1]; // Middle point. This is the one to be removed.\n\t\t\t\t\tB = poly[j + 2]; // End point of line segment\n\t\t\t\t\tax = A.X;\n\t\t\t\t\tay = A.Y;\n\t\t\t\t\tbxax = B.X - ax;\n\t\t\t\t\tbyay = B.Y - ay;\n\t\t\t\t\tif (bxax !== 0 || byay !== 0) // To avoid Nan, when A==P && P==B. And to avoid peaks (A==B && A!=P), which have lenght, but not area.\n\t\t\t\t\t{\n\t\t\t\t\t\tl = ((P.X - ax) * bxax + (P.Y - ay) * byay) / (bxax * bxax + byay * byay);\n\t\t\t\t\t\tif (l > 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tax = B.X;\n\t\t\t\t\t\t\tay = B.Y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (l > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tax += bxax * l;\n\t\t\t\t\t\t\tay += byay * l;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbxax = P.X - ax;\n\t\t\t\t\tbyay = P.Y - ay;\n\t\t\t\t\td = bxax * bxax + byay * byay;\n\t\t\t\t\tif (d <= toleranceSq)\n\t\t\t\t\t{\n\t\t\t\t\t\trem[j + 1] = 1;\n\t\t\t\t\t\tj++; // when removed, transfer the pointer to the next one\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// add all unremoved points to poly2\n\t\t\t\tpoly2.push(\n\t\t\t\t{\n\t\t\t\t\tX: poly[0].X,\n\t\t\t\t\tY: poly[0].Y\n\t\t\t\t});\n\t\t\t\tfor (j = 1; j < plen - 1; j++)\n\t\t\t\t\tif (!rem[j]) poly2.push(\n\t\t\t\t\t{\n\t\t\t\t\t\tX: poly[j].X,\n\t\t\t\t\t\tY: poly[j].Y\n\t\t\t\t\t});\n\t\t\t\tpoly2.push(\n\t\t\t\t{\n\t\t\t\t\tX: poly[plen - 1].X,\n\t\t\t\t\tY: poly[plen - 1].Y\n\t\t\t\t});\n\t\t\t\t// if the first point was added to the end, remove it\n\t\t\t\tif (addlast) poly.pop();\n\t\t\t\t// break, if there was not anymore removed points\n\t\t\t\tif (!rem.length) break;\n\t\t\t\t// else continue looping using poly2, to check if there are points to remove\n\t\t\t\telse poly = poly2;\n\t\t\t}\n\t\t\tplen = poly2.length;\n\t\t\t// remove duplicate from end, if needed\n\t\t\tif (poly2[plen - 1].X === poly2[0].X && poly2[plen - 1].Y === poly2[0].Y)\n\t\t\t{\n\t\t\t\tpoly2.pop();\n\t\t\t}\n\t\t\tif (poly2.length > 2) // to avoid two-point-polygons\n\t\t\t\tresults.push(poly2);\n\t\t}\n\t\tif (!isPolygons)\n\t\t{\n\t\t\tresults = results[0];\n\t\t}\n\t\tif (typeof (results) === \"undefined\")\n\t\t{\n\t\t\tresults = [];\n\t\t}\n\t\treturn results;\n\t}\n\n\tClipperLib.JS.PerimeterOfPath = function (path, closed)\n\t{\n\t\tif (typeof (path) === \"undefined\") return 0;\n\t\tvar sqrt = Math.sqrt;\n\t\tvar perimeter = 0.0;\n\t\tvar p1, p2, p1x = 0.0,\n\t\t\tp1y = 0.0,\n\t\t\tp2x = 0.0,\n\t\t\tp2y = 0.0;\n\t\tvar j = path.length;\n\t\tif (j < 2) return 0;\n\t\tif (closed)\n\t\t{\n\t\t\tpath[j] = path[0];\n\t\t\tj++;\n\t\t}\n\t\twhile (--j)\n\t\t{\n\t\t\tp1 = path[j];\n\t\t\tp1x = p1.X;\n\t\t\tp1y = p1.Y;\n\t\t\tp2 = path[j - 1];\n\t\t\tp2x = p2.X;\n\t\t\tp2y = p2.Y;\n\t\t\tperimeter += sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));\n\t\t}\n\t\tif (closed) path.pop();\n\t\treturn perimeter;\n\t};\n\n\tClipperLib.JS.PerimeterOfPaths = function (paths, closed)\n\t{\n\t\tvar perimeter = 0;\n\t\tfor (var i = 0; i < paths.length; i++)\n\t\t{\n\t\t\tperimeter += ClipperLib.JS.PerimeterOfPath(paths[i], closed);\n\t\t}\n\t\treturn perimeter;\n\t};\n\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.ExPolygons = function ()\n\t{\n\t\treturn [];\n\t}\n\t/**\n\t* @constructor\n\t*/\n\tClipperLib.ExPolygon = function ()\n\t{\n\t\tthis.outer = null;\n\t\tthis.holes = null;\n\t};\n\n\tClipperLib.JS.AddOuterPolyNodeToExPolygons = function (polynode, expolygons)\n\t{\n\t\tvar ep = new ClipperLib.ExPolygon();\n\t\tep.outer = polynode.Contour();\n\t\tvar childs = polynode.Childs();\n\t\tvar ilen = childs.length;\n\t\tep.holes = new Array(ilen);\n\t\tvar node, n, i, j, childs2, jlen;\n\t\tfor (i = 0; i < ilen; i++)\n\t\t{\n\t\t\tnode = childs[i];\n\t\t\tep.holes[i] = node.Contour();\n\t\t\t//Add outer polygons contained by (nested within) holes ...\n\t\t\tfor (j = 0, childs2 = node.Childs(), jlen = childs2.length; j < jlen; j++)\n\t\t\t{\n\t\t\t\tn = childs2[j];\n\t\t\t\tClipperLib.JS.AddOuterPolyNodeToExPolygons(n, expolygons);\n\t\t\t}\n\t\t}\n\t\texpolygons.push(ep);\n\t};\n\n\tClipperLib.JS.ExPolygonsToPaths = function (expolygons)\n\t{\n\t\tvar a, i, alen, ilen;\n\t\tvar paths = new ClipperLib.Paths();\n\t\tfor (a = 0, alen = expolygons.length; a < alen; a++)\n\t\t{\n\t\t\tpaths.push(expolygons[a].outer);\n\t\t\tfor (i = 0, ilen = expolygons[a].holes.length; i < ilen; i++)\n\t\t\t{\n\t\t\t\tpaths.push(expolygons[a].holes[i]);\n\t\t\t}\n\t\t}\n\t\treturn paths;\n\t}\n\tClipperLib.JS.PolyTreeToExPolygons = function (polytree)\n\t{\n\t\tvar expolygons = new ClipperLib.ExPolygons();\n\t\tvar node, i, childs, ilen;\n\t\tfor (i = 0, childs = polytree.Childs(), ilen = childs.length; i < ilen; i++)\n\t\t{\n\t\t\tnode = childs[i];\n\t\t\tClipperLib.JS.AddOuterPolyNodeToExPolygons(node, expolygons);\n\t\t}\n\t\treturn expolygons;\n\t};\n\n\tmodule.exports = ClipperLib;\n"],"names":["this"],"mappings":"AA0CC,IAAI,aAAa;AACjB,UAAA,CAAW,OAAX,GAAqB;AAGrB,UAAA,CAAW,SAAX,GAAuB;AAGvB,UAAA,CAAW,OAAX,GAAqB;AAGrB,IAAI,UAAU,UAAU,EAAI,EAAA,KAC5B;IACC,IAAI;IACJ,IAAI,OAAQ,MAAA,CAAO,mBAAf,KAAwC,aAC5C;QACC,KAAK,KAAK,GAAA,CAAI;cACb,IAAI,OAAQ,EAAA,CAAG,SAAH,CAAa,EAArB,KAA6B,WAA7B,IAA4C,EAAA,CAAG,SAAH,CAAa,EAAb,KAAoB,MAAA,CAAO,SAAP,CAAiB;cAAI,EAAA,CAAG,SAAH,CAAa,EAAb,GAAkB,GAAA,CAAI,SAAJ,CAAc;QAC1H,KAAK,KAAK;cACT,IAAI,OAAQ,EAAA,CAAG,EAAX,KAAmB;cAAa,EAAA,CAAG,EAAH,GAAQ,GAAA,CAAI;QACjD,EAAA,CAAG,SAAH,GAAe;WAGhB;QACC,IAAI,QAAQ,MAAA,CAAO,mBAAP,CAA2B,GAAA,CAAI;QAC3C,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAA,CAAM,QAAQ,CAAA;cACjC,IAAI,OAAQ,MAAA,CAAO,wBAAP,CAAgC,EAAA,CAAG,WAAW,KAAA,CAAM,GAA5D,KAAqE;cAAa,MAAA,CAAO,cAAP,CAAsB,EAAA,CAAG,WAAW,KAAA,CAAM,IAAI,MAAA,CAAO,wBAAP,CAAgC,GAAA,CAAI,WAAW,KAAA,CAAM;QAC1L,KAAK,KAAK;cACT,IAAI,OAAQ,EAAA,CAAG,EAAX,KAAmB;cAAa,EAAA,CAAG,EAAH,GAAQ,GAAA,CAAI;QACjD,EAAA,CAAG,SAAH,GAAe;;;AAOjB,UAAA,CAAW,IAAX,GAAkB,YAClB;IACC,OAAO;;AAGR,UAAA,CAAW,IAAX,CAAgB,SAAhB,CAA0B,IAA1B,GAAiC,KAAA,CAAM,SAAN,CAAgB;AAKjD,UAAA,CAAW,KAAX,GAAmB,YACnB;IACC,OAAO;;AAGR,UAAA,CAAW,KAAX,CAAiB,SAAjB,CAA2B,IAA3B,GAAkC,KAAA,CAAM,SAAN,CAAgB;AAMlD,UAAA,CAAW,QAAX,GAAsB,YACtB;IACC,IAAA,CAAK,QAAL,GAAgB;IAChB,IAAA,CAAK,SAAL,GAAiB,IAAI,UAAA,CAAW,IAAf;IACjB,IAAA,CAAK,OAAL,GAAe;IACf,IAAA,CAAK,UAAL,GAAkB;IAClB,IAAA,CAAK,SAAL,GAAiB;IACjB,IAAA,CAAK,QAAL,GAAgB;IAChB,IAAA,CAAK,MAAL,GAAc;;AAGf,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,UAA9B,GAA2C,YAC3C;IACC,IAAI,SAAS;IACb,IAAI,OAAO,IAAA,CAAK;IAChB,OAAO,IAAA,KAAS,MAChB;QACC,MAAA,GAAS,CAAC;QACV,IAAA,GAAO,IAAA,CAAK;;IAEb,OAAO;;AAGR,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,UAA9B,GAA2C,YAC3C;IACC,OAAO,IAAA,CAAK,QAAL,CAAc;;AAGtB,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,OAA9B,GAAwC,YACxC;IACC,OAAO,IAAA,CAAK;;AAGb,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,QAA9B,GAAyC,UAAU,OACnD;IACC,IAAI,MAAM,IAAA,CAAK,QAAL,CAAc;IACxB,IAAA,CAAK,QAAL,CAAc,IAAd,CAAmB;IACnB,KAAA,CAAM,QAAN,GAAiB;IACjB,KAAA,CAAM,OAAN,GAAgB;;AAGjB,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,OAA9B,GAAwC,YACxC;IACC,IAAI,IAAA,CAAK,QAAL,CAAc,MAAd,GAAuB;UAC1B,OAAO,IAAA,CAAK,QAAL,CAAc;;UAErB,OAAO,IAAA,CAAK,gBAAL;;AAGT,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,gBAA9B,GAAiD,YACjD;IACC,IAAI,IAAA,CAAK,QAAL,KAAkB;UACrB,OAAO;UACH,IAAI,IAAA,CAAK,OAAL,KAAiB,IAAA,CAAK,QAAL,CAAc,QAAd,CAAuB,MAAvB,GAAgC;UACzD,OAAO,IAAA,CAAK,QAAL,CAAc,gBAAd;;UAEP,OAAO,IAAA,CAAK,QAAL,CAAc,QAAd,CAAuB,IAAA,CAAK,OAAL,GAAe;;AAG/C,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,MAA9B,GAAuC,YACvC;IACC,OAAO,IAAA,CAAK;;AAGb,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,MAA9B,GAAuC,YACvC;IACC,OAAO,IAAA,CAAK;;AAGb,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,MAA9B,GAAuC,YACvC;IACC,OAAO,IAAA,CAAK,UAAL;;AAQR,UAAA,CAAW,QAAX,GAAsB,YACtB;IACC,IAAA,CAAK,UAAL,GAAkB;IAClB,UAAA,CAAW,QAAX,CAAoB,IAApB,CAAyB;;AAG1B,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,KAA9B,GAAsC,YACtC;;;IACC,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,UAAL,CAAgB,OAAQ,CAAA,GAAI,MAAM,CAAA;UACxDA,MAAA,CAAK,UAAL,CAAgB,EAAhB,GAAqB;IACtB,IAAA,CAAK,UAAL,CAAgB,MAAhB,GAAyB;IACzB,IAAA,CAAK,QAAL,CAAc,MAAd,GAAuB;;AAGxB,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,QAA9B,GAAyC,YACzC;IACC,IAAI,IAAA,CAAK,QAAL,CAAc,MAAd,GAAuB;UAC1B,OAAO,IAAA,CAAK,QAAL,CAAc;;UAErB,OAAO;;AAGT,UAAA,CAAW,QAAX,CAAoB,SAApB,CAA8B,KAA9B,GAAsC,YACtC;IACC,IAAI,SAAS,IAAA,CAAK,UAAL,CAAgB;IAE7B,IAAI,MAAA,GAAS,CAAT,IAAc,IAAA,CAAK,QAAL,CAAc,EAAd,KAAqB,IAAA,CAAK,UAAL,CAAgB;UAAI,MAAA;IAC3D,OAAO;;AAGR,OAAA,CAAQ,UAAA,CAAW,UAAU,UAAA,CAAW;AAIxC,UAAA,CAAW,KAAX,GAAmB,UAAU,GAC7B;IACC,CAAA,CAAE,MAAF,GAAW;;AAIZ,UAAA,CAAW,EAAX,GAAgB;AAChB,UAAA,CAAW,GAAX,GAAiB,CAAA,GAAI;AAIrB,UAAA,CAAW,MAAX,GAAoB,YACpB;IACC,IAAI,IAAI,WACP,OAAO,CAAA,CAAE;IACV,IAAA,CAAK,CAAL,GAAS;IACT,IAAA,CAAK,CAAL,GAAS;IACT,IAAI,UAAA,CAAW,SACf;QACC,IAAA,CAAK,CAAL,GAAS;QACT,IAAI,IAAA,KAAS,GACb;YACC,IAAA,CAAK,CAAL,GAAS,CAAA,CAAE;YACX,IAAA,CAAK,CAAL,GAAS,CAAA,CAAE;YACX,IAAA,CAAK,CAAL,GAAS,CAAA,CAAE;eAEP,IAAI,IAAA,KAAS,GAClB;YACC,IAAA,CAAK,CAAL,GAAS,CAAA,CAAE;YACX,IAAA,CAAK,CAAL,GAAS,CAAA,CAAE;YACX,IAAA,CAAK,CAAL,GAAS;eAEL,IAAI,IAAA,KAAS,GAClB;YACC,IAAI,CAAA,CAAE,EAAF,YAAgB,UAAA,CAAW,QAC/B;gBACC,IAAI,KAAK,CAAA,CAAE;gBACX,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;gBACZ,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;gBACZ,IAAA,CAAK,CAAL,GAAS;mBAGV;gBACC,IAAI,KAAK,CAAA,CAAE;gBACX,IAAI,OAAQ,EAAA,CAAG,CAAX,KAAkB;sBAAa,EAAA,CAAG,CAAH,GAAO;gBAC1C,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;gBACZ,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;gBACZ,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;;eAId;YACC,IAAA,CAAK,CAAL,GAAS;YACT,IAAA,CAAK,CAAL,GAAS;YACT,IAAA,CAAK,CAAL,GAAS;;WAIX;QACC,IAAI,IAAA,KAAS,GACb;YACC,IAAA,CAAK,CAAL,GAAS,CAAA,CAAE;YACX,IAAA,CAAK,CAAL,GAAS,CAAA,CAAE;eAEP,IAAI,IAAA,KAAS,GAClB;YACC,IAAI,CAAA,CAAE,EAAF,YAAgB,UAAA,CAAW,QAC/B;gBACC,IAAI,KAAK,CAAA,CAAE;gBACX,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;gBACZ,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;mBAGb;gBACC,IAAI,KAAK,CAAA,CAAE;gBACX,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;gBACZ,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;;eAId;YACC,IAAA,CAAK,CAAL,GAAS;YACT,IAAA,CAAK,CAAL,GAAS;;;;AAKZ,UAAA,CAAW,MAAX,CAAkB,WAAlB,GAAgC,UAAU,CAAG,EAAA,GAC7C;IAEC,OAAO,CAAA,CAAE,CAAF,KAAQ,CAAA,CAAE,CAAV,IAAe,CAAA,CAAE,CAAF,KAAQ,CAAA,CAAE;;AAGjC,UAAA,CAAW,MAAX,CAAkB,aAAlB,GAAkC,UAAU,CAAG,EAAA,GAC/C;IAEC,OAAO,CAAA,CAAE,CAAF,KAAQ,CAAA,CAAE,CAAV,IAAe,CAAA,CAAE,CAAF,KAAQ,CAAA,CAAE;;AAsBjC,UAAA,CAAW,OAAX,GAAqB,YACrB;IACC,IAAA,CAAK,CAAL,GAAS;IACT,IAAA,CAAK,CAAL,GAAS;IACT,IAAI,UAAA,CAAW;UACd,IAAA,CAAK,CAAL,GAAS;;AAGX,UAAA,CAAW,OAAX,CAAmB,SAAnB,GAA+B,UAAA,CAAW,MAAX,CAAkB;AAKjD,UAAA,CAAW,OAAX,GAAqB,UAAU,IAC/B;IACC,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;IACZ,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;IACZ,IAAI,UAAA,CAAW,SACf;QACC,IAAI,OAAO,EAAA,CAAG,CAAV,KAAgB;cAAa,IAAA,CAAK,CAAL,GAAS;;cACrC,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;;;AAInB,UAAA,CAAW,OAAX,CAAmB,SAAnB,GAA+B,UAAA,CAAW,MAAX,CAAkB;AAKjD,UAAA,CAAW,SAAX,GAAuB,UAAU,IACjC;IACC,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;IACZ,IAAA,CAAK,CAAL,GAAS,EAAA,CAAG;IACZ,IAAI,UAAA,CAAW;UACd,IAAA,CAAK,CAAL,GAAS;;AAGX,UAAA,CAAW,SAAX,CAAqB,SAArB,GAAiC,UAAA,CAAW,MAAX,CAAkB;AAKnD,UAAA,CAAW,OAAX,GAAqB,UAAU,CAAG,EAAA,CAAG,EAAA,GACrC;IACC,IAAA,CAAK,CAAL,GAAS;IACT,IAAA,CAAK,CAAL,GAAS;IACT,IAAI,UAAA,CAAW,SACf;QACC,IAAI,OAAO,CAAP,KAAa;cAAa,IAAA,CAAK,CAAL,GAAS;;cAClC,IAAA,CAAK,CAAL,GAAS;;;AAIhB,UAAA,CAAW,OAAX,CAAmB,SAAnB,GAA+B,UAAA,CAAW,MAAX,CAAkB;AAKjD,UAAA,CAAW,KAAX,GAAmB,YACnB;IACC,IAAI,IAAI,WACP,OAAO,CAAA,CAAE;IACV,IAAI,IAAA,KAAS,GACb;QACC,IAAA,CAAK,IAAL,GAAY,CAAA,CAAE;QACd,IAAA,CAAK,GAAL,GAAW,CAAA,CAAE;QACb,IAAA,CAAK,KAAL,GAAa,CAAA,CAAE;QACf,IAAA,CAAK,MAAL,GAAc,CAAA,CAAE;WAEZ,IAAI,IAAA,KAAS,GAClB;QACC,IAAI,KAAK,CAAA,CAAE;QACX,IAAA,CAAK,IAAL,GAAY,EAAA,CAAG;QACf,IAAA,CAAK,GAAL,GAAW,EAAA,CAAG;QACd,IAAA,CAAK,KAAL,GAAa,EAAA,CAAG;QAChB,IAAA,CAAK,MAAL,GAAc,EAAA,CAAG;WAGlB;QACC,IAAA,CAAK,IAAL,GAAY;QACZ,IAAA,CAAK,GAAL,GAAW;QACX,IAAA,CAAK,KAAL,GAAa;QACb,IAAA,CAAK,MAAL,GAAc;;;AAOhB,UAAA,CAAW,MAAX,GAAoB,YACpB;IACC,IAAA,CAAK,IAAL,GAAY;IACZ,IAAA,CAAK,GAAL,GAAW;IACX,IAAA,CAAK,KAAL,GAAa;IACb,IAAA,CAAK,MAAL,GAAc;;AAGf,UAAA,CAAW,MAAX,CAAkB,SAAlB,GAA8B,UAAA,CAAW,KAAX,CAAiB;AAK/C,UAAA,CAAW,MAAX,GAAoB,UAAU,IAC9B;IACC,IAAA,CAAK,IAAL,GAAY,EAAA,CAAG;IACf,IAAA,CAAK,GAAL,GAAW,EAAA,CAAG;IACd,IAAA,CAAK,KAAL,GAAa,EAAA,CAAG;IAChB,IAAA,CAAK,MAAL,GAAc,EAAA,CAAG;;AAGlB,UAAA,CAAW,MAAX,CAAkB,SAAlB,GAA8B,UAAA,CAAW,KAAX,CAAiB;AAK/C,UAAA,CAAW,MAAX,GAAoB,UAAU,CAAG,EAAA,CAAG,EAAA,CAAG,EAAA,GACvC;IACC,IAAA,CAAK,IAAL,GAAY;IACZ,IAAA,CAAK,GAAL,GAAW;IACX,IAAA,CAAK,KAAL,GAAa;IACb,IAAA,CAAK,MAAL,GAAc;;AAGf,UAAA,CAAW,MAAX,CAAkB,SAAlB,GAA8B,UAAA,CAAW,KAAX,CAAiB;AAE/C,UAAA,CAAW,QAAX,GAAsB;IACrB,gBAAgB,CADK;IAErB,SAAS,CAFY;IAGrB,cAAc,CAHO;IAIrB,OAAO;;AAGR,UAAA,CAAW,QAAX,GAAsB;IACrB,WAAW,CADU;IAErB,QAAQ;;AAGT,UAAA,CAAW,YAAX,GAA0B;IACzB,YAAY,CADa;IAEzB,YAAY,CAFa;IAGzB,aAAa,CAHY;IAIzB,aAAa;;AAGd,UAAA,CAAW,QAAX,GAAsB;IACrB,UAAU,CADW;IAErB,SAAS,CAFY;IAGrB,SAAS;;AAGV,UAAA,CAAW,OAAX,GAAqB;IACpB,cAAc,CADM;IAEpB,aAAa,CAFO;IAGpB,YAAY,CAHQ;IAIpB,cAAc,CAJM;IAKpB,iBAAiB;;AAGlB,UAAA,CAAW,QAAX,GAAsB;IACrB,QAAQ,CADa;IAErB,SAAS;;AAGV,UAAA,CAAW,SAAX,GAAuB;IACtB,cAAc,CADQ;IAEtB,cAAc;;AAMf,UAAA,CAAW,KAAX,GAAmB,YACnB;IACC,IAAA,CAAK,GAAL,GAAW,IAAI,UAAA,CAAW,OAAf;IACX,IAAA,CAAK,IAAL,GAAY,IAAI,UAAA,CAAW,OAAf;IACZ,IAAA,CAAK,GAAL,GAAW,IAAI,UAAA,CAAW,OAAf;IACX,IAAA,CAAK,KAAL,GAAa,IAAI,UAAA,CAAW,OAAf;IACb,IAAA,CAAK,EAAL,GAAU;IACV,IAAA,CAAK,OAAL,GAAe,UAAA,CAAW,QAAX,CAAoB;IACnC,IAAA,CAAK,IAAL,GAAY,UAAA,CAAW,QAAX,CAAoB;IAChC,IAAA,CAAK,SAAL,GAAiB;IACjB,IAAA,CAAK,OAAL,GAAe;IACf,IAAA,CAAK,QAAL,GAAgB;IAChB,IAAA,CAAK,MAAL,GAAc;IACd,IAAA,CAAK,IAAL,GAAY;IACZ,IAAA,CAAK,IAAL,GAAY;IACZ,IAAA,CAAK,SAAL,GAAiB;IACjB,IAAA,CAAK,SAAL,GAAiB;IACjB,IAAA,CAAK,SAAL,GAAiB;IACjB,IAAA,CAAK,SAAL,GAAiB;IACjB,IAAA,CAAK,SAAL,GAAiB;;AAMlB,UAAA,CAAW,aAAX,GAA2B,YAC3B;IACC,IAAA,CAAK,KAAL,GAAa;IACb,IAAA,CAAK,KAAL,GAAa;IACb,IAAA,CAAK,EAAL,GAAU,IAAI,UAAA,CAAW,OAAf;;AAGX,UAAA,CAAW,mBAAX,GAAiC,YAAY;AAE7C,UAAA,CAAW,mBAAX,CAA+B,OAA/B,GAAyC,UAAU,KAAO,EAAA,OAC1D;IACC,IAAI,IAAI,KAAA,CAAM,EAAN,CAAS,CAAT,GAAa,KAAA,CAAM,EAAN,CAAS;IAC9B,IAAI,CAAA,GAAI;UAAG,OAAO;UACb,IAAI,CAAA,GAAI;UAAG,OAAO,CAAC;;UACnB,OAAO;;AAMb,UAAA,CAAW,WAAX,GAAyB,YACzB;IACC,IAAA,CAAK,CAAL,GAAS;IACT,IAAA,CAAK,SAAL,GAAiB;IACjB,IAAA,CAAK,UAAL,GAAkB;IAClB,IAAA,CAAK,IAAL,GAAY;;AAMb,UAAA,CAAW,QAAX,GAAsB,YACtB;IACC,IAAA,CAAK,CAAL,GAAS;IACT,IAAA,CAAK,IAAL,GAAY;;AAMb,UAAA,CAAW,MAAX,GAAoB,YACpB;IACC,IAAA,CAAK,CAAL,GAAS;IACT,IAAA,CAAK,IAAL,GAAY;IACZ,IAAA,CAAK,IAAL,GAAY;;AAQb,UAAA,CAAW,MAAX,GAAoB,YACpB;IACC,IAAA,CAAK,GAAL,GAAW;IACX,IAAA,CAAK,MAAL,GAAc;IACd,IAAA,CAAK,MAAL,GAAc;IACd,IAAA,CAAK,SAAL,GAAiB;IACjB,IAAA,CAAK,GAAL,GAAW;IACX,IAAA,CAAK,QAAL,GAAgB;IAChB,IAAA,CAAK,QAAL,GAAgB;;AAMjB,UAAA,CAAW,KAAX,GAAmB,YACnB;IACC,IAAA,CAAK,GAAL,GAAW;IACX,IAAA,CAAK,EAAL,GAAU,IAAI,UAAA,CAAW,OAAf;IACV,IAAA,CAAK,IAAL,GAAY;IACZ,IAAA,CAAK,IAAL,GAAY;;AAMb,UAAA,CAAW,IAAX,GAAkB,YAClB;IACC,IAAA,CAAK,MAAL,GAAc;IACd,IAAA,CAAK,MAAL,GAAc;IACd,IAAA,CAAK,KAAL,GAAa,IAAI,UAAA,CAAW,OAAf;;AAGd,UAAA,CAAW,WAAX,GAAyB,YACzB;IACC,IAAA,CAAK,YAAL,GAAoB;IACpB,IAAA,CAAK,WAAL,GAAmB;IACnB,IAAA,CAAK,OAAL,GAAe,IAAI,KAAJ;IACf,IAAA,CAAK,cAAL,GAAsB;IACtB,IAAA,CAAK,iBAAL,GAAyB;IACzB,IAAA,CAAK,UAAL,GAAkB;IAClB,IAAA,CAAK,UAAL,GAAkB;IAClB,IAAA,CAAK,aAAL,GAAqB;;AAGtB,UAAA,CAAW,WAAX,CAAuB,UAAvB,GAAoC,CAAC;AACrC,UAAA,CAAW,WAAX,CAAuB,IAAvB,GAA8B,CAAC;AAC/B,UAAA,CAAW,WAAX,CAAuB,UAAvB,GAAoC,CAAC;AACrC,UAAA,CAAW,WAAX,CAAuB,SAAvB,GAAmC;AAInC,UAAA,CAAW,WAAX,CAAuB,QAAvB,GAAkC,IAAA,CAAK,IAAL,CAAU,MAAA,CAAO;AACnD,UAAA,CAAW,WAAX,CAAuB,QAAvB,GAAkC,IAAA,CAAK,IAAL,CAAU,MAAA,CAAO;AAEnD,UAAA,CAAW,WAAX,CAAuB,SAAvB,GAAmC,UAAU,KAC7C;IACC,OAAQ,GAAA,GAAM,CAAC,UAAA,CAAW,WAAX,CAAuB,SAA/B,IAA8C,GAAA,GAAM,UAAA,CAAW,WAAX,CAAuB;;AAGnF,UAAA,CAAW,WAAX,CAAuB,YAAvB,GAAsC,UAAU,GAChD;IACC,OAAO,CAAA,CAAE,KAAF,CAAQ,CAAR,KAAc;;AAGtB,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,aAAjC,GAAiD,UAAU,EAAI,EAAA,IAC/D;IACC,IAAI,MAAM;IACV,GAAG;QACF,IAAI,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,GAAA,CAAI,IAAI;cACzC,OAAO;QACR,GAAA,GAAM,GAAA,CAAI;aAEJ,GAAA,KAAQ;IACf,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,kBAAjC,GAAsD,UAAU,EAAI,EAAA,OAAS,EAAA,SAC7E;IACE,OAAS,EAAA,CAAG,CAAH,KAAS,OAAA,CAAQ,CAAlB,IAAyB,EAAA,CAAG,CAAH,KAAS,OAAA,CAAQ,CAA3C,IAAoD,EAAA,CAAG,CAAH,KAAS,OAAA,CAAQ,CAAlB,IAAyB,EAAA,CAAG,CAAH,KAAS,OAAA,CAAQ,CAA7F,IAAuG,EAAA,CAAG,CAAH,GAAO,OAAA,CAAQ,CAAhB,KAAwB,EAAA,CAAG,CAAH,GAAO,OAAA,CAAQ,CAAxC,IAAiD,EAAA,CAAG,CAAH,GAAO,OAAA,CAAQ,CAAhB,KAAwB,EAAA,CAAG,CAAH,GAAO,OAAA,CAAQ,CAAvF,KAAgG,EAAA,CAAG,CAAH,GAAO,OAAA,CAAQ,MAAM,OAAA,CAAQ,CAAR,GAAY,OAAA,CAAQ,EAA1C,MAAkD,OAAA,CAAQ,CAAR,GAAY,OAAA,CAAQ,MAAM,EAAA,CAAG,CAAH,GAAO,OAAA,CAAQ;;AAGxS,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,cAAjC,GAAkD,UAAU,EAAI,EAAA,IAChE;;;IACC,IAAI,MAAM;IACV,OAAO,MACP;QACC,IAAIA,MAAA,CAAK,kBAAL,CAAwB,IAAI,GAAA,CAAI,IAAI,GAAA,CAAI,IAAJ,CAAS;cAChD,OAAO;QACR,GAAA,GAAM,GAAA,CAAI;QACV,IAAI,GAAA,KAAQ;cACX;;IAEF,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,WAAjC,IAA+C,UAAA,CAAW,WAAX,CAAuB,WAAvB,GAAqC,YACpF;IACC,IAAI,IAAI,WACP,OAAO,CAAA,CAAE;IACV,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK;IAC3B,IAAI,IAAA,KAAS,GACb;QACC,EAAA,GAAK,CAAA,CAAE;QACP,EAAA,GAAK,CAAA,CAAE;QACP,OAAO,EAAA,CAAG,KAAH,CAAS,CAAT,GAAa,EAAA,CAAG,KAAH,CAAS,CAAtB,KAA4B,EAAA,CAAG,KAAH,CAAS,CAAT,GAAa,EAAA,CAAG,KAAH,CAAS;WAErD,IAAI,IAAA,KAAS,GAClB;QACC,GAAA,GAAM,CAAA,CAAE;QACR,GAAA,GAAM,CAAA,CAAE;QACR,GAAA,GAAM,CAAA,CAAE;QACR,QAAQ,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,MAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,EAA/B,IAAqC,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,MAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,EAAnE,KAA0E;WAGlF;QACC,GAAA,GAAM,CAAA,CAAE;QACR,GAAA,GAAM,CAAA,CAAE;QACR,GAAA,GAAM,CAAA,CAAE;QACR,GAAA,GAAM,CAAA,CAAE;QACR,QAAQ,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,MAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,EAA/B,IAAqC,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,MAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,EAAnE,KAA0E;;;AAInF,UAAA,CAAW,WAAX,CAAuB,YAAvB,GAAsC,UAAU,EAAI,EAAA,IACpD;IACC,OAAO,EAAA,CAAG,KAAH,CAAS,CAAT,GAAa,EAAA,CAAG,KAAH,CAAS,CAAtB,KAA4B,EAAA,CAAG,KAAH,CAAS,CAAT,GAAa,EAAA,CAAG,KAAH,CAAS;;AAG1D,UAAA,CAAW,WAAX,CAAuB,YAAvB,GAAsC,UAAU,GAAK,EAAA,GAAK,EAAA,KAC1D;IACC,QAAQ,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,MAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,EAA/B,IAAqC,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,MAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,EAAnE,KAA0E;;AAGlF,UAAA,CAAW,WAAX,CAAuB,YAAvB,GAAsC,UAAU,GAAK,EAAA,GAAK,EAAA,GAAK,EAAA,KAC/D;IACC,QAAQ,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,MAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,EAA/B,IAAqC,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,MAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,EAAnE,KAA0E;;AAGlF,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,KAAjC,GAAyC,YACzC;;;IACC,IAAA,CAAK,sBAAL;IACA,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,OAAL,CAAa,OAAQ,CAAA,GAAI,MAAM,EAAE,GACxD;QACC,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,OAAL,CAAa,EAAb,CAAgB,OAAQ,CAAA,GAAI,MAAM,EAAE;cAC1DA,MAAA,CAAK,OAAL,CAAa,EAAb,CAAgB,EAAhB,GAAqB;QACtB,UAAA,CAAW,KAAX,CAAiBA,MAAA,CAAK,OAAL,CAAa;;IAE/B,UAAA,CAAW,KAAX,CAAiB,IAAA,CAAK;IACtB,IAAA,CAAK,cAAL,GAAsB;;AAGvB,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,sBAAjC,GAA0D,YAC1D;;;IACC,OAAO,IAAA,CAAK,YAAL,KAAsB,MAC7B;QACC,IAAI,QAAQA,MAAA,CAAK,YAAL,CAAkB;QAC9BA,MAAA,CAAK,YAAL,GAAoB;QACpBA,MAAA,CAAK,YAAL,GAAoB;;IAErB,IAAA,CAAK,WAAL,GAAmB;;AAGpB,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,SAAjC,GAA6C,UAAU,IACvD;IACC,IAAG,EAAA,CAAG,CAAH,GAAO,UAAA,CAAW,WAAX,CAAuB,QAA9B,IAA0C,EAAA,CAAG,CAAH,GAAO,CAAC,UAAA,CAAW,WAAX,CAAuB,QAAzE,IACA,EAAA,CAAG,CAAH,GAAO,UAAA,CAAW,WAAX,CAAuB,QAD9B,IAC0C,EAAA,CAAG,CAAH,GAAO,CAAC,UAAA,CAAW,WAAX,CAAuB,QADzE,IAED,EAAA,CAAG,CAAH,GAAO,CAAP,IAAY,EAAA,CAAG,CAAH,GAAO,UAAA,CAAW,WAAX,CAAuB,QAFzC,IAGD,EAAA,CAAG,CAAH,GAAO,CAAP,IAAY,EAAA,CAAG,CAAH,GAAO,UAAA,CAAW,WAAX,CAAuB,QAHzC,IAID,EAAA,CAAG,CAAH,GAAO,CAAP,IAAY,EAAA,CAAG,CAAH,GAAO,CAAC,UAAA,CAAW,WAAX,CAAuB,QAJ1C,IAKD,EAAA,CAAG,CAAH,GAAO,CAAP,IAAY,EAAA,CAAG,CAAH,GAAO,CAAC,UAAA,CAAW,WAAX,CAAuB;UAC5C,UAAA,CAAW,KAAX,CAAiB;;AAGnB,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,QAAjC,GAA4C,UAAU,CAAG,EAAA,KAAO,EAAA,KAAO,EAAA,IACvE;IACC,CAAA,CAAE,IAAF,GAAS;IACT,CAAA,CAAE,IAAF,GAAS;IAET,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,EAAA,CAAG;IACd,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,EAAA,CAAG;IACd,IAAI,UAAA,CAAW;UAAS,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,EAAA,CAAG;IACtC,CAAA,CAAE,MAAF,GAAW,CAAC;;AAGb,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,SAAjC,GAA6C,UAAU,CAAG,EAAA,UAC1D;IACC,IAAI,CAAA,CAAE,IAAF,CAAO,CAAP,IAAY,CAAA,CAAE,IAAF,CAAO,IAAP,CAAY,GAC5B;QAEC,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO;QACjB,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO;QACjB,IAAI,UAAA,CAAW;cAAS,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO;QAEzC,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO,IAAP,CAAY;QACtB,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO,IAAP,CAAY;QACtB,IAAI,UAAA,CAAW;cAAS,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO,IAAP,CAAY;WAG/C;QAEC,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO;QACjB,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO;QACjB,IAAI,UAAA,CAAW;cAAS,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO;QAEzC,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO,IAAP,CAAY;QACtB,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO,IAAP,CAAY;QACtB,IAAI,UAAA,CAAW;cAAS,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,IAAF,CAAO,IAAP,CAAY;;IAE/C,IAAA,CAAK,KAAL,CAAW;IACX,CAAA,CAAE,OAAF,GAAY;;AAGb,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,cAAjC,GAAkD,UAAU,GAC5D;IACC,IAAI;IACJ,WACA;QACC,OAAO,UAAA,CAAW,MAAX,CAAkB,aAAlB,CAAgC,CAAA,CAAE,KAAK,CAAA,CAAE,IAAF,CAAO,IAA9C,IAAsD,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,CAAA,CAAE,MAAM,CAAA,CAAE;cACpG,CAAA,GAAI,CAAA,CAAE;QACP,IAAI,CAAA,CAAE,EAAF,KAAS,UAAA,CAAW,WAAX,CAAuB,UAAhC,IAA8C,CAAA,CAAE,IAAF,CAAO,EAAP,KAAc,UAAA,CAAW,WAAX,CAAuB;cACtF;QACD,OAAO,CAAA,CAAE,IAAF,CAAO,EAAP,KAAc,UAAA,CAAW,WAAX,CAAuB;cAC3C,CAAA,GAAI,CAAA,CAAE;QACP,EAAA,GAAK;QACL,OAAO,CAAA,CAAE,EAAF,KAAS,UAAA,CAAW,WAAX,CAAuB;cACtC,CAAA,GAAI,CAAA,CAAE;QACP,IAAI,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY,CAAA,CAAE,IAAF,CAAO,GAAP,CAAW;cAC1B;QAED,IAAI,EAAA,CAAG,IAAH,CAAQ,GAAR,CAAY,CAAZ,GAAgB,CAAA,CAAE,GAAF,CAAM;cACzB,CAAA,GAAI;QACL;;IAED,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,YAAjC,GAAgD,UAAU,CAAG,EAAA,oBAC7D;;;IACC,IAAI;IACJ,IAAI,SAAS;IACb,IAAI;IAEJ,IAAI,MAAA,CAAO,MAAP,KAAkB,UAAA,CAAW,WAAX,CAAuB,MAC7C;QAGC,CAAA,GAAI;QACJ,IAAI,oBACJ;YACC,OAAO,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY,CAAA,CAAE,IAAF,CAAO,GAAP,CAAW;kBAAG,CAAA,GAAI,CAAA,CAAE;YACvC,OAAO,CAAA,KAAM,MAAN,IAAgB,CAAA,CAAE,EAAF,KAAS,UAAA,CAAW,WAAX,CAAuB;kBAAY,CAAA,GAAI,CAAA,CAAE;eAG1E;YACC,OAAO,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY,CAAA,CAAE,IAAF,CAAO,GAAP,CAAW;kBAAG,CAAA,GAAI,CAAA,CAAE;YACvC,OAAO,CAAA,KAAM,MAAN,IAAgB,CAAA,CAAE,EAAF,KAAS,UAAA,CAAW,WAAX,CAAuB;kBAAY,CAAA,GAAI,CAAA,CAAE;;QAE1E,IAAI,CAAA,KAAM,QACV;YACC,IAAI;kBAAoB,MAAA,GAAS,CAAA,CAAE;;kBAC9B,MAAA,GAAS,CAAA,CAAE;eAGjB;YAEC,IAAI;kBACH,CAAA,GAAI,MAAA,CAAO;;kBAEX,CAAA,GAAI,MAAA,CAAO;YACZ,IAAI,SAAS,IAAI,UAAA,CAAW,WAAf;YACb,MAAA,CAAO,IAAP,GAAc;YACd,MAAA,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;YACjB,MAAA,CAAO,SAAP,GAAmB;YACnB,MAAA,CAAO,UAAP,GAAoB;YACpB,CAAA,CAAE,SAAF,GAAc;YACd,MAAA,GAAS,IAAA,CAAK,YAAL,CAAkB,GAAG;YAC9B,IAAA,CAAK,iBAAL,CAAuB;;QAExB,OAAO;;IAGR,IAAI,CAAA,CAAE,EAAF,KAAS,UAAA,CAAW,WAAX,CAAuB,YACpC;QAIC,IAAI;cAAoB,MAAA,GAAS,CAAA,CAAE;;cAC9B,MAAA,GAAS,CAAA,CAAE;QAEhB,IAAI,MAAA,CAAO,EAAP,KAAc,UAAA,CAAW,WAAX,CAAuB,YACzC;YACC,IAAI,MAAA,CAAO,GAAP,CAAW,CAAX,KAAiB,CAAA,CAAE,GAAF,CAAM,CAAvB,IAA4B,MAAA,CAAO,GAAP,CAAW,CAAX,KAAiB,CAAA,CAAE,GAAF,CAAM;kBACtD,IAAA,CAAK,iBAAL,CAAuB;eAEpB,IAAI,MAAA,CAAO,GAAP,CAAW,CAAX,KAAiB,CAAA,CAAE,GAAF,CAAM;cAC/B,IAAA,CAAK,iBAAL,CAAuB;;IAGzB,MAAA,GAAS;IACT,IAAI,oBACJ;QACC,OAAO,MAAA,CAAO,GAAP,CAAW,CAAX,KAAiB,MAAA,CAAO,IAAP,CAAY,GAAZ,CAAgB,CAAjC,IAAsC,MAAA,CAAO,IAAP,CAAY,MAAZ,KAAuB,UAAA,CAAW,WAAX,CAAuB;cAC1F,MAAA,GAAS,MAAA,CAAO;QACjB,IAAI,MAAA,CAAO,EAAP,KAAc,UAAA,CAAW,WAAX,CAAuB,UAArC,IAAmD,MAAA,CAAO,IAAP,CAAY,MAAZ,KAAuB,UAAA,CAAW,WAAX,CAAuB,MACrG;YAIC,IAAA,GAAO;YACP,OAAO,IAAA,CAAK,IAAL,CAAU,EAAV,KAAiB,UAAA,CAAW,WAAX,CAAuB;kBAC9C,IAAA,GAAO,IAAA,CAAK;YACb,IAAI,IAAA,CAAK,IAAL,CAAU,GAAV,CAAc,CAAd,GAAkB,MAAA,CAAO,IAAP,CAAY,GAAZ,CAAgB;kBACrC,MAAA,GAAS,IAAA,CAAK;;QAEhB,OAAO,CAAA,KAAM,QACb;YACC,CAAA,CAAE,SAAF,GAAc,CAAA,CAAE;YAChB,IAAI,CAAA,CAAE,EAAF,KAAS,UAAA,CAAW,WAAX,CAAuB,UAAhC,IAA8C,CAAA,KAAM,MAApD,IAA8D,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY,CAAA,CAAE,IAAF,CAAO,GAAP,CAAW;kBACxFA,MAAA,CAAK,iBAAL,CAAuB;YACxB,CAAA,GAAI,CAAA,CAAE;;QAEP,IAAI,CAAA,CAAE,EAAF,KAAS,UAAA,CAAW,WAAX,CAAuB,UAAhC,IAA8C,CAAA,KAAM,MAApD,IAA8D,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY,CAAA,CAAE,IAAF,CAAO,GAAP,CAAW;cACxF,IAAA,CAAK,iBAAL,CAAuB;QACxB,MAAA,GAAS,MAAA,CAAO;WAIjB;QACC,OAAO,MAAA,CAAO,GAAP,CAAW,CAAX,KAAiB,MAAA,CAAO,IAAP,CAAY,GAAZ,CAAgB,CAAjC,IAAsC,MAAA,CAAO,IAAP,CAAY,MAAZ,KAAuB,UAAA,CAAW,WAAX,CAAuB;cAC1F,MAAA,GAAS,MAAA,CAAO;QACjB,IAAI,MAAA,CAAO,EAAP,KAAc,UAAA,CAAW,WAAX,CAAuB,UAArC,IAAmD,MAAA,CAAO,IAAP,CAAY,MAAZ,KAAuB,UAAA,CAAW,WAAX,CAAuB,MACrG;YACC,IAAA,GAAO;YACP,OAAO,IAAA,CAAK,IAAL,CAAU,EAAV,KAAiB,UAAA,CAAW,WAAX,CAAuB;kBAC9C,IAAA,GAAO,IAAA,CAAK;YACb,IAAI,IAAA,CAAK,IAAL,CAAU,GAAV,CAAc,CAAd,KAAoB,MAAA,CAAO,IAAP,CAAY,GAAZ,CAAgB,CAApC,IAAyC,IAAA,CAAK,IAAL,CAAU,GAAV,CAAc,CAAd,GAAkB,MAAA,CAAO,IAAP,CAAY,GAAZ,CAAgB,GAC/E;gBACC,MAAA,GAAS,IAAA,CAAK;;;QAGhB,OAAO,CAAA,KAAM,QACb;YACC,CAAA,CAAE,SAAF,GAAc,CAAA,CAAE;YAChB,IAAI,CAAA,CAAE,EAAF,KAAS,UAAA,CAAW,WAAX,CAAuB,UAAhC,IAA8C,CAAA,KAAM,MAApD,IAA8D,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY,CAAA,CAAE,IAAF,CAAO,GAAP,CAAW;kBACxFA,MAAA,CAAK,iBAAL,CAAuB;YACxB,CAAA,GAAI,CAAA,CAAE;;QAEP,IAAI,CAAA,CAAE,EAAF,KAAS,UAAA,CAAW,WAAX,CAAuB,UAAhC,IAA8C,CAAA,KAAM,MAApD,IAA8D,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY,CAAA,CAAE,IAAF,CAAO,GAAP,CAAW;cACxF,IAAA,CAAK,iBAAL,CAAuB;QACxB,MAAA,GAAS,MAAA,CAAO;;IAIjB,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,OAAjC,GAA2C,UAAU,EAAI,EAAA,QAAU,EAAA,QACnE;;;IACC,IAAI,UAAA,CAAW,WACf;QACC,IAAI,CAAC,MAAD,IAAW,QAAA,KAAa,UAAA,CAAW,QAAX,CAAoB;cAC/C,UAAA,CAAW,KAAX,CAAiB;WAGnB;QACC,IAAI,CAAC;cACJ,UAAA,CAAW,KAAX,CAAiB;;IAEnB,IAAI,QAAQ,EAAA,CAAG,MAAH,GAAY;IACxB,IAAI;UACH,OAAO,KAAA,GAAQ,CAAR,IAAc,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,EAAA,CAAG,QAAQ,EAAA,CAAG;UAChE,EAAE;IACJ,OAAO,KAAA,GAAQ,CAAR,IAAc,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,EAAA,CAAG,QAAQ,EAAA,CAAG,KAAA,GAAQ;UACxE,EAAE;IACH,IAAK,MAAA,IAAU,KAAA,GAAQ,CAAnB,IAA0B,CAAC,MAAD,IAAW,KAAA,GAAQ;UAChD,OAAO;IAER,IAAI,QAAQ,IAAI,KAAJ;IACZ,KAAK,IAAI,IAAI,EAAG,CAAA,IAAK,OAAO,CAAA;UAC3B,KAAA,CAAM,IAAN,CAAW,IAAI,UAAA,CAAW,KAAf;IACZ,IAAI,SAAS;IAIb,KAAA,CAAM,EAAN,CAAS,IAAT,CAAc,CAAd,GAAkB,EAAA,CAAG,EAAH,CAAM;IACxB,KAAA,CAAM,EAAN,CAAS,IAAT,CAAc,CAAd,GAAkB,EAAA,CAAG,EAAH,CAAM;IACxB,IAAI,UAAA,CAAW;UAAS,KAAA,CAAM,EAAN,CAAS,IAAT,CAAc,CAAd,GAAkB,EAAA,CAAG,EAAH,CAAM;IAEhD,IAAA,CAAK,SAAL,CAAe,EAAA,CAAG;IAElB,IAAA,CAAK,SAAL,CAAe,EAAA,CAAG;IAElB,IAAA,CAAK,QAAL,CAAc,KAAA,CAAM,IAAI,KAAA,CAAM,IAAI,KAAA,CAAM,QAAQ,EAAA,CAAG;IACnD,IAAA,CAAK,QAAL,CAAc,KAAA,CAAM,QAAQ,KAAA,CAAM,IAAI,KAAA,CAAM,KAAA,GAAQ,IAAI,EAAA,CAAG;IAC3D,KAAK,IAAI,IAAI,KAAA,GAAQ,EAAG,CAAA,IAAK,GAAG,EAAE,GAClC;QACCA,MAAA,CAAK,SAAL,CAAe,EAAA,CAAG;QAElBA,MAAA,CAAK,QAAL,CAAc,KAAA,CAAM,IAAI,KAAA,CAAM,CAAA,GAAI,IAAI,KAAA,CAAM,CAAA,GAAI,IAAI,EAAA,CAAG;;IAGxD,IAAI,SAAS,KAAA,CAAM;IAEnB,IAAI,IAAI,QACP,YAAY;IACb,WACA;QAGC,IAAI,CAAA,CAAE,IAAF,KAAW,CAAA,CAAE,IAAF,CAAO,IAAlB,KAA2B,MAAA,IAAU,CAAA,CAAE,IAAF,KAAW,SACpD;YACC,IAAI,CAAA,KAAM,CAAA,CAAE;kBACX;YACD,IAAI,CAAA,KAAM;kBACT,MAAA,GAAS,CAAA,CAAE;YACZ,CAAA,GAAIA,MAAA,CAAK,UAAL,CAAgB;YACpB,SAAA,GAAY;YACZ;;QAED,IAAI,CAAA,CAAE,IAAF,KAAW,CAAA,CAAE;cAChB;cACI,IAAI,MAAA,IAAU,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,CAAA,CAAE,IAAF,CAAO,MAAM,CAAA,CAAE,MAAM,CAAA,CAAE,IAAF,CAAO,KAA1E,KAAoF,CAACA,MAAA,CAAK,iBAAN,IAA2B,CAACA,MAAA,CAAK,qBAAL,CAA2B,CAAA,CAAE,IAAF,CAAO,MAAM,CAAA,CAAE,MAAM,CAAA,CAAE,IAAF,CAAO,QAChL;YAKC,IAAI,CAAA,KAAM;kBACT,MAAA,GAAS,CAAA,CAAE;YACZ,CAAA,GAAIA,MAAA,CAAK,UAAL,CAAgB;YACpB,CAAA,GAAI,CAAA,CAAE;YACN,SAAA,GAAY;YACZ;;QAED,CAAA,GAAI,CAAA,CAAE;QACN,IAAK,CAAA,KAAM,SAAP,IAAsB,CAAC,MAAD,IAAW,CAAA,CAAE,IAAF,KAAW;cAAS;;IAE1D,IAAK,CAAC,MAAD,IAAY,CAAA,KAAM,CAAA,CAAE,IAArB,IAAgC,MAAA,IAAW,CAAA,CAAE,IAAF,KAAW,CAAA,CAAE;UAC3D,OAAO;IACR,IAAI,CAAC,QACL;QACC,IAAA,CAAK,cAAL,GAAsB;QACtB,MAAA,CAAO,IAAP,CAAY,MAAZ,GAAqB,UAAA,CAAW,WAAX,CAAuB;;IAG7C,CAAA,GAAI;IACJ,GAAG;QACFA,MAAA,CAAK,SAAL,CAAe,GAAG;QAClB,CAAA,GAAI,CAAA,CAAE;QACN,IAAI,MAAA,IAAU,CAAA,CAAE,IAAF,CAAO,CAAP,KAAa,MAAA,CAAO,IAAP,CAAY;cACtC,MAAA,GAAS;aAEJ,CAAA,KAAM;IAIb,IAAI,QACJ;QACC,IAAI;cACH,OAAO;QAER,CAAA,CAAE,IAAF,CAAO,MAAP,GAAgB,UAAA,CAAW,WAAX,CAAuB;QAEvC,IAAI,SAAS,IAAI,UAAA,CAAW,WAAf;QACb,MAAA,CAAO,IAAP,GAAc;QACd,MAAA,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;QACjB,MAAA,CAAO,SAAP,GAAmB;QACnB,MAAA,CAAO,UAAP,GAAoB;QACpB,MAAA,CAAO,UAAP,CAAkB,IAAlB,GAAyB,UAAA,CAAW,QAAX,CAAoB;QAC7C,MAAA,CAAO,UAAP,CAAkB,SAAlB,GAA8B;QAE9B,WACA;YACC,IAAI,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY,CAAA,CAAE,IAAF,CAAO,GAAP,CAAW;kBAAGA,MAAA,CAAK,iBAAL,CAAuB;YACrD,IAAI,CAAA,CAAE,IAAF,CAAO,MAAP,KAAkB,UAAA,CAAW,WAAX,CAAuB;kBAAM;YACnD,CAAA,CAAE,SAAF,GAAc,CAAA,CAAE;YAChB,CAAA,GAAI,CAAA,CAAE;;QAEP,IAAA,CAAK,iBAAL,CAAuB;QACvB,IAAA,CAAK,OAAL,CAAa,IAAb,CAAkB;QAClB,OAAO;;IAER,IAAA,CAAK,OAAL,CAAa,IAAb,CAAkB;IAClB,IAAI;IACJ,IAAI,OAAO;IAIX,IAAI,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,CAAA,CAAE,IAAF,CAAO,KAAK,CAAA,CAAE,IAAF,CAAO;UACpD,CAAA,GAAI,CAAA,CAAE;IAEP,WACA;QACC,CAAA,GAAIA,MAAA,CAAK,cAAL,CAAoB;QACxB,IAAI,CAAA,KAAM;cACT;cACI,IAAI,IAAA,KAAS;cACjB,IAAA,GAAO;QAGR,IAAI,SAAS,IAAI,UAAA,CAAW,WAAf;QACb,MAAA,CAAO,IAAP,GAAc;QACd,MAAA,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;QACjB,IAAI,CAAA,CAAE,EAAF,GAAO,CAAA,CAAE,IAAF,CAAO,IAClB;YACC,MAAA,CAAO,SAAP,GAAmB,CAAA,CAAE;YACrB,MAAA,CAAO,UAAP,GAAoB;YACpB,kBAAA,GAAqB;eAItB;YACC,MAAA,CAAO,SAAP,GAAmB;YACnB,MAAA,CAAO,UAAP,GAAoB,CAAA,CAAE;YACtB,kBAAA,GAAqB;;QAGtB,MAAA,CAAO,SAAP,CAAiB,IAAjB,GAAwB,UAAA,CAAW,QAAX,CAAoB;QAC5C,MAAA,CAAO,UAAP,CAAkB,IAAlB,GAAyB,UAAA,CAAW,QAAX,CAAoB;QAC7C,IAAI,CAAC;cACJ,MAAA,CAAO,SAAP,CAAiB,SAAjB,GAA6B;cACzB,IAAI,MAAA,CAAO,SAAP,CAAiB,IAAjB,KAA0B,MAAA,CAAO;cACzC,MAAA,CAAO,SAAP,CAAiB,SAAjB,GAA6B,CAAC;;cAE9B,MAAA,CAAO,SAAP,CAAiB,SAAjB,GAA6B;QAC9B,MAAA,CAAO,UAAP,CAAkB,SAAlB,GAA8B,CAAC,MAAA,CAAO,SAAP,CAAiB;QAChD,CAAA,GAAIA,MAAA,CAAK,YAAL,CAAkB,MAAA,CAAO,WAAW;QACxC,IAAI,CAAA,CAAE,MAAF,KAAa,UAAA,CAAW,WAAX,CAAuB;cACvC,CAAA,GAAIA,MAAA,CAAK,YAAL,CAAkB,GAAG;QAC1B,IAAI,KAAKA,MAAA,CAAK,YAAL,CAAkB,MAAA,CAAO,YAAY,CAAC;QAC/C,IAAI,EAAA,CAAG,MAAH,KAAc,UAAA,CAAW,WAAX,CAAuB;cAAM,EAAA,GAAKA,MAAA,CAAK,YAAL,CAAkB,IAAI,CAAC;QAC3E,IAAI,MAAA,CAAO,SAAP,CAAiB,MAAjB,KAA4B,UAAA,CAAW,WAAX,CAAuB;cACtD,MAAA,CAAO,SAAP,GAAmB;cACf,IAAI,MAAA,CAAO,UAAP,CAAkB,MAAlB,KAA6B,UAAA,CAAW,WAAX,CAAuB;cAC5D,MAAA,CAAO,UAAP,GAAoB;QACrBA,MAAA,CAAK,iBAAL,CAAuB;QACvB,IAAI,CAAC;cACJ,CAAA,GAAI;;IAEN,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,QAAjC,GAA4C,UAAU,GAAK,EAAA,QAAU,EAAA,QACrE;;;IAGC,IAAI,SAAS;IACb,KAAK,IAAI,IAAI,GAAG,OAAO,GAAA,CAAI,OAAQ,CAAA,GAAI,MAAM,EAAE;UAC9C,IAAIA,MAAA,CAAK,OAAL,CAAa,GAAA,CAAI,IAAI,UAAU;UAClC,MAAA,GAAS;IACX,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,qBAAjC,GAAyD,UAAU,GAAK,EAAA,GAAK,EAAA,KAC7E;IACC,IAAK,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,KAAK,IAApC,IAA8C,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,KAAK,IAAjF,IAA2F,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,KAAK;UAGjI,OAAO;UAEH,IAAI,GAAA,CAAI,CAAJ,KAAU,GAAA,CAAI;UACtB,OAAQ,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,CAAb,KAAqB,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;;UAExC,OAAQ,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,CAAb,KAAqB,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;;AAG1C,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,UAAjC,GAA8C,UAAU,GACxD;IAEC,CAAA,CAAE,IAAF,CAAO,IAAP,GAAc,CAAA,CAAE;IAChB,CAAA,CAAE,IAAF,CAAO,IAAP,GAAc,CAAA,CAAE;IAChB,IAAI,SAAS,CAAA,CAAE;IACf,CAAA,CAAE,IAAF,GAAS;IACT,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,KAAjC,GAAyC,UAAU,GACnD;IACC,CAAA,CAAE,KAAF,CAAQ,CAAR,GAAa,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,GAAF,CAAM;IAC7B,CAAA,CAAE,KAAF,CAAQ,CAAR,GAAa,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,GAAF,CAAM;IAC7B,IAAI,CAAA,CAAE,KAAF,CAAQ,CAAR,KAAc;UAAG,CAAA,CAAE,EAAF,GAAO,UAAA,CAAW,WAAX,CAAuB;;UAC9C,CAAA,CAAE,EAAF,GAAQ,CAAA,CAAE,KAAF,CAAQ,CAAT,GAAe,CAAA,CAAE,KAAF,CAAQ;;AAGpC,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,iBAAjC,GAAqD,UAAU,OAC/D;IACC,IAAI,IAAA,CAAK,YAAL,KAAsB,MAC1B;QACC,IAAA,CAAK,YAAL,GAAoB;WAEhB,IAAI,KAAA,CAAM,CAAN,IAAW,IAAA,CAAK,YAAL,CAAkB,GACtC;QACC,KAAA,CAAM,IAAN,GAAa,IAAA,CAAK;QAClB,IAAA,CAAK,YAAL,GAAoB;WAGrB;QACC,IAAI,QAAQ,IAAA,CAAK;QACjB,OAAO,KAAA,CAAM,IAAN,KAAe,IAAf,IAAwB,KAAA,CAAM,CAAN,GAAU,KAAA,CAAM,IAAN,CAAW;cACnD,KAAA,GAAQ,KAAA,CAAM;QACf,KAAA,CAAM,IAAN,GAAa,KAAA,CAAM;QACnB,KAAA,CAAM,IAAN,GAAa;;;AAIf,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,cAAjC,GAAkD,UAAU,CAAG,EAAA,SAC/D;IACC,OAAA,CAAQ,CAAR,GAAY,IAAA,CAAK;IACjB,IAAI,IAAA,CAAK,WAAL,KAAqB,IAArB,IAA6B,IAAA,CAAK,WAAL,CAAiB,CAAjB,KAAuB,GACxD;QACC,IAAA,CAAK,WAAL,GAAmB,IAAA,CAAK,WAAL,CAAiB;QACpC,OAAO;;IAER,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,iBAAjC,GAAqD,UAAU,GAC/D;IAIC,IAAI,MAAM,CAAA,CAAE,GAAF,CAAM;IAChB,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,GAAF,CAAM;IAChB,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU;IACV,IAAI,UAAA,CAAW,SACf;QACC,GAAA,GAAM,CAAA,CAAE,GAAF,CAAM;QACZ,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,CAAA,CAAE,GAAF,CAAM;QAChB,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU;;;AAIZ,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,KAAjC,GAAyC,YACzC;;;IACC,IAAA,CAAK,WAAL,GAAmB,IAAA,CAAK;IACxB,IAAI,IAAA,CAAK,WAAL,KAAqB;UACxB;IAED,IAAA,CAAK,UAAL,GAAkB;IAClB,IAAI,KAAK,IAAA,CAAK;IACd,OAAO,EAAA,KAAO,MACd;QACCA,MAAA,CAAK,cAAL,CAAoB,EAAA,CAAG;QACvB,IAAI,IAAI,EAAA,CAAG;QACX,IAAI,CAAA,KAAM,MACV;YAEC,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;YACjB,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;YACjB,IAAI,UAAA,CAAW;kBAAS,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;YACzC,CAAA,CAAE,MAAF,GAAW,UAAA,CAAW,WAAX,CAAuB;;QAEnC,CAAA,GAAI,EAAA,CAAG;QACP,IAAI,CAAA,KAAM,MACV;YAEC,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;YACjB,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;YACjB,IAAI,UAAA,CAAW;kBAAS,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;YACzC,CAAA,CAAE,MAAF,GAAW,UAAA,CAAW,WAAX,CAAuB;;QAEnC,EAAA,GAAK,EAAA,CAAG;;IAET,IAAA,CAAK,aAAL,GAAqB;;AAGtB,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,cAAjC,GAAkD,UAAU,GAC5D;IAEC,IAAI,IAAA,CAAK,UAAL,KAAoB,MACxB;QACC,IAAA,CAAK,UAAL,GAAkB,IAAI,UAAA,CAAW,QAAf;QAClB,IAAA,CAAK,UAAL,CAAgB,IAAhB,GAAuB;QACvB,IAAA,CAAK,UAAL,CAAgB,CAAhB,GAAoB;WAEhB,IAAI,CAAA,GAAI,IAAA,CAAK,UAAL,CAAgB,GAC7B;QACC,IAAI,QAAQ,IAAI,UAAA,CAAW,QAAf;QACZ,KAAA,CAAM,CAAN,GAAU;QACV,KAAA,CAAM,IAAN,GAAa,IAAA,CAAK;QAClB,IAAA,CAAK,UAAL,GAAkB;WAGnB;QACC,IAAI,MAAM,IAAA,CAAK;QACf,OAAO,GAAA,CAAI,IAAJ,KAAa,IAAb,IAAqB,CAAA,IAAK,GAAA,CAAI,IAAJ,CAAS,GAC1C;YACC,GAAA,GAAM,GAAA,CAAI;;QAEX,IAAI,CAAA,KAAM,GAAA,CAAI,GACd;YACC;;QAED,IAAI,SAAS,IAAI,UAAA,CAAW,QAAf;QACb,MAAA,CAAO,CAAP,GAAW;QACX,MAAA,CAAO,IAAP,GAAc,GAAA,CAAI;QAClB,GAAA,CAAI,IAAJ,GAAW;;;AAIb,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,WAAjC,GAA+C,UAAU,GACzD;IACC,IAAI,IAAA,CAAK,UAAL,KAAoB,MACxB;QACC,CAAA,CAAE,CAAF,GAAM;QACN,OAAO;;IAER,CAAA,CAAE,CAAF,GAAM,IAAA,CAAK,UAAL,CAAgB;IACtB,IAAA,CAAK,UAAL,GAAkB,IAAA,CAAK,UAAL,CAAgB;IAClC,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,kBAAjC,GAAsD,YACtD;IACC,OAAQ,IAAA,CAAK,WAAL,KAAqB;;AAG9B,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,YAAjC,GAAgD,YAChD;IACC,IAAI,SAAS,IAAI,UAAA,CAAW,MAAf;IACb,MAAA,CAAO,GAAP,GAAa,UAAA,CAAW,WAAX,CAAuB;IACpC,MAAA,CAAO,MAAP,GAAgB;IAChB,MAAA,CAAO,MAAP,GAAgB;IAChB,MAAA,CAAO,SAAP,GAAmB;IACnB,MAAA,CAAO,GAAP,GAAa;IACb,MAAA,CAAO,QAAP,GAAkB;IAClB,MAAA,CAAO,QAAP,GAAkB;IAClB,IAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB;IACrB,MAAA,CAAO,GAAP,GAAa,IAAA,CAAK,UAAL,CAAgB,MAAhB,GAAyB;IACtC,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,aAAjC,GAAiD,UAAU,OAC3D;IACC,IAAI,SAAS,IAAA,CAAK,UAAL,CAAgB;IAC7B,MAAA,CAAO,GAAP,GAAa;IACb,MAAA,GAAS;IACT,IAAA,CAAK,UAAL,CAAgB,MAAhB,GAAyB;;AAG1B,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,iBAAjC,GAAqD,UAAU,GAC/D;IACC,IAAI,CAAA,CAAE,SAAF,KAAgB,MACpB;QACC,UAAA,CAAW,KAAX,CAAiB;;IAElB,IAAI,UAAU,CAAA,CAAE;IAChB,IAAI,UAAU,CAAA,CAAE;IAChB,CAAA,CAAE,SAAF,CAAY,MAAZ,GAAqB,CAAA,CAAE;IACvB,IAAI,OAAA,KAAY,MAChB;QACC,OAAA,CAAQ,SAAR,GAAoB,CAAA,CAAE;WAGvB;QACC,IAAA,CAAK,aAAL,GAAqB,CAAA,CAAE;;IAExB,IAAI,OAAA,KAAY,MAChB;QACC,OAAA,CAAQ,SAAR,GAAoB,CAAA,CAAE;;IAEvB,CAAA,CAAE,SAAF,CAAY,IAAZ,GAAmB,CAAA,CAAE;IACrB,CAAA,CAAE,SAAF,CAAY,SAAZ,GAAwB,CAAA,CAAE;IAC1B,CAAA,CAAE,SAAF,CAAY,OAAZ,GAAsB,CAAA,CAAE;IACxB,CAAA,CAAE,SAAF,CAAY,QAAZ,GAAuB,CAAA,CAAE;IACzB,CAAA,GAAI,CAAA,CAAE;IACN,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;IACjB,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;IACjB,CAAA,CAAE,SAAF,GAAc;IACd,CAAA,CAAE,SAAF,GAAc;IACd,IAAI,CAAC,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,IACzC;QACC,IAAA,CAAK,cAAL,CAAoB,CAAA,CAAE,GAAF,CAAM;;IAE3B,OAAO;;AAGR,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,kBAAjC,GAAsD,UAAU,KAAO,EAAA,OACvE;IAEC,IAAI,KAAA,CAAM,SAAN,KAAoB,KAAA,CAAM,SAA1B,IAAuC,KAAA,CAAM,SAAN,KAAoB,KAAA,CAAM,WACrE;QACC;;IAGD,IAAI,KAAA,CAAM,SAAN,KAAoB,OACxB;QACC,IAAI,OAAO,KAAA,CAAM;QACjB,IAAI,IAAA,KAAS,MACb;YACC,IAAA,CAAK,SAAL,GAAiB;;QAElB,IAAI,OAAO,KAAA,CAAM;QACjB,IAAI,IAAA,KAAS,MACb;YACC,IAAA,CAAK,SAAL,GAAiB;;QAElB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;WAEd,IAAI,KAAA,CAAM,SAAN,KAAoB,OAC7B;QACC,IAAI,QAAQ,KAAA,CAAM;QAClB,IAAI,KAAA,KAAU,MACd;YACC,KAAA,CAAM,SAAN,GAAkB;;QAEnB,IAAI,QAAQ,KAAA,CAAM;QAClB,IAAI,KAAA,KAAU,MACd;YACC,KAAA,CAAM,SAAN,GAAkB;;QAEnB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;WAGnB;QACC,IAAI,QAAQ,KAAA,CAAM;QAClB,IAAI,QAAQ,KAAA,CAAM;QAClB,KAAA,CAAM,SAAN,GAAkB,KAAA,CAAM;QACxB,IAAI,KAAA,CAAM,SAAN,KAAoB,MACxB;YACC,KAAA,CAAM,SAAN,CAAgB,SAAhB,GAA4B;;QAE7B,KAAA,CAAM,SAAN,GAAkB,KAAA,CAAM;QACxB,IAAI,KAAA,CAAM,SAAN,KAAoB,MACxB;YACC,KAAA,CAAM,SAAN,CAAgB,SAAhB,GAA4B;;QAE7B,KAAA,CAAM,SAAN,GAAkB;QAClB,IAAI,KAAA,CAAM,SAAN,KAAoB,MACxB;YACC,KAAA,CAAM,SAAN,CAAgB,SAAhB,GAA4B;;QAE7B,KAAA,CAAM,SAAN,GAAkB;QAClB,IAAI,KAAA,CAAM,SAAN,KAAoB,MACxB;YACC,KAAA,CAAM,SAAN,CAAgB,SAAhB,GAA4B;;;IAI9B,IAAI,KAAA,CAAM,SAAN,KAAoB,MACxB;QACC,IAAA,CAAK,aAAL,GAAqB;WAGtB;QACC,IAAI,KAAA,CAAM,SAAN,KAAoB,MACxB;YACC,IAAA,CAAK,aAAL,GAAqB;;;;AAKxB,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,aAAjC,GAAiD,UAAU,GAC3D;IACC,IAAI,UAAU,CAAA,CAAE;IAChB,IAAI,UAAU,CAAA,CAAE;IAChB,IAAI,OAAA,KAAY,IAAZ,IAAoB,OAAA,KAAY,IAAhC,IAAwC,CAAA,KAAM,IAAA,CAAK,eACvD;QACC;;IAED,IAAI,OAAA,KAAY,MAChB;QACC,OAAA,CAAQ,SAAR,GAAoB;WAGrB;QACC,IAAA,CAAK,aAAL,GAAqB;;IAEtB,IAAI,OAAA,KAAY,MAChB;QACC,OAAA,CAAQ,SAAR,GAAoB;;IAErB,CAAA,CAAE,SAAF,GAAc;IACd,CAAA,CAAE,SAAF,GAAc;;AAOf,UAAA,CAAW,OAAX,GAAqB,UAAU,aAC/B;IACC,IAAI,OAAQ,WAAR,KAAyB;UAAa,WAAA,GAAc;IACxD,IAAA,CAAK,UAAL,GAAkB;IAClB,IAAA,CAAK,UAAL,GAAkB,UAAA,CAAW,QAAX,CAAoB;IACtC,IAAA,CAAK,UAAL,GAAkB;IAClB,IAAA,CAAK,QAAL,GAAgB;IAChB,IAAA,CAAK,aAAL,GAAqB;IACrB,IAAA,CAAK,aAAL,GAAqB;IACrB,IAAA,CAAK,eAAL,GAAuB;IACvB,IAAA,CAAK,uBAAL,GAA+B;IAC/B,IAAA,CAAK,eAAL,GAAuB;IACvB,IAAA,CAAK,cAAL,GAAsB,UAAA,CAAW,YAAX,CAAwB;IAC9C,IAAA,CAAK,cAAL,GAAsB,UAAA,CAAW,YAAX,CAAwB;IAC9C,IAAA,CAAK,OAAL,GAAe;IACf,IAAA,CAAK,YAAL,GAAoB;IACpB,IAAA,CAAK,eAAL,GAAuB;IACvB,IAAA,CAAK,eAAL,GAAuB;IACvB,IAAA,CAAK,cAAL,GAAsB;IAEtB,UAAA,CAAW,WAAX,CAAuB,IAAvB,CAA4B;IAE5B,IAAA,CAAK,UAAL,GAAkB;IAClB,IAAA,CAAK,QAAL,GAAgB;IAChB,IAAA,CAAK,aAAL,GAAqB;IACrB,IAAA,CAAK,aAAL,GAAqB;IACrB,IAAA,CAAK,eAAL,GAAuB,IAAI,KAAJ;IACvB,IAAA,CAAK,uBAAL,GAA+B,UAAA,CAAW,mBAAX,CAA+B;IAC9D,IAAA,CAAK,eAAL,GAAuB;IACvB,IAAA,CAAK,eAAL,GAAuB;IACvB,IAAA,CAAK,UAAL,GAAkB,IAAI,KAAJ;IAClB,IAAA,CAAK,OAAL,GAAe,IAAI,KAAJ;IACf,IAAA,CAAK,YAAL,GAAoB,IAAI,KAAJ;IACpB,IAAA,CAAK,eAAL,IAAwB,CAAA,GAAI,iBAAiB;IAC7C,IAAA,CAAK,cAAL,IAAuB,CAAA,GAAI,iBAAiB;IAC5C,IAAA,CAAK,iBAAL,IAA0B,CAAA,GAAI,iBAAiB;IAC/C,IAAI,UAAA,CAAW,SACf;QACC,IAAA,CAAK,aAAL,GAAqB;;;AAIvB,UAAA,CAAW,OAAX,CAAmB,iBAAnB,GAAuC;AACvC,UAAA,CAAW,OAAX,CAAmB,gBAAnB,GAAsC;AACtC,UAAA,CAAW,OAAX,CAAmB,mBAAnB,GAAyC;AAEzC,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,KAA7B,GAAqC,YACrC;IACC,IAAI,IAAA,CAAK,OAAL,CAAa,MAAb,KAAwB;UAC3B;IAED,IAAA,CAAK,iBAAL;IACA,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,KAAjC,CAAuC,IAAvC,CAA4C;;AAG7C,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,YAA7B,GAA4C,UAAU,GACtD;IAEC,IAAI,SAAS,IAAI,UAAA,CAAW,MAAf;IACb,MAAA,CAAO,CAAP,GAAW;IACX,IAAI,IAAA,CAAK,QAAL,KAAkB,MACtB;QACC,IAAA,CAAK,QAAL,GAAgB;QAChB,IAAA,CAAK,QAAL,CAAc,IAAd,GAAqB;QACrB,IAAA,CAAK,QAAL,CAAc,IAAd,GAAqB;WAEjB,IAAI,CAAA,GAAI,IAAA,CAAK,QAAL,CAAc,GAC3B;QACC,MAAA,CAAO,IAAP,GAAc,IAAA,CAAK;QACnB,MAAA,CAAO,IAAP,GAAc;QACd,IAAA,CAAK,QAAL,GAAgB;WAGjB;QACC,IAAI,IAAI,IAAA,CAAK;QACb,OAAO,CAAA,CAAE,IAAF,KAAW,IAAX,IAAmB,CAAA,IAAK,CAAA,CAAE,IAAF,CAAO,GACtC;YACC,CAAA,GAAI,CAAA,CAAE;;QAEP,IAAI,CAAA,KAAM,CAAA,CAAE,GACZ;YACC;;QAGD,MAAA,CAAO,IAAP,GAAc,CAAA,CAAE;QAChB,MAAA,CAAO,IAAP,GAAc;QACd,IAAI,CAAA,CAAE,IAAF,KAAW,MACf;YACC,CAAA,CAAE,IAAF,CAAO,IAAP,GAAc;;QAEf,CAAA,CAAE,IAAF,GAAS;;;AAKX,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,OAA7B,GAAuC,YACvC;IACC,IAAI,IAAI,WACP,OAAO,CAAA,CAAE,QACT,aAAa,CAAA,CAAE,EAAF,YAAgB,UAAA,CAAW;IACzC,IAAI,IAAA,KAAS,CAAT,IAAc,CAAC,YACnB;QACC,IAAI,WAAW,CAAA,CAAE,IAChB,WAAW,CAAA,CAAE,IACb,eAAe,CAAA,CAAE,IACjB,eAAe,CAAA,CAAE;QAClB,IAAI,IAAA,CAAK;cACR,OAAO;QACR,IAAI,IAAA,CAAK;cACR,UAAA,CAAW,KAAX,CAAiB;QAClB,IAAA,CAAK,eAAL,GAAuB;QACvB,UAAA,CAAW,KAAX,CAAiB;QACjB,IAAA,CAAK,cAAL,GAAsB;QACtB,IAAA,CAAK,cAAL,GAAsB;QACtB,IAAA,CAAK,UAAL,GAAkB;QAClB,IAAA,CAAK,eAAL,GAAuB;QACvB,IACA;YACC,IAAI,YAAY,IAAA,CAAK,eAAL;YAEhB,IAAI;kBAAW,IAAA,CAAK,WAAL,CAAiB;SAGjC,SAAA;YACC,IAAA,CAAK,iBAAL;YACA,IAAA,CAAK,eAAL,GAAuB;;QAExB,OAAO;WAEH,IAAI,IAAA,KAAS,CAAT,IAAc,YACvB;QACC,IAAI,WAAW,CAAA,CAAE,IAChB,WAAW,CAAA,CAAE,IACb,eAAe,CAAA,CAAE,IACjB,eAAe,CAAA,CAAE;QAClB,IAAI,IAAA,CAAK;cACR,OAAO;QACR,IAAA,CAAK,eAAL,GAAuB;QACvB,IAAA,CAAK,cAAL,GAAsB;QACtB,IAAA,CAAK,cAAL,GAAsB;QACtB,IAAA,CAAK,UAAL,GAAkB;QAClB,IAAA,CAAK,eAAL,GAAuB;QACvB,IACA;YACC,IAAI,YAAY,IAAA,CAAK,eAAL;YAEhB,IAAI;kBAAW,IAAA,CAAK,YAAL,CAAkB;SAGlC,SAAA;YACC,IAAA,CAAK,iBAAL;YACA,IAAA,CAAK,eAAL,GAAuB;;QAExB,OAAO;WAEH,IAAI,IAAA,KAAS,CAAT,IAAc,CAAC,YACxB;QACC,IAAI,WAAW,CAAA,CAAE,IAChB,WAAW,CAAA,CAAE;QACd,OAAO,IAAA,CAAK,OAAL,CAAa,UAAU,UAAU,UAAA,CAAW,YAAX,CAAwB,YAAY,UAAA,CAAW,YAAX,CAAwB;WAEhG,IAAI,IAAA,KAAS,CAAT,IAAc,YACvB;QACC,IAAI,WAAW,CAAA,CAAE,IAChB,WAAW,CAAA,CAAE;QACd,OAAO,IAAA,CAAK,OAAL,CAAa,UAAU,UAAU,UAAA,CAAW,YAAX,CAAwB,YAAY,UAAA,CAAW,YAAX,CAAwB;;;AAItG,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,cAA7B,GAA8C,UAAU,QACxD;IAGC,IAAI,MAAA,CAAO,SAAP,KAAqB,IAArB,IAA8B,MAAA,CAAO,MAAP,KAAkB,MAAA,CAAO,SAAP,CAAiB,MAAnC,IAA6C,MAAA,CAAO,SAAP,CAAiB,GAAjB,KAAyB;UACvG;IACD,IAAI,OAAO,MAAA,CAAO;IAClB,OAAO,IAAA,KAAS,IAAT,KAAmB,IAAA,CAAK,MAAL,KAAgB,MAAA,CAAO,MAAxB,IAAmC,IAAA,CAAK,GAAL,KAAa;UACxE,IAAA,GAAO,IAAA,CAAK;IACb,MAAA,CAAO,SAAP,GAAmB;;AAGpB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,eAA7B,GAA+C,YAC/C;;;IACC,IACA;QACC,IAAA,CAAK,KAAL;QACA,IAAA,CAAK,aAAL,GAAqB;QACrB,IAAA,CAAK,QAAL,GAAgB;QAEhB,IAAI,OAAO,IACV,OAAO;QAER,IAAI,CAAC,IAAA,CAAK,WAAL,CAAiB,OACtB;YACC,OAAO;;QAER,IAAA,CAAK,wBAAL,CAA8B,IAAA,CAAK;QACnC,OAAO,IAAA,CAAK,WAAL,CAAiB,KAAjB,IAA0B,IAAA,CAAK,kBAAL,IACjC;YACCA,MAAA,CAAK,kBAAL;YACAA,MAAA,CAAK,YAAL,CAAkB,MAAlB,GAA2B;YAC3B,IAAI,CAACA,MAAA,CAAK,oBAAL,CAA0B,IAAA,CAAK,IACpC;gBACC,OAAO;;YAERA,MAAA,CAAK,2BAAL,CAAiC,IAAA,CAAK;YACtC,IAAA,CAAK,CAAL,GAAS,IAAA,CAAK;YACdA,MAAA,CAAK,wBAAL,CAA8B,IAAA,CAAK;;QAIpC,IAAI,QAAQ,GAAG;QAEf,KAAK,CAAA,GAAI,GAAG,IAAA,GAAO,IAAA,CAAK,UAAL,CAAgB,QAAQ,CAAA,GAAI,MAAM,CAAA,IACrD;YACC,MAAA,GAASA,MAAA,CAAK,UAAL,CAAgB;YACzB,IAAI,MAAA,CAAO,GAAP,KAAe,IAAf,IAAuB,MAAA,CAAO;kBAAQ;YAC1C,KAAK,MAAA,CAAO,MAAP,GAAgBA,MAAA,CAAK,oBAAqBA,MAAA,CAAK,MAAL,CAAY,OAAZ,GAAsB;kBACpEA,MAAA,CAAK,kBAAL,CAAwB,MAAA,CAAO;;QAGjC,IAAA,CAAK,eAAL;QAEA,KAAK,CAAA,GAAI,GAAG,IAAA,GAAO,IAAA,CAAK,UAAL,CAAgB,QAAQ,CAAA,GAAI,MAAM,CAAA,IACrD;YACC,MAAA,GAASA,MAAA,CAAK,UAAL,CAAgB;YACzB,IAAI,MAAA,CAAO,GAAP,KAAe;kBAClB;kBACI,IAAI,MAAA,CAAO;kBACfA,MAAA,CAAK,gBAAL,CAAsB;;kBAEtBA,MAAA,CAAK,eAAL,CAAqB;;QAGvB,IAAI,IAAA,CAAK;cAAgB,IAAA,CAAK,gBAAL;QACzB,OAAO;KAIR,SAAA;QACC,IAAA,CAAK,OAAL,CAAa,MAAb,GAAsB;QACtB,IAAA,CAAK,YAAL,CAAkB,MAAlB,GAA2B;;;AAI7B,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,iBAA7B,GAAiD,YACjD;;;IACC,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,UAAL,CAAgB,OAAQ,CAAA,GAAI,MAAM,EAAE;UAC1DA,MAAA,CAAK,aAAL,CAAmB;IACpB,UAAA,CAAW,KAAX,CAAiB,IAAA,CAAK;;AAGvB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,OAA7B,GAAuC,UAAU,GAAK,EAAA,GAAK,EAAA,OAC3D;IACC,IAAI,IAAI,IAAI,UAAA,CAAW,IAAf;IACR,CAAA,CAAE,MAAF,GAAW;IACX,CAAA,CAAE,MAAF,GAAW;IAEX,CAAA,CAAE,KAAF,CAAQ,CAAR,GAAY,KAAA,CAAM;IAClB,CAAA,CAAE,KAAF,CAAQ,CAAR,GAAY,KAAA,CAAM;IAClB,IAAI,UAAA,CAAW;UAAS,CAAA,CAAE,KAAF,CAAQ,CAAR,GAAY,KAAA,CAAM;IAC1C,IAAA,CAAK,OAAL,CAAa,IAAb,CAAkB;;AAGnB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,YAA7B,GAA4C,UAAU,EAAI,EAAA,OAC1D;IACC,IAAI,IAAI,IAAI,UAAA,CAAW,IAAf;IACR,CAAA,CAAE,MAAF,GAAW;IAEX,CAAA,CAAE,KAAF,CAAQ,CAAR,GAAY,KAAA,CAAM;IAClB,CAAA,CAAE,KAAF,CAAQ,CAAR,GAAY,KAAA,CAAM;IAClB,IAAI,UAAA,CAAW;UAAS,CAAA,CAAE,KAAF,CAAQ,CAAR,GAAY,KAAA,CAAM;IAC1C,IAAA,CAAK,YAAL,CAAkB,IAAlB,CAAuB;;AAKxB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,IAA7B,GAAoC,UAAU,EAAI,EAAA,EAAI,EAAA,IACtD;IACC,IAAI,IAAA,CAAK,aAAL,KAAuB,MAC3B;QACC,IAAI,EAAA,CAAG,CAAH,KAAS,CAAT,IAAc,IAAA,CAAK,aAAL,KAAuB;cAAM;cAC1C,IAAI,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAI,EAAA,CAAG;cAAM,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG,GAAH,CAAO;cAC7D,IAAI,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAI,EAAA,CAAG;cAAM,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG,GAAH,CAAO;cAC7D,IAAI,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAI,EAAA,CAAG;cAAM,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG,GAAH,CAAO;cAC7D,IAAI,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAI,EAAA,CAAG;cAAM,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG,GAAH,CAAO;;cAC7D,IAAA,CAAK,aAAL,CAAmB,EAAA,CAAG,KAAK,EAAA,CAAG,KAAK,EAAA,CAAG,KAAK,EAAA,CAAG,KAAK;;;AAK1D,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,wBAA7B,GAAwD,UAAU,MAClE;;;IACC,IAAI,KAAK;IAET,IAAI;IACJ,IAAI;IACJ,OAAO,IAAA,CAAK,cAAL,CAAoB,MAAM,KACjC;QACC,EAAA,GAAK,EAAA,CAAG,CAAH,CAAK;QACV,EAAA,GAAK,EAAA,CAAG,CAAH,CAAK;QAEV,IAAI,MAAM;QACV,IAAI,EAAA,KAAO,MACX;YACCA,MAAA,CAAK,iBAAL,CAAuB,IAAI;YAC3BA,MAAA,CAAK,eAAL,CAAqB;YACrB,IAAIA,MAAA,CAAK,cAAL,CAAoB;kBACvB,GAAA,GAAMA,MAAA,CAAK,QAAL,CAAc,IAAI,EAAA,CAAG;eAExB,IAAI,EAAA,KAAO,MAChB;YACCA,MAAA,CAAK,iBAAL,CAAuB,IAAI;YAC3BA,MAAA,CAAK,eAAL,CAAqB;YACrB,IAAIA,MAAA,CAAK,cAAL,CAAoB;kBACvB,GAAA,GAAMA,MAAA,CAAK,QAAL,CAAc,IAAI,EAAA,CAAG;YAC5BA,MAAA,CAAK,cAAL,CAAoB,EAAA,CAAG,GAAH,CAAO;eAG5B;YACCA,MAAA,CAAK,iBAAL,CAAuB,IAAI;YAC3BA,MAAA,CAAK,iBAAL,CAAuB,IAAI;YAC3BA,MAAA,CAAK,eAAL,CAAqB;YACrB,EAAA,CAAG,OAAH,GAAa,EAAA,CAAG;YAChB,EAAA,CAAG,QAAH,GAAc,EAAA,CAAG;YACjB,IAAIA,MAAA,CAAK,cAAL,CAAoB;kBACvB,GAAA,GAAMA,MAAA,CAAK,eAAL,CAAqB,IAAI,IAAI,EAAA,CAAG;YACvCA,MAAA,CAAK,cAAL,CAAoB,EAAA,CAAG,GAAH,CAAO;;QAE5B,IAAI,EAAA,KAAO,MACX;YACC,IAAI,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,KACxC;gBACC,IAAI,EAAA,CAAG,SAAH,KAAiB,MACrB;oBACCA,MAAA,CAAK,cAAL,CAAoB,EAAA,CAAG,SAAH,CAAa,GAAb,CAAiB;;gBAEtCA,MAAA,CAAK,YAAL,CAAkB;mBAGnB;gBACCA,MAAA,CAAK,cAAL,CAAoB,EAAA,CAAG,GAAH,CAAO;;;QAG7B,IAAI,EAAA,KAAO,IAAP,IAAe,EAAA,KAAO;cAAM;QAEhC,IAAI,GAAA,KAAQ,IAAR,IAAgB,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,GAApD,IAA2DA,MAAA,CAAK,YAAL,CAAkB,MAAlB,GAA2B,CAAtF,IAA2F,EAAA,CAAG,SAAH,KAAiB,GAChH;YACC,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,YAAL,CAAkB,OAAQ,CAAA,GAAI,MAAM,CAAA,IAC3D;gBAGC,IAAI,IAAIA,MAAA,CAAK,YAAL,CAAkB;gBAE1B,IAAIA,MAAA,CAAK,mBAAL,CAAyB,CAAA,CAAE,MAAF,CAAS,EAAT,CAAY,GAAG,CAAA,CAAE,KAAF,CAAQ,GAAG,EAAA,CAAG,GAAH,CAAO,GAAG,EAAA,CAAG,GAAH,CAAO;sBACvEA,MAAA,CAAK,OAAL,CAAa,CAAA,CAAE,QAAQ,KAAK,CAAA,CAAE;;;QAIjC,IAAI,EAAA,CAAG,MAAH,IAAa,CAAb,IAAkB,EAAA,CAAG,SAAH,KAAiB,IAAnC,IACH,EAAA,CAAG,SAAH,CAAa,IAAb,CAAkB,CAAlB,KAAwB,EAAA,CAAG,GAAH,CAAO,CAD5B,IAEH,EAAA,CAAG,SAAH,CAAa,MAAb,IAAuB,CAFpB,IAGH,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,EAAA,CAAG,SAAH,CAAa,MAAM,EAAA,CAAG,SAAH,CAAa,KAAK,EAAA,CAAG,MAAM,EAAA,CAAG,IAHlF,IAIH,EAAA,CAAG,SAAH,KAAiB,CAJd,IAImB,EAAA,CAAG,SAAH,CAAa,SAAb,KAA2B,GAClD;YACC,IAAI,MAAMA,MAAA,CAAK,QAAL,CAAc,EAAA,CAAG,WAAW,EAAA,CAAG;YACzCA,MAAA,CAAK,OAAL,CAAa,KAAK,KAAK,EAAA,CAAG;;QAE3B,IAAI,EAAA,CAAG,SAAH,KAAiB,IACrB;YACC,IAAI,EAAA,CAAG,MAAH,IAAa,CAAb,IAAkB,EAAA,CAAG,SAAH,CAAa,MAAb,IAAuB,CAAzC,IACH,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,EAAA,CAAG,SAAH,CAAa,MAAM,EAAA,CAAG,SAAH,CAAa,KAAK,EAAA,CAAG,MAAM,EAAA,CAAG,IADlF,IAEH,EAAA,CAAG,SAAH,KAAiB,CAFd,IAEmB,EAAA,CAAG,SAAH,CAAa,SAAb,KAA2B,GAClD;gBACC,IAAI,MAAMA,MAAA,CAAK,QAAL,CAAc,EAAA,CAAG,WAAW,EAAA,CAAG;gBACzCA,MAAA,CAAK,OAAL,CAAa,KAAK,KAAK,EAAA,CAAG;;YAE3B,IAAI,IAAI,EAAA,CAAG;YACX,IAAI,CAAA,KAAM;kBACT,OAAO,CAAA,KAAM,IACb;gBAGCA,MAAA,CAAK,cAAL,CAAoB,IAAI,GAAG,EAAA,CAAG;gBAE9B,CAAA,GAAI,CAAA,CAAE;;;;;AAMX,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,iBAA7B,GAAiD,UAAU,IAAM,EAAA,WACjE;IACC,IAAI,IAAA,CAAK,aAAL,KAAuB,MAC3B;QACC,IAAA,CAAK,SAAL,GAAiB;QACjB,IAAA,CAAK,SAAL,GAAiB;QACjB,IAAA,CAAK,aAAL,GAAqB;WAEjB,IAAI,SAAA,KAAc,IAAd,IAAsB,IAAA,CAAK,iBAAL,CAAuB,IAAA,CAAK,eAAe,OAC1E;QACC,IAAA,CAAK,SAAL,GAAiB;QACjB,IAAA,CAAK,SAAL,GAAiB,IAAA,CAAK;QACtB,IAAA,CAAK,aAAL,CAAmB,SAAnB,GAA+B;QAC/B,IAAA,CAAK,aAAL,GAAqB;WAGtB;QACC,IAAI,SAAA,KAAc;cACjB,SAAA,GAAY,IAAA,CAAK;QAClB,OAAO,SAAA,CAAU,SAAV,KAAwB,IAAxB,IAAgC,CAAC,IAAA,CAAK,iBAAL,CAAuB,SAAA,CAAU,WAAW;cACnF,SAAA,GAAY,SAAA,CAAU;QACvB,IAAA,CAAK,SAAL,GAAiB,SAAA,CAAU;QAC3B,IAAI,SAAA,CAAU,SAAV,KAAwB;cAC3B,SAAA,CAAU,SAAV,CAAoB,SAApB,GAAgC;QACjC,IAAA,CAAK,SAAL,GAAiB;QACjB,SAAA,CAAU,SAAV,GAAsB;;;AAIxB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,iBAA7B,GAAiD,UAAU,EAAI,EAAA,IAC/D;IACC,IAAI,EAAA,CAAG,IAAH,CAAQ,CAAR,KAAc,EAAA,CAAG,IAAH,CAAQ,GAC1B;QACC,IAAI,EAAA,CAAG,GAAH,CAAO,CAAP,GAAW,EAAA,CAAG,GAAH,CAAO;cACrB,OAAO,EAAA,CAAG,GAAH,CAAO,CAAP,GAAW,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,IAAI,EAAA,CAAG,GAAH,CAAO;;cAErD,OAAO,EAAA,CAAG,GAAH,CAAO,CAAP,GAAW,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,IAAI,EAAA,CAAG,GAAH,CAAO;;UAGtD,OAAO,EAAA,CAAG,IAAH,CAAQ,CAAR,GAAY,EAAA,CAAG,IAAH,CAAQ;;AAG7B,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,iBAA7B,GAAiD,UAAU,MAC3D;IACC,IAAI,IAAA,CAAK,OAAL,KAAiB,UAAA,CAAW,QAAX,CAAoB;UACxC,OAAO,IAAA,CAAK,cAAL,KAAwB,UAAA,CAAW,YAAX,CAAwB;;UAEvD,OAAO,IAAA,CAAK,cAAL,KAAwB,UAAA,CAAW,YAAX,CAAwB;;AAGzD,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,oBAA7B,GAAoD,UAAU,MAC9D;IACC,IAAI,IAAA,CAAK,OAAL,KAAiB,UAAA,CAAW,QAAX,CAAoB;UACxC,OAAO,IAAA,CAAK,cAAL,KAAwB,UAAA,CAAW,YAAX,CAAwB;;UAEvD,OAAO,IAAA,CAAK,cAAL,KAAwB,UAAA,CAAW,YAAX,CAAwB;;AAGzD,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,cAA7B,GAA8C,UAAU,MACxD;IACC,IAAI,KAAK;IACT,IAAI,IAAA,CAAK,OAAL,KAAiB,UAAA,CAAW,QAAX,CAAoB,WACzC;QACC,GAAA,GAAM,IAAA,CAAK;QACX,IAAA,GAAO,IAAA,CAAK;WAGb;QACC,GAAA,GAAM,IAAA,CAAK;QACX,IAAA,GAAO,IAAA,CAAK;;IAEb,QAAQ;QAER,KAAK,UAAA,CAAW,YAAX,CAAwB;YAC5B,IAAI,IAAA,CAAK,SAAL,KAAmB,CAAnB,IAAwB,IAAA,CAAK,OAAL,KAAiB;kBAC5C,OAAO;YACR;QACD,KAAK,UAAA,CAAW,YAAX,CAAwB;YAC5B,IAAI,IAAA,CAAK,GAAL,CAAS,IAAA,CAAK,QAAd,KAA2B;kBAC9B,OAAO;YACR;QACD,KAAK,UAAA,CAAW,YAAX,CAAwB;YAC5B,IAAI,IAAA,CAAK,OAAL,KAAiB;kBACpB,OAAO;YACR;QACD;YACC,IAAI,IAAA,CAAK,OAAL,KAAiB,CAAC;kBACrB,OAAO;YACR;;IAED,QAAQ,IAAA,CAAK;QAEb,KAAK,UAAA,CAAW,QAAX,CAAoB;YACxB,QAAQ;gBAER,KAAK,UAAA,CAAW,YAAX,CAAwB;gBAC7B,KAAK,UAAA,CAAW,YAAX,CAAwB;oBAC5B,OAAQ,IAAA,CAAK,QAAL,KAAkB;gBAC3B,KAAK,UAAA,CAAW,YAAX,CAAwB;oBAC5B,OAAQ,IAAA,CAAK,QAAL,GAAgB;gBACzB;oBACC,OAAQ,IAAA,CAAK,QAAL,GAAgB;;QAE1B,KAAK,UAAA,CAAW,QAAX,CAAoB;YACxB,QAAQ;gBAER,KAAK,UAAA,CAAW,YAAX,CAAwB;gBAC7B,KAAK,UAAA,CAAW,YAAX,CAAwB;oBAC5B,OAAQ,IAAA,CAAK,QAAL,KAAkB;gBAC3B,KAAK,UAAA,CAAW,YAAX,CAAwB;oBAC5B,OAAQ,IAAA,CAAK,QAAL,IAAiB;gBAC1B;oBACC,OAAQ,IAAA,CAAK,QAAL,IAAiB;;QAE3B,KAAK,UAAA,CAAW,QAAX,CAAoB;YACxB,IAAI,IAAA,CAAK,OAAL,KAAiB,UAAA,CAAW,QAAX,CAAoB;kBACxC,QAAQ;gBAER,KAAK,UAAA,CAAW,YAAX,CAAwB;gBAC7B,KAAK,UAAA,CAAW,YAAX,CAAwB;oBAC5B,OAAQ,IAAA,CAAK,QAAL,KAAkB;gBAC3B,KAAK,UAAA,CAAW,YAAX,CAAwB;oBAC5B,OAAQ,IAAA,CAAK,QAAL,IAAiB;gBAC1B;oBACC,OAAQ,IAAA,CAAK,QAAL,IAAiB;;;kBAG1B,QAAQ;gBAER,KAAK,UAAA,CAAW,YAAX,CAAwB;gBAC7B,KAAK,UAAA,CAAW,YAAX,CAAwB;oBAC5B,OAAQ,IAAA,CAAK,QAAL,KAAkB;gBAC3B,KAAK,UAAA,CAAW,YAAX,CAAwB;oBAC5B,OAAQ,IAAA,CAAK,QAAL,GAAgB;gBACzB;oBACC,OAAQ,IAAA,CAAK,QAAL,GAAgB;;QAE3B,KAAK,UAAA,CAAW,QAAX,CAAoB;YACxB,IAAI,IAAA,CAAK,SAAL,KAAmB;kBACtB,QAAQ;gBAER,KAAK,UAAA,CAAW,YAAX,CAAwB;gBAC7B,KAAK,UAAA,CAAW,YAAX,CAAwB;oBAC5B,OAAQ,IAAA,CAAK,QAAL,KAAkB;gBAC3B,KAAK,UAAA,CAAW,YAAX,CAAwB;oBAC5B,OAAQ,IAAA,CAAK,QAAL,IAAiB;gBAC1B;oBACC,OAAQ,IAAA,CAAK,QAAL,IAAiB;;;kBAG1B,OAAO;;IAET,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,eAA7B,GAA+C,UAAU,MACzD;IACC,IAAI,IAAI,IAAA,CAAK;IAEb,OAAO,CAAA,KAAM,IAAN,KAAgB,CAAA,CAAE,OAAF,KAAc,IAAA,CAAK,OAApB,IAAiC,CAAA,CAAE,SAAF,KAAgB;UACtE,CAAA,GAAI,CAAA,CAAE;IACP,IAAI,CAAA,KAAM,MACV;QACC,IAAI,MAAO,IAAA,CAAK,OAAL,KAAiB,UAAA,CAAW,QAAX,CAAoB,SAArC,GAAiD,IAAA,CAAK,iBAAiB,IAAA,CAAK;QACvF,IAAI,IAAA,CAAK,SAAL,KAAmB,GACvB;YACC,IAAA,CAAK,OAAL,GAAgB,GAAA,KAAQ,UAAA,CAAW,YAAX,CAAwB,WAAhC,GAA8C,CAAC,IAAI;eAGpE;YACC,IAAA,CAAK,OAAL,GAAe,IAAA,CAAK;;QAErB,IAAA,CAAK,QAAL,GAAgB;QAChB,CAAA,GAAI,IAAA,CAAK;WAGL,IAAI,IAAA,CAAK,SAAL,KAAmB,CAAnB,IAAwB,IAAA,CAAK,UAAL,KAAoB,UAAA,CAAW,QAAX,CAAoB,SACzE;QACC,IAAA,CAAK,OAAL,GAAe;QACf,IAAA,CAAK,QAAL,GAAgB,CAAA,CAAE;QAClB,CAAA,GAAI,CAAA,CAAE;WAGF,IAAI,IAAA,CAAK,iBAAL,CAAuB,OAChC;QAEC,IAAI,IAAA,CAAK,SAAL,KAAmB,GACvB;YAEC,IAAI,SAAS;YACb,IAAI,KAAK,CAAA,CAAE;YACX,OAAO,EAAA,KAAO,MACd;gBACC,IAAI,EAAA,CAAG,OAAH,KAAe,CAAA,CAAE,OAAjB,IAA4B,EAAA,CAAG,SAAH,KAAiB;sBAChD,MAAA,GAAS,CAAC;gBACX,EAAA,GAAK,EAAA,CAAG;;YAET,IAAA,CAAK,OAAL,GAAgB,MAAA,GAAS,IAAI;eAG9B;YACC,IAAA,CAAK,OAAL,GAAe,IAAA,CAAK;;QAErB,IAAA,CAAK,QAAL,GAAgB,CAAA,CAAE;QAClB,CAAA,GAAI,CAAA,CAAE;WAIP;QAEC,IAAI,CAAA,CAAE,OAAF,GAAY,CAAA,CAAE,SAAd,GAA0B,GAC9B;YAGC,IAAI,IAAA,CAAK,GAAL,CAAS,CAAA,CAAE,QAAX,GAAsB,GAC1B;gBAGC,IAAI,CAAA,CAAE,SAAF,GAAc,IAAA,CAAK,SAAnB,GAA+B;sBAClC,IAAA,CAAK,OAAL,GAAe,CAAA,CAAE;;sBAEjB,IAAA,CAAK,OAAL,GAAe,CAAA,CAAE,OAAF,GAAY,IAAA,CAAK;;kBAGjC,IAAA,CAAK,OAAL,GAAgB,IAAA,CAAK,SAAL,KAAmB,CAAnB,GAAuB,IAAI,IAAA,CAAK;eAGlD;YAGC,IAAI,IAAA,CAAK,SAAL,KAAmB;kBACtB,IAAA,CAAK,OAAL,GAAgB,CAAA,CAAE,OAAF,GAAY,CAAZ,GAAgB,CAAA,CAAE,OAAF,GAAY,IAAI,CAAA,CAAE,OAAF,GAAY;kBACxD,IAAI,CAAA,CAAE,SAAF,GAAc,IAAA,CAAK,SAAnB,GAA+B;kBACvC,IAAA,CAAK,OAAL,GAAe,CAAA,CAAE;;kBAEjB,IAAA,CAAK,OAAL,GAAe,CAAA,CAAE,OAAF,GAAY,IAAA,CAAK;;QAElC,IAAA,CAAK,QAAL,GAAgB,CAAA,CAAE;QAClB,CAAA,GAAI,CAAA,CAAE;;IAIP,IAAI,IAAA,CAAK,oBAAL,CAA0B,OAC9B;QAEC,OAAO,CAAA,KAAM,MACb;YACC,IAAI,CAAA,CAAE,SAAF,KAAgB;kBACnB,IAAA,CAAK,QAAL,GAAiB,IAAA,CAAK,QAAL,KAAkB,CAAlB,GAAsB,IAAI;YAC5C,CAAA,GAAI,CAAA,CAAE;;WAIR;QAEC,OAAO,CAAA,KAAM,MACb;YACC,IAAA,CAAK,QAAL,IAAiB,CAAA,CAAE;YACnB,CAAA,GAAI,CAAA,CAAE;;;;AAKT,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,YAA7B,GAA4C,UAAU,MACtD;IAIC,IAAI,IAAA,CAAK,aAAL,KAAuB,MAC3B;QACC,IAAA,CAAK,aAAL,GAAqB;QACrB,IAAA,CAAK,SAAL,GAAiB;QACjB,IAAA,CAAK,SAAL,GAAiB;WAGlB;QACC,IAAA,CAAK,SAAL,GAAiB,IAAA,CAAK;QACtB,IAAA,CAAK,SAAL,GAAiB;QACjB,IAAA,CAAK,aAAL,CAAmB,SAAnB,GAA+B;QAC/B,IAAA,CAAK,aAAL,GAAqB;;;AAIvB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,cAA7B,GAA8C,UAAU,GACxD;IAEC,CAAA,CAAE,CAAF,GAAM,IAAA,CAAK;IACX,IAAI,CAAA,CAAE,CAAF,KAAQ,MACZ;QACC,OAAO;;IAER,IAAI,OAAO,CAAA,CAAE;IACb,IAAA,CAAK,aAAL,GAAqB,CAAA,CAAE,CAAF,CAAI;IACzB,IAAI,IAAA,CAAK,aAAL,KAAuB,MAC3B;QACC,IAAA,CAAK,aAAL,CAAmB,SAAnB,GAA+B;;IAEhC,IAAA,CAAK,SAAL,GAAiB;IACjB,IAAA,CAAK,SAAL,GAAiB;IACjB,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,YAA7B,GAA4C,YAC5C;IACC,IAAI,IAAI,IAAA,CAAK;IACb,IAAA,CAAK,aAAL,GAAqB;IACrB,OAAO,CAAA,KAAM,MACb;QACC,CAAA,CAAE,SAAF,GAAc,CAAA,CAAE;QAChB,CAAA,CAAE,SAAF,GAAc,CAAA,CAAE;QAChB,CAAA,GAAI,CAAA,CAAE;;;AAIR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,kBAA7B,GAAkD,UAAU,KAAO,EAAA,OACnE;IACC,IAAI,KAAA,CAAM,SAAN,KAAoB,IAApB,IAA4B,KAAA,CAAM,SAAN,KAAoB;UACnD;IACD,IAAI,KAAA,CAAM,SAAN,KAAoB,IAApB,IAA4B,KAAA,CAAM,SAAN,KAAoB;UACnD;IACD,IAAI,KAAA,CAAM,SAAN,KAAoB,OACxB;QACC,IAAI,OAAO,KAAA,CAAM;QACjB,IAAI,IAAA,KAAS;cACZ,IAAA,CAAK,SAAL,GAAiB;QAClB,IAAI,OAAO,KAAA,CAAM;QACjB,IAAI,IAAA,KAAS;cACZ,IAAA,CAAK,SAAL,GAAiB;QAClB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;WAEd,IAAI,KAAA,CAAM,SAAN,KAAoB,OAC7B;QACC,IAAI,OAAO,KAAA,CAAM;QACjB,IAAI,IAAA,KAAS;cACZ,IAAA,CAAK,SAAL,GAAiB;QAClB,IAAI,OAAO,KAAA,CAAM;QACjB,IAAI,IAAA,KAAS;cACZ,IAAA,CAAK,SAAL,GAAiB;QAClB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;QAClB,KAAA,CAAM,SAAN,GAAkB;WAGnB;QACC,IAAI,OAAO,KAAA,CAAM;QACjB,IAAI,OAAO,KAAA,CAAM;QACjB,KAAA,CAAM,SAAN,GAAkB,KAAA,CAAM;QACxB,IAAI,KAAA,CAAM,SAAN,KAAoB;cACvB,KAAA,CAAM,SAAN,CAAgB,SAAhB,GAA4B;QAC7B,KAAA,CAAM,SAAN,GAAkB,KAAA,CAAM;QACxB,IAAI,KAAA,CAAM,SAAN,KAAoB;cACvB,KAAA,CAAM,SAAN,CAAgB,SAAhB,GAA4B;QAC7B,KAAA,CAAM,SAAN,GAAkB;QAClB,IAAI,KAAA,CAAM,SAAN,KAAoB;cACvB,KAAA,CAAM,SAAN,CAAgB,SAAhB,GAA4B;QAC7B,KAAA,CAAM,SAAN,GAAkB;QAClB,IAAI,KAAA,CAAM,SAAN,KAAoB;cACvB,KAAA,CAAM,SAAN,CAAgB,SAAhB,GAA4B;;IAE9B,IAAI,KAAA,CAAM,SAAN,KAAoB;UACvB,IAAA,CAAK,aAAL,GAAqB;UACjB,IAAI,KAAA,CAAM,SAAN,KAAoB;UAC5B,IAAA,CAAK,aAAL,GAAqB;;AAGvB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,eAA7B,GAA+C,UAAU,EAAI,EAAA,EAAI,EAAA,IACjE;IACC,IAAA,CAAK,QAAL,CAAc,IAAI;IAClB,IAAI,EAAA,CAAG,SAAH,KAAiB;UAAG,IAAA,CAAK,QAAL,CAAc,IAAI;IAC1C,IAAI,EAAA,CAAG,MAAH,KAAc,EAAA,CAAG,QACrB;QACC,EAAA,CAAG,MAAH,GAAY,CAAC;QACb,EAAA,CAAG,MAAH,GAAY,CAAC;WAET,IAAI,EAAA,CAAG,MAAH,GAAY,EAAA,CAAG;UACvB,IAAA,CAAK,aAAL,CAAmB,IAAI;;UAEvB,IAAA,CAAK,aAAL,CAAmB,IAAI;;AAGzB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,eAA7B,GAA+C,UAAU,EAAI,EAAA,EAAI,EAAA,IACjE;IACC,IAAI;IACJ,IAAI,GAAG;IACP,IAAI,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,GAApC,IAA4C,EAAA,CAAG,EAAH,GAAQ,EAAA,CAAG,IAC3D;QACC,MAAA,GAAS,IAAA,CAAK,QAAL,CAAc,IAAI;QAC3B,EAAA,CAAG,MAAH,GAAY,EAAA,CAAG;QACf,EAAA,CAAG,IAAH,GAAU,UAAA,CAAW,QAAX,CAAoB;QAC9B,EAAA,CAAG,IAAH,GAAU,UAAA,CAAW,QAAX,CAAoB;QAC9B,CAAA,GAAI;QACJ,IAAI,CAAA,CAAE,SAAF,KAAgB;cACnB,KAAA,GAAQ,EAAA,CAAG;;cAEX,KAAA,GAAQ,CAAA,CAAE;WAGZ;QACC,MAAA,GAAS,IAAA,CAAK,QAAL,CAAc,IAAI;QAC3B,EAAA,CAAG,MAAH,GAAY,EAAA,CAAG;QACf,EAAA,CAAG,IAAH,GAAU,UAAA,CAAW,QAAX,CAAoB;QAC9B,EAAA,CAAG,IAAH,GAAU,UAAA,CAAW,QAAX,CAAoB;QAC9B,CAAA,GAAI;QACJ,IAAI,CAAA,CAAE,SAAF,KAAgB;cACnB,KAAA,GAAQ,EAAA,CAAG;;cAEX,KAAA,GAAQ,CAAA,CAAE;;IAGZ,IAAI,KAAA,KAAU,IAAV,IAAkB,KAAA,CAAM,MAAN,IAAgB,CAAlC,IAAuC,KAAA,CAAM,GAAN,CAAU,CAAV,GAAc,EAAA,CAAG,CAAxD,IAA6D,CAAA,CAAE,GAAF,CAAM,CAAN,GAAU,EAAA,CAAG,GAC9E;QACC,IAAI,QAAQ,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,OAAO,EAAA,CAAG;QAC9C,IAAI,KAAK,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,GAAG,EAAA,CAAG;QACvC,IAAK,KAAA,KAAU,EAAX,IAAmB,CAAA,CAAE,SAAF,KAAgB,CAAnC,IAA0C,KAAA,CAAM,SAAN,KAAoB,CAA9D,IAAoE,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,IAAI,UAAA,CAAW,OAAf,CAAuB,OAAO,EAAA,CAAG,IAAI,KAAA,CAAM,KAAK,IAAI,UAAA,CAAW,OAAf,CAAuB,IAAI,EAAA,CAAG,IAAI,CAAA,CAAE,MAChM;YACC,IAAI,QAAQ,IAAA,CAAK,QAAL,CAAc,OAAO;YACjC,IAAA,CAAK,OAAL,CAAa,QAAQ,OAAO,CAAA,CAAE;;;IAGhC,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,QAA7B,GAAwC,UAAU,CAAG,EAAA,IACrD;IACC,IAAI,CAAA,CAAE,MAAF,GAAW,GACf;QACC,IAAI,SAAS,IAAA,CAAK,YAAL;QACb,MAAA,CAAO,MAAP,GAAiB,CAAA,CAAE,SAAF,KAAgB;QACjC,IAAI,QAAQ,IAAI,UAAA,CAAW,KAAf;QACZ,MAAA,CAAO,GAAP,GAAa;QACb,KAAA,CAAM,GAAN,GAAY,MAAA,CAAO;QAEnB,KAAA,CAAM,EAAN,CAAS,CAAT,GAAa,EAAA,CAAG;QAChB,KAAA,CAAM,EAAN,CAAS,CAAT,GAAa,EAAA,CAAG;QAChB,IAAI,UAAA,CAAW;cAAS,KAAA,CAAM,EAAN,CAAS,CAAT,GAAa,EAAA,CAAG;QACxC,KAAA,CAAM,IAAN,GAAa;QACb,KAAA,CAAM,IAAN,GAAa;QACb,IAAI,CAAC,MAAA,CAAO;cACX,IAAA,CAAK,YAAL,CAAkB,GAAG;QACtB,CAAA,CAAE,MAAF,GAAW,MAAA,CAAO;QAElB,OAAO;WAGR;QACC,IAAI,SAAS,IAAA,CAAK,UAAL,CAAgB,CAAA,CAAE;QAE/B,IAAI,KAAK,MAAA,CAAO;QAChB,IAAI,UAAW,CAAA,CAAE,IAAF,KAAW,UAAA,CAAW,QAAX,CAAoB;QAC9C,IAAI,OAAA,IAAW,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAI,EAAA,CAAG;cACnD,OAAO;cACH,IAAI,CAAC,OAAD,IAAY,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAI,EAAA,CAAG,IAAH,CAAQ;cAC9D,OAAO,EAAA,CAAG;QACX,IAAI,QAAQ,IAAI,UAAA,CAAW,KAAf;QACZ,KAAA,CAAM,GAAN,GAAY,MAAA,CAAO;QAEnB,KAAA,CAAM,EAAN,CAAS,CAAT,GAAa,EAAA,CAAG;QAChB,KAAA,CAAM,EAAN,CAAS,CAAT,GAAa,EAAA,CAAG;QAChB,IAAI,UAAA,CAAW;cAAS,KAAA,CAAM,EAAN,CAAS,CAAT,GAAa,EAAA,CAAG;QACxC,KAAA,CAAM,IAAN,GAAa;QACb,KAAA,CAAM,IAAN,GAAa,EAAA,CAAG;QAChB,KAAA,CAAM,IAAN,CAAW,IAAX,GAAkB;QAClB,EAAA,CAAG,IAAH,GAAU;QACV,IAAI;cACH,MAAA,CAAO,GAAP,GAAa;QACd,OAAO;;;AAIT,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,YAA7B,GAA4C,UAAU,GACtD;IACC,IAAI,SAAS,IAAA,CAAK,UAAL,CAAgB,CAAA,CAAE;IAC/B,IAAI,CAAA,CAAE,IAAF,KAAW,UAAA,CAAW,QAAX,CAAoB,QACnC;QACC,OAAO,MAAA,CAAO;WAGf;QACC,OAAO,MAAA,CAAO,GAAP,CAAW;;;AAIpB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,UAA7B,GAA0C,UAAU,GAAK,EAAA,KACzD;IACC,IAAI,MAAM,IAAI,UAAA,CAAW,OAAf,CAAuB,GAAA,CAAI;IAErC,GAAA,CAAI,KAAJ,CAAU,CAAV,GAAc,GAAA,CAAI,KAAJ,CAAU;IACxB,GAAA,CAAI,KAAJ,CAAU,CAAV,GAAc,GAAA,CAAI,KAAJ,CAAU;IACxB,IAAI,UAAA,CAAW;UAAS,GAAA,CAAI,KAAJ,CAAU,CAAV,GAAc,GAAA,CAAI,KAAJ,CAAU;IAEhD,GAAA,CAAI,KAAJ,CAAU,CAAV,GAAc,GAAA,CAAI;IAClB,GAAA,CAAI,KAAJ,CAAU,CAAV,GAAc,GAAA,CAAI;IAClB,IAAI,UAAA,CAAW;UAAS,GAAA,CAAI,KAAJ,CAAU,CAAV,GAAc,GAAA,CAAI;;AAG3C,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,mBAA7B,GAAmD,UAAU,KAAO,EAAA,KAAO,EAAA,KAAO,EAAA,OAClF;IACC,IAAI;IACJ,IAAI,KAAA,GAAQ,OACZ;QACC,GAAA,GAAM;QACN,KAAA,GAAQ;QACR,KAAA,GAAQ;;IAET,IAAI,KAAA,GAAQ,OACZ;QACC,GAAA,GAAM;QACN,KAAA,GAAQ;QACR,KAAA,GAAQ;;IAET,OAAQ,KAAA,GAAQ,KAAT,IAAoB,KAAA,GAAQ;;AAGpC,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,YAA7B,GAA4C,UAAU,CAAG,EAAA,QACzD;IACC,IAAI,KAAK,CAAA,CAAE;IACX,IAAI,OAAO;IACX,OAAO,EAAA,KAAO,MACd;QACC,IAAI,EAAA,CAAG,MAAH,IAAa,CAAb,IAAkB,EAAA,CAAG,SAAH,KAAiB,GACvC;YACC,IAAI,IAAA,KAAS;kBACZ,IAAA,GAAO;kBACH,IAAI,IAAA,CAAK,MAAL,KAAgB,EAAA,CAAG;kBAC3B,IAAA,GAAO;;QAET,EAAA,GAAK,EAAA,CAAG;;IAGT,IAAI,IAAA,KAAS,MACb;QACC,MAAA,CAAO,SAAP,GAAmB;QACnB,MAAA,CAAO,MAAP,GAAgB;WAGjB;QACC,MAAA,CAAO,SAAP,GAAmB,IAAA,CAAK,UAAL,CAAgB,IAAA,CAAK;QACxC,MAAA,CAAO,MAAP,GAAgB,CAAC,MAAA,CAAO,SAAP,CAAiB;;;AAIpC,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,KAA7B,GAAqC,UAAU,GAAK,EAAA,KACpD;IACC,IAAI,GAAA,CAAI,CAAJ,KAAU,GAAA,CAAI;UACjB,OAAO,UAAA,CAAW,WAAX,CAAuB;;UAE9B,QAAQ,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,MAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;;AAGxC,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,eAA7B,GAA+C,UAAU,MAAQ,EAAA,QACjE;IACC,IAAI,IAAI,MAAA,CAAO;IACf,OAAQ,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,CAAA,CAAE,IAAI,MAAA,CAAO,GAA5C,IAAqD,CAAA,KAAM;UACjE,CAAA,GAAI,CAAA,CAAE;IACP,IAAI,OAAO,IAAA,CAAK,GAAL,CAAS,IAAA,CAAK,KAAL,CAAW,MAAA,CAAO,IAAI,CAAA,CAAE;IAC5C,CAAA,GAAI,MAAA,CAAO;IACX,OAAQ,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,CAAA,CAAE,IAAI,MAAA,CAAO,GAA5C,IAAqD,CAAA,KAAM;UACjE,CAAA,GAAI,CAAA,CAAE;IACP,IAAI,OAAO,IAAA,CAAK,GAAL,CAAS,IAAA,CAAK,KAAL,CAAW,MAAA,CAAO,IAAI,CAAA,CAAE;IAC5C,CAAA,GAAI,MAAA,CAAO;IACX,OAAQ,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,CAAA,CAAE,IAAI,MAAA,CAAO,GAA5C,IAAqD,CAAA,KAAM;UACjE,CAAA,GAAI,CAAA,CAAE;IACP,IAAI,OAAO,IAAA,CAAK,GAAL,CAAS,IAAA,CAAK,KAAL,CAAW,MAAA,CAAO,IAAI,CAAA,CAAE;IAC5C,CAAA,GAAI,MAAA,CAAO;IACX,OAAQ,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,CAAA,CAAE,IAAI,MAAA,CAAO,GAA5C,IAAqD,CAAA,KAAM;UACjE,CAAA,GAAI,CAAA,CAAE;IACP,IAAI,OAAO,IAAA,CAAK,GAAL,CAAS,IAAA,CAAK,KAAL,CAAW,MAAA,CAAO,IAAI,CAAA,CAAE;IAE5C,IAAI,IAAA,CAAK,GAAL,CAAS,MAAM,KAAf,KAAyB,IAAA,CAAK,GAAL,CAAS,MAAM,KAAxC,IAAiD,IAAA,CAAK,GAAL,CAAS,MAAM,KAAf,KAAyB,IAAA,CAAK,GAAL,CAAS,MAAM,OAC7F;QACC,OAAO,IAAA,CAAK,IAAL,CAAU,OAAV,GAAoB;WAG5B;QACC,OAAQ,IAAA,IAAQ,IAAR,IAAgB,IAAA,IAAQ,IAAzB,IAAmC,IAAA,IAAQ,IAAR,IAAgB,IAAA,IAAQ;;;AAIpE,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,WAA7B,GAA2C,UAAU,IACrD;;;IACC,IAAI,OAAO;IACX,IAAI,IAAI,EAAA,CAAG;IACX,OAAO,CAAA,KAAM,IACb;QACC,IAAI,CAAA,CAAE,EAAF,CAAK,CAAL,GAAS,EAAA,CAAG,EAAH,CAAM,GACnB;YACC,EAAA,GAAK;YACL,IAAA,GAAO;eAEH,IAAI,CAAA,CAAE,EAAF,CAAK,CAAL,KAAW,EAAA,CAAG,EAAH,CAAM,CAAjB,IAAsB,CAAA,CAAE,EAAF,CAAK,CAAL,IAAU,EAAA,CAAG,EAAH,CAAM,GAC/C;YACC,IAAI,CAAA,CAAE,EAAF,CAAK,CAAL,GAAS,EAAA,CAAG,EAAH,CAAM,GACnB;gBACC,IAAA,GAAO;gBACP,EAAA,GAAK;mBAGN;gBACC,IAAI,CAAA,CAAE,IAAF,KAAW,EAAX,IAAiB,CAAA,CAAE,IAAF,KAAW;sBAC/B,IAAA,GAAO;;;QAGV,CAAA,GAAI,CAAA,CAAE;;IAEP,IAAI,IAAA,KAAS,MACb;QAEC,OAAO,IAAA,KAAS,GAChB;YACC,IAAI,CAACA,MAAA,CAAK,eAAL,CAAqB,GAAG;kBAC5B,EAAA,GAAK;YACN,IAAA,GAAO,IAAA,CAAK;YACZ,OAAO,UAAA,CAAW,MAAX,CAAkB,aAAlB,CAAgC,IAAA,CAAK,IAAI,EAAA,CAAG;kBAClD,IAAA,GAAO,IAAA,CAAK;;;IAGf,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,eAA7B,GAA+C,UAAU,OAAS,EAAA,SAClE;IAEC,IAAI,OAAA,CAAQ,QAAR,KAAqB;UACxB,OAAA,CAAQ,QAAR,GAAmB,IAAA,CAAK,WAAL,CAAiB,OAAA,CAAQ;IAC7C,IAAI,OAAA,CAAQ,QAAR,KAAqB;UACxB,OAAA,CAAQ,QAAR,GAAmB,IAAA,CAAK,WAAL,CAAiB,OAAA,CAAQ;IAC7C,IAAI,OAAO,OAAA,CAAQ;IACnB,IAAI,OAAO,OAAA,CAAQ;IACnB,IAAI,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,IAAA,CAAK,EAAL,CAAQ;UACvB,OAAO;UACH,IAAI,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,IAAA,CAAK,EAAL,CAAQ;UAC5B,OAAO;UACH,IAAI,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,IAAA,CAAK,EAAL,CAAQ;UAC5B,OAAO;UACH,IAAI,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,IAAA,CAAK,EAAL,CAAQ;UAC5B,OAAO;UACH,IAAI,IAAA,CAAK,IAAL,KAAc;UACtB,OAAO;UACH,IAAI,IAAA,CAAK,IAAL,KAAc;UACtB,OAAO;UACH,IAAI,IAAA,CAAK,eAAL,CAAqB,MAAM;UACnC,OAAO;;UAEP,OAAO;;AAGT,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,qBAA7B,GAAqD,UAAU,OAAS,EAAA,SACxE;IACC,GAAG;QACF,OAAA,GAAU,OAAA,CAAQ;QAClB,IAAI,OAAA,KAAY;cACf,OAAO;aAEF,OAAA,KAAY;IACnB,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,SAA7B,GAAyC,UAAU,KACnD;;;IACC,IAAI,SAAS,IAAA,CAAK,UAAL,CAAgB;IAC7B,OAAO,MAAA,KAAW,IAAA,CAAK,UAAL,CAAgB,MAAA,CAAO;UACxC,MAAA,GAASA,MAAA,CAAK,UAAL,CAAgB,MAAA,CAAO;IACjC,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,aAA7B,GAA6C,UAAU,EAAI,EAAA,IAC3D;IAEC,IAAI,UAAU,IAAA,CAAK,UAAL,CAAgB,EAAA,CAAG;IACjC,IAAI,UAAU,IAAA,CAAK,UAAL,CAAgB,EAAA,CAAG;IACjC,IAAI;IACJ,IAAI,IAAA,CAAK,qBAAL,CAA2B,SAAS;UACvC,YAAA,GAAe;UACX,IAAI,IAAA,CAAK,qBAAL,CAA2B,SAAS;UAC5C,YAAA,GAAe;;UAEf,YAAA,GAAe,IAAA,CAAK,eAAL,CAAqB,SAAS;IAK9C,IAAI,SAAS,OAAA,CAAQ;IACrB,IAAI,QAAQ,MAAA,CAAO;IACnB,IAAI,SAAS,OAAA,CAAQ;IACrB,IAAI,QAAQ,MAAA,CAAO;IAEnB,IAAI,EAAA,CAAG,IAAH,KAAY,UAAA,CAAW,QAAX,CAAoB,QACpC;QACC,IAAI,EAAA,CAAG,IAAH,KAAY,UAAA,CAAW,QAAX,CAAoB,QACpC;YAEC,IAAA,CAAK,kBAAL,CAAwB;YACxB,MAAA,CAAO,IAAP,GAAc;YACd,MAAA,CAAO,IAAP,GAAc;YACd,KAAA,CAAM,IAAN,GAAa;YACb,KAAA,CAAM,IAAN,GAAa;YACb,OAAA,CAAQ,GAAR,GAAc;eAGf;YAEC,KAAA,CAAM,IAAN,GAAa;YACb,MAAA,CAAO,IAAP,GAAc;YACd,MAAA,CAAO,IAAP,GAAc;YACd,KAAA,CAAM,IAAN,GAAa;YACb,OAAA,CAAQ,GAAR,GAAc;;WAIhB;QACC,IAAI,EAAA,CAAG,IAAH,KAAY,UAAA,CAAW,QAAX,CAAoB,SACpC;YAEC,IAAA,CAAK,kBAAL,CAAwB;YACxB,KAAA,CAAM,IAAN,GAAa;YACb,KAAA,CAAM,IAAN,GAAa;YACb,MAAA,CAAO,IAAP,GAAc;YACd,MAAA,CAAO,IAAP,GAAc;eAGf;YAEC,KAAA,CAAM,IAAN,GAAa;YACb,MAAA,CAAO,IAAP,GAAc;YACd,MAAA,CAAO,IAAP,GAAc;YACd,KAAA,CAAM,IAAN,GAAa;;;IAGf,OAAA,CAAQ,QAAR,GAAmB;IACnB,IAAI,YAAA,KAAiB,SACrB;QACC,IAAI,OAAA,CAAQ,SAAR,KAAsB;cACzB,OAAA,CAAQ,SAAR,GAAoB,OAAA,CAAQ;QAC7B,OAAA,CAAQ,MAAR,GAAiB,OAAA,CAAQ;;IAE1B,OAAA,CAAQ,GAAR,GAAc;IACd,OAAA,CAAQ,QAAR,GAAmB;IACnB,OAAA,CAAQ,SAAR,GAAoB;IACpB,IAAI,QAAQ,EAAA,CAAG;IACf,IAAI,cAAc,EAAA,CAAG;IACrB,EAAA,CAAG,MAAH,GAAY,CAAC;IAEb,EAAA,CAAG,MAAH,GAAY,CAAC;IACb,IAAI,IAAI,IAAA,CAAK;IACb,OAAO,CAAA,KAAM,MACb;QACC,IAAI,CAAA,CAAE,MAAF,KAAa,aACjB;YACC,CAAA,CAAE,MAAF,GAAW;YACX,CAAA,CAAE,IAAF,GAAS,EAAA,CAAG;YACZ;;QAED,CAAA,GAAI,CAAA,CAAE;;IAEP,OAAA,CAAQ,GAAR,GAAc,OAAA,CAAQ;;AAGvB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,kBAA7B,GAAkD,UAAU,IAC5D;IACC,IAAI,EAAA,KAAO;UACV;IACD,IAAI;IACJ,IAAI;IACJ,GAAA,GAAM;IACN,GAAG;QACF,GAAA,GAAM,GAAA,CAAI;QACV,GAAA,CAAI,IAAJ,GAAW,GAAA,CAAI;QACf,GAAA,CAAI,IAAJ,GAAW;QACX,GAAA,GAAM;aAEA,GAAA,KAAQ;;AAGhB,UAAA,CAAW,OAAX,CAAmB,SAAnB,GAA+B,UAAU,KAAO,EAAA,OAChD;IACC,IAAI,OAAO,KAAA,CAAM;IACjB,KAAA,CAAM,IAAN,GAAa,KAAA,CAAM;IACnB,KAAA,CAAM,IAAN,GAAa;;AAGd,UAAA,CAAW,OAAX,CAAmB,eAAnB,GAAqC,UAAU,KAAO,EAAA,OACtD;IACC,IAAI,SAAS,KAAA,CAAM;IACnB,KAAA,CAAM,MAAN,GAAe,KAAA,CAAM;IACrB,KAAA,CAAM,MAAN,GAAe;;AAGhB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,cAA7B,GAA8C,UAAU,EAAI,EAAA,EAAI,EAAA,IAChE;IAGC,IAAI,iBAAkB,EAAA,CAAG,MAAH,IAAa;IACnC,IAAI,iBAAkB,EAAA,CAAG,MAAH,IAAa;IAEnC,IAAI,UAAA,CAAW;UACd,IAAA,CAAK,IAAL,CAAU,IAAI,IAAI;IAEnB,IAAI,UAAA,CAAW,WACf;QAEC,IAAI,EAAA,CAAG,SAAH,KAAiB,CAAjB,IAAsB,EAAA,CAAG,SAAH,KAAiB,GAC3C;YAGC,IAAI,EAAA,CAAG,SAAH,KAAiB,CAAjB,IAAsB,EAAA,CAAG,SAAH,KAAiB;kBAAG;kBAEzC,IAAI,EAAA,CAAG,OAAH,KAAe,EAAA,CAAG,OAAlB,IACR,EAAA,CAAG,SAAH,KAAiB,EAAA,CAAG,SADZ,IACyB,IAAA,CAAK,UAAL,KAAoB,UAAA,CAAW,QAAX,CAAoB,SAC1E;gBACC,IAAI,EAAA,CAAG,SAAH,KAAiB,GACrB;oBACC,IAAI,gBACJ;wBACC,IAAA,CAAK,QAAL,CAAc,IAAI;wBAClB,IAAI;8BACH,EAAA,CAAG,MAAH,GAAY,CAAC;;uBAIhB;oBACC,IAAI,gBACJ;wBACC,IAAA,CAAK,QAAL,CAAc,IAAI;wBAClB,IAAI;8BACH,EAAA,CAAG,MAAH,GAAY,CAAC;;;mBAIZ,IAAI,EAAA,CAAG,OAAH,KAAe,EAAA,CAAG,SAC3B;gBACC,IAAK,EAAA,CAAG,SAAH,KAAiB,CAAlB,IAAwB,IAAA,CAAK,GAAL,CAAS,EAAA,CAAG,QAAZ,KAAyB,CAAjD,KACF,IAAA,CAAK,UAAL,KAAoB,UAAA,CAAW,QAAX,CAAoB,OAAxC,IAAmD,EAAA,CAAG,QAAH,KAAgB,IACrE;oBACC,IAAA,CAAK,QAAL,CAAc,IAAI;oBAClB,IAAI;0BACH,EAAA,CAAG,MAAH,GAAY,CAAC;uBAEV,IAAK,EAAA,CAAG,SAAH,KAAiB,CAAlB,IAAyB,IAAA,CAAK,GAAL,CAAS,EAAA,CAAG,QAAZ,KAAyB,CAAlD,KACP,IAAA,CAAK,UAAL,KAAoB,UAAA,CAAW,QAAX,CAAoB,OAAxC,IAAmD,EAAA,CAAG,QAAH,KAAgB,IACrE;oBACC,IAAA,CAAK,QAAL,CAAc,IAAI;oBAClB,IAAI;0BACH,EAAA,CAAG,MAAH,GAAY,CAAC;;;YAGhB;;;IAKF,IAAI,EAAA,CAAG,OAAH,KAAe,EAAA,CAAG,SACtB;QACC,IAAI,IAAA,CAAK,iBAAL,CAAuB,KAC3B;YACC,IAAI,eAAe,EAAA,CAAG;YACtB,EAAA,CAAG,OAAH,GAAa,EAAA,CAAG;YAChB,EAAA,CAAG,OAAH,GAAa;eAGd;YACC,IAAI,EAAA,CAAG,OAAH,GAAa,EAAA,CAAG,SAAhB,KAA8B;kBACjC,EAAA,CAAG,OAAH,GAAa,CAAC,EAAA,CAAG;;kBAEjB,EAAA,CAAG,OAAH,IAAc,EAAA,CAAG;YAClB,IAAI,EAAA,CAAG,OAAH,GAAa,EAAA,CAAG,SAAhB,KAA8B;kBACjC,EAAA,CAAG,OAAH,GAAa,CAAC,EAAA,CAAG;;kBAEjB,EAAA,CAAG,OAAH,IAAc,EAAA,CAAG;;WAIpB;QACC,IAAI,CAAC,IAAA,CAAK,iBAAL,CAAuB;cAC3B,EAAA,CAAG,QAAH,IAAe,EAAA,CAAG;;cAElB,EAAA,CAAG,QAAH,GAAe,EAAA,CAAG,QAAH,KAAgB,CAAjB,GAAsB,IAAI;QACzC,IAAI,CAAC,IAAA,CAAK,iBAAL,CAAuB;cAC3B,EAAA,CAAG,QAAH,IAAe,EAAA,CAAG;;cAElB,EAAA,CAAG,QAAH,GAAe,EAAA,CAAG,QAAH,KAAgB,CAAjB,GAAsB,IAAI;;IAE1C,IAAI,YAAY,YAAY,aAAa;IACzC,IAAI,EAAA,CAAG,OAAH,KAAe,UAAA,CAAW,QAAX,CAAoB,WACvC;QACC,UAAA,GAAa,IAAA,CAAK;QAClB,WAAA,GAAc,IAAA,CAAK;WAGpB;QACC,UAAA,GAAa,IAAA,CAAK;QAClB,WAAA,GAAc,IAAA,CAAK;;IAEpB,IAAI,EAAA,CAAG,OAAH,KAAe,UAAA,CAAW,QAAX,CAAoB,WACvC;QACC,UAAA,GAAa,IAAA,CAAK;QAClB,WAAA,GAAc,IAAA,CAAK;WAGpB;QACC,UAAA,GAAa,IAAA,CAAK;QAClB,WAAA,GAAc,IAAA,CAAK;;IAEpB,IAAI,MAAM;IACV,QAAQ;QAER,KAAK,UAAA,CAAW,YAAX,CAAwB;YAC5B,IAAA,GAAO,EAAA,CAAG;YACV;QACD,KAAK,UAAA,CAAW,YAAX,CAAwB;YAC5B,IAAA,GAAO,CAAC,EAAA,CAAG;YACX;QACD;YACC,IAAA,GAAO,IAAA,CAAK,GAAL,CAAS,EAAA,CAAG;YACnB;;IAED,QAAQ;QAER,KAAK,UAAA,CAAW,YAAX,CAAwB;YAC5B,IAAA,GAAO,EAAA,CAAG;YACV;QACD,KAAK,UAAA,CAAW,YAAX,CAAwB;YAC5B,IAAA,GAAO,CAAC,EAAA,CAAG;YACX;QACD;YACC,IAAA,GAAO,IAAA,CAAK,GAAL,CAAS,EAAA,CAAG;YACnB;;IAED,IAAI,cAAA,IAAkB,gBACtB;QACC,IAAK,IAAA,KAAS,CAAT,IAAc,IAAA,KAAS,CAAxB,IAA+B,IAAA,KAAS,CAAT,IAAc,IAAA,KAAS,CAAtD,IACF,EAAA,CAAG,OAAH,KAAe,EAAA,CAAG,OAAlB,IAA6B,IAAA,CAAK,UAAL,KAAoB,UAAA,CAAW,QAAX,CAAoB,OACvE;YACC,IAAA,CAAK,eAAL,CAAqB,IAAI,IAAI;eAG9B;YACC,IAAA,CAAK,QAAL,CAAc,IAAI;YAClB,IAAA,CAAK,QAAL,CAAc,IAAI;YAClB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,IAAI;YACjC,UAAA,CAAW,OAAX,CAAmB,eAAnB,CAAmC,IAAI;;WAGpC,IAAI,gBACT;QACC,IAAI,IAAA,KAAS,CAAT,IAAc,IAAA,KAAS,GAC3B;YACC,IAAA,CAAK,QAAL,CAAc,IAAI;YAClB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,IAAI;YACjC,UAAA,CAAW,OAAX,CAAmB,eAAnB,CAAmC,IAAI;;WAGpC,IAAI,gBACT;QACC,IAAI,IAAA,KAAS,CAAT,IAAc,IAAA,KAAS,GAC3B;YACC,IAAA,CAAK,QAAL,CAAc,IAAI;YAClB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,IAAI;YACjC,UAAA,CAAW,OAAX,CAAmB,eAAnB,CAAmC,IAAI;;WAGpC,KAAK,IAAA,KAAS,CAAT,IAAc,IAAA,KAAS,OAAO,IAAA,KAAS,CAAT,IAAc,IAAA,KAAS,IAC/D;QAEC,IAAI,OAAO;QACX,QAAQ;YAER,KAAK,UAAA,CAAW,YAAX,CAAwB;gBAC5B,KAAA,GAAQ,EAAA,CAAG;gBACX;YACD,KAAK,UAAA,CAAW,YAAX,CAAwB;gBAC5B,KAAA,GAAQ,CAAC,EAAA,CAAG;gBACZ;YACD;gBACC,KAAA,GAAQ,IAAA,CAAK,GAAL,CAAS,EAAA,CAAG;gBACpB;;QAED,QAAQ;YAER,KAAK,UAAA,CAAW,YAAX,CAAwB;gBAC5B,KAAA,GAAQ,EAAA,CAAG;gBACX;YACD,KAAK,UAAA,CAAW,YAAX,CAAwB;gBAC5B,KAAA,GAAQ,CAAC,EAAA,CAAG;gBACZ;YACD;gBACC,KAAA,GAAQ,IAAA,CAAK,GAAL,CAAS,EAAA,CAAG;gBACpB;;QAED,IAAI,EAAA,CAAG,OAAH,KAAe,EAAA,CAAG,SACtB;YACC,IAAA,CAAK,eAAL,CAAqB,IAAI,IAAI;eAEzB,IAAI,IAAA,KAAS,CAAT,IAAc,IAAA,KAAS;cAC/B,QAAQ,IAAA,CAAK;YAEb,KAAK,UAAA,CAAW,QAAX,CAAoB;gBACxB,IAAI,KAAA,GAAQ,CAAR,IAAa,KAAA,GAAQ;sBACxB,IAAA,CAAK,eAAL,CAAqB,IAAI,IAAI;gBAC9B;YACD,KAAK,UAAA,CAAW,QAAX,CAAoB;gBACxB,IAAI,KAAA,IAAS,CAAT,IAAc,KAAA,IAAS;sBAC1B,IAAA,CAAK,eAAL,CAAqB,IAAI,IAAI;gBAC9B;YACD,KAAK,UAAA,CAAW,QAAX,CAAoB;gBACxB,IAAM,EAAA,CAAG,OAAH,KAAe,UAAA,CAAW,QAAX,CAAoB,MAApC,IAAgD,KAAA,GAAQ,CAAxD,IAA+D,KAAA,GAAQ,CAAxE,IACD,EAAA,CAAG,OAAH,KAAe,UAAA,CAAW,QAAX,CAAoB,SAApC,IAAmD,KAAA,IAAS,CAA5D,IAAmE,KAAA,IAAS;sBAC7E,IAAA,CAAK,eAAL,CAAqB,IAAI,IAAI;gBAC9B;YACD,KAAK,UAAA,CAAW,QAAX,CAAoB;gBACxB,IAAA,CAAK,eAAL,CAAqB,IAAI,IAAI;gBAC7B;;;cAGD,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,IAAI;;;AAIpC,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,aAA7B,GAA6C,UAAU,GACvD;IACC,IAAI,UAAU,CAAA,CAAE;IAChB,IAAI,UAAU,CAAA,CAAE;IAChB,IAAI,OAAA,KAAY,IAAZ,IAAoB,OAAA,KAAY,IAAhC,IAAyC,CAAA,KAAM,IAAA,CAAK;UACvD;IAED,IAAI,OAAA,KAAY;UACf,OAAA,CAAQ,SAAR,GAAoB;;UAEpB,IAAA,CAAK,aAAL,GAAqB;IACtB,IAAI,OAAA,KAAY;UACf,OAAA,CAAQ,SAAR,GAAoB;IACrB,CAAA,CAAE,SAAF,GAAc;IACd,CAAA,CAAE,SAAF,GAAc;;AAGf,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,kBAA7B,GAAkD,YAClD;;;IACC,IAAI,WAAW;IACf,OAAO,IAAA,CAAK,cAAL,CAAoB,WAC3B;QACCA,MAAA,CAAK,iBAAL,CAAuB,QAAA,CAAS;;;AAIlC,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,gBAA7B,GAAgD,UAAU,QAAU,EAAA,MACpE;IACC,IAAI,QAAA,CAAS,GAAT,CAAa,CAAb,GAAiB,QAAA,CAAS,GAAT,CAAa,GAClC;QACC,IAAA,CAAK,IAAL,GAAY,QAAA,CAAS,GAAT,CAAa;QACzB,IAAA,CAAK,KAAL,GAAa,QAAA,CAAS,GAAT,CAAa;QAC1B,IAAA,CAAK,GAAL,GAAW,UAAA,CAAW,SAAX,CAAqB;WAGjC;QACC,IAAA,CAAK,IAAL,GAAY,QAAA,CAAS,GAAT,CAAa;QACzB,IAAA,CAAK,KAAL,GAAa,QAAA,CAAS,GAAT,CAAa;QAC1B,IAAA,CAAK,GAAL,GAAW,UAAA,CAAW,SAAX,CAAqB;;;AAIlC,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,iBAA7B,GAAiD,UAAU,UAC3D;;;IACC,IAAI,OAAO;QACV,KAAK,IADK;QAEV,MAAM,IAFI;QAGV,OAAO;;IAGR,IAAA,CAAK,gBAAL,CAAsB,UAAU;IAChC,IAAI,MAAM,IAAA,CAAK;IACf,IAAI,WAAW,IAAA,CAAK;IACpB,IAAI,YAAY,IAAA,CAAK;IAErB,IAAI,SAAS,QAAA,CAAS,SAAT,KAAuB;IAEpC,IAAI,YAAY,UACf,WAAW;IACZ,OAAO,SAAA,CAAU,SAAV,KAAwB,IAAxB,IAAgC,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,SAAA,CAAU;UACpF,SAAA,GAAY,SAAA,CAAU;IACvB,IAAI,SAAA,CAAU,SAAV,KAAwB;UAC3B,QAAA,GAAW,IAAA,CAAK,aAAL,CAAmB;IAE/B,IAAI,UAAU,IAAA,CAAK;IACnB,IAAI,OAAA,KAAY,MAChB;QAEC,IAAI,GAAA,KAAQ,UAAA,CAAW,SAAX,CAAqB,cACjC;YACC,OAAO,OAAA,KAAY,IAAZ,IAAoB,OAAA,CAAQ,CAAR,IAAa,QAAA,CAAS,GAAT,CAAa,GACrD;gBACC,OAAA,GAAU,OAAA,CAAQ;;YAEnB,IAAI,OAAA,KAAY,IAAZ,IAAoB,OAAA,CAAQ,CAAR,IAAa,SAAA,CAAU,GAAV,CAAc,GACnD;gBACC,OAAA,GAAU;;eAIZ;YACC,OAAO,OAAA,CAAQ,IAAR,KAAiB,IAAjB,IAAyB,OAAA,CAAQ,IAAR,CAAa,CAAb,GAAiB,QAAA,CAAS,GAAT,CAAa,GAC9D;gBACC,OAAA,GAAU,OAAA,CAAQ;;YAEnB,IAAI,OAAA,CAAQ,CAAR,IAAa,SAAA,CAAU,GAAV,CAAc,GAC/B;gBACC,OAAA,GAAU;;;;IAIb,IAAI,MAAM;IACV,WACA;QACC,IAAI,aAAc,QAAA,KAAa;QAC/B,IAAI,IAAIA,MAAA,CAAK,YAAL,CAAkB,UAAU;QACpC,OAAO,CAAA,KAAM,MACb;YAIC,IAAI,OAAA,KAAY,MAChB;gBACC,IAAI,GAAA,KAAQ,UAAA,CAAW,SAAX,CAAqB,cACjC;oBACC,OAAO,OAAA,KAAY,IAAZ,IAAoB,OAAA,CAAQ,CAAR,GAAY,CAAA,CAAE,IAAF,CAAO,GAC9C;wBACC,IAAI,QAAA,CAAS,MAAT,IAAmB,CAAnB,IAAwB,CAAC,QAC7B;4BACCA,MAAA,CAAK,QAAL,CAAc,UAAU,IAAI,UAAA,CAAW,OAAf,CAAuB,OAAA,CAAQ,GAAG,QAAA,CAAS,GAAT,CAAa;;wBAExE,OAAA,GAAU,OAAA,CAAQ;;uBAIpB;oBACC,OAAO,OAAA,KAAY,IAAZ,IAAoB,OAAA,CAAQ,CAAR,GAAY,CAAA,CAAE,IAAF,CAAO,GAC9C;wBACC,IAAI,QAAA,CAAS,MAAT,IAAmB,CAAnB,IAAwB,CAAC,QAC7B;4BACCA,MAAA,CAAK,QAAL,CAAc,UAAU,IAAI,UAAA,CAAW,OAAf,CAAuB,OAAA,CAAQ,GAAG,QAAA,CAAS,GAAT,CAAa;;wBAExE,OAAA,GAAU,OAAA,CAAQ;;;;YAKrB,IAAK,GAAA,KAAQ,UAAA,CAAW,SAAX,CAAqB,YAA7B,IAA6C,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,SAAzD,IAAwE,GAAA,KAAQ,UAAA,CAAW,SAAX,CAAqB,YAA7B,IAA6C,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,UACpI;gBACC;;YAKD,IAAI,CAAA,CAAE,IAAF,CAAO,CAAP,KAAa,QAAA,CAAS,GAAT,CAAa,CAA1B,IAA+B,QAAA,CAAS,SAAT,KAAuB,IAAtD,IAA8D,CAAA,CAAE,EAAF,GAAO,QAAA,CAAS,SAAT,CAAmB;kBAC3F;YAED,IAAI,QAAA,CAAS,MAAT,IAAmB,CAAnB,IAAwB,CAAC,QAC7B;gBACC,IAAI,UAAA,CAAW,SACf;oBACC,IAAI,GAAA,KAAQ,UAAA,CAAW,SAAX,CAAqB;0BAChCA,MAAA,CAAK,IAAL,CAAU,CAAA,CAAE,MAAM,UAAU;;0BACxBA,MAAA,CAAK,IAAL,CAAU,CAAA,CAAE,MAAM,GAAG;;gBAG3B,GAAA,GAAMA,MAAA,CAAK,QAAL,CAAc,UAAU,CAAA,CAAE;gBAChC,IAAI,YAAYA,MAAA,CAAK;gBACrB,OAAO,SAAA,KAAc,MACrB;oBACC,IAAI,SAAA,CAAU,MAAV,IAAoB,CAApB,IAAyBA,MAAA,CAAK,mBAAL,CAAyB,QAAA,CAAS,GAAT,CAAa,GAAG,QAAA,CAAS,GAAT,CAAa,GAAG,SAAA,CAAU,GAAV,CAAc,GAAG,SAAA,CAAU,GAAV,CAAc,IACrH;wBACC,IAAI,MAAMA,MAAA,CAAK,YAAL,CAAkB;wBAC5BA,MAAA,CAAK,OAAL,CAAa,KAAK,KAAK,SAAA,CAAU;;oBAElC,SAAA,GAAY,SAAA,CAAU;;gBAEvBA,MAAA,CAAK,YAAL,CAAkB,KAAK,QAAA,CAAS;;YAKjC,IAAI,CAAA,KAAM,QAAN,IAAkB,YACtB;gBACC,IAAI,QAAA,CAAS,MAAT,IAAmB,GACvB;oBACCA,MAAA,CAAK,eAAL,CAAqB,UAAU,UAAU,QAAA,CAAS;;gBAEnDA,MAAA,CAAK,aAAL,CAAmB;gBACnBA,MAAA,CAAK,aAAL,CAAmB;gBACnB;;YAGD,IAAI,GAAA,KAAQ,UAAA,CAAW,SAAX,CAAqB,cACjC;gBACC,IAAI,KAAK,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE,IAAF,CAAO,GAAG,QAAA,CAAS,IAAT,CAAc;gBACxDA,MAAA,CAAK,cAAL,CAAoB,UAAU,GAAG;mBAGlC;gBACC,IAAI,KAAK,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE,IAAF,CAAO,GAAG,QAAA,CAAS,IAAT,CAAc;gBACxDA,MAAA,CAAK,cAAL,CAAoB,GAAG,UAAU;;YAElC,IAAI,QAAQA,MAAA,CAAK,YAAL,CAAkB,GAAG;YACjCA,MAAA,CAAK,kBAAL,CAAwB,UAAU;YAClC,CAAA,GAAI;;QAIL,IAAI,QAAA,CAAS,SAAT,KAAuB,IAAvB,IAA+B,CAAC,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,QAAA,CAAS,YACjF;YACC;;QAGD,QAAA,GAAWA,MAAA,CAAK,iBAAL,CAAuB;QAClC,IAAI,QAAA,CAAS,MAAT,IAAmB,GACvB;YACCA,MAAA,CAAK,QAAL,CAAc,UAAU,QAAA,CAAS;;QAGlC,IAAA,GAAO;YACN,KAAK,GADC;YAEN,MAAM,QAFA;YAGN,OAAO;;QAGRA,MAAA,CAAK,gBAAL,CAAsB,UAAU;QAChC,GAAA,GAAM,IAAA,CAAK;QACX,QAAA,GAAW,IAAA,CAAK;QAChB,SAAA,GAAY,IAAA,CAAK;;IAIlB,IAAI,QAAA,CAAS,MAAT,IAAmB,CAAnB,IAAwB,GAAA,KAAQ,MACpC;QACC,GAAA,GAAM,IAAA,CAAK,YAAL,CAAkB;QACxB,IAAI,YAAY,IAAA,CAAK;QACrB,OAAO,SAAA,KAAc,MACrB;YACC,IAAI,SAAA,CAAU,MAAV,IAAoB,CAApB,IAAyBA,MAAA,CAAK,mBAAL,CAAyB,QAAA,CAAS,GAAT,CAAa,GAAG,QAAA,CAAS,GAAT,CAAa,GAAG,SAAA,CAAU,GAAV,CAAc,GAAG,SAAA,CAAU,GAAV,CAAc,IACrH;gBACC,IAAI,MAAMA,MAAA,CAAK,YAAL,CAAkB;gBAC5BA,MAAA,CAAK,OAAL,CAAa,KAAK,KAAK,SAAA,CAAU;;YAElC,SAAA,GAAY,SAAA,CAAU;;QAEvB,IAAA,CAAK,YAAL,CAAkB,KAAK,QAAA,CAAS;;IAGjC,IAAI,QAAA,CAAS,SAAT,KAAuB,MAC3B;QACC,IAAI,QAAA,CAAS,MAAT,IAAmB,GACvB;YACC,GAAA,GAAM,IAAA,CAAK,QAAL,CAAc,UAAU,QAAA,CAAS;YAEvC,QAAA,GAAW,IAAA,CAAK,iBAAL,CAAuB;YAClC,IAAI,QAAA,CAAS,SAAT,KAAuB,GAC3B;gBACC;;YAGD,IAAI,QAAQ,QAAA,CAAS;YACrB,IAAI,QAAQ,QAAA,CAAS;YACrB,IAAI,KAAA,KAAU,IAAV,IAAkB,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,QAAA,CAAS,GAAT,CAAa,CAAhD,IAAqD,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,QAAA,CAAS,GAAT,CAAa,CAAnF,IAAwF,KAAA,CAAM,SAAN,KAAoB,CAA5G,KAAkH,KAAA,CAAM,MAAN,IAAgB,CAAhB,IAAqB,KAAA,CAAM,IAAN,CAAW,CAAX,GAAe,KAAA,CAAM,GAAN,CAAU,CAA9C,IAAmD,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,UAAU,SACvN;gBACC,IAAI,MAAM,IAAA,CAAK,QAAL,CAAc,OAAO,QAAA,CAAS;gBACxC,IAAA,CAAK,OAAL,CAAa,KAAK,KAAK,QAAA,CAAS;mBAE5B,IAAI,KAAA,KAAU,IAAV,IAAkB,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,QAAA,CAAS,GAAT,CAAa,CAAhD,IAAqD,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,QAAA,CAAS,GAAT,CAAa,CAAnF,IAAwF,KAAA,CAAM,SAAN,KAAoB,CAA5G,IAAiH,KAAA,CAAM,MAAN,IAAgB,CAAjI,IAAsI,KAAA,CAAM,IAAN,CAAW,CAAX,GAAe,KAAA,CAAM,GAAN,CAAU,CAA/J,IAAoK,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,UAAU,QAC3N;gBACC,IAAI,MAAM,IAAA,CAAK,QAAL,CAAc,OAAO,QAAA,CAAS;gBACxC,IAAA,CAAK,OAAL,CAAa,KAAK,KAAK,QAAA,CAAS;;eAIlC;YACC,QAAA,GAAW,IAAA,CAAK,iBAAL,CAAuB;;WAIpC;QACC,IAAI,QAAA,CAAS,MAAT,IAAmB,GACvB;YACC,IAAA,CAAK,QAAL,CAAc,UAAU,QAAA,CAAS;;QAElC,IAAA,CAAK,aAAL,CAAmB;;;AAIrB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,YAA7B,GAA4C,UAAU,CAAG,EAAA,WACzD;IACC,OAAO,SAAA,KAAc,UAAA,CAAW,SAAX,CAAqB,YAAnC,GAAkD,CAAA,CAAE,YAAY,CAAA,CAAE;;AAG1E,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,QAA7B,GAAwC,UAAU,GAClD;IACC,OAAO,CAAA,KAAM,IAAN,IAAe,CAAA,CAAE,IAAF,CAAO,SAAP,KAAqB,CAApC,IAA2C,CAAA,CAAE,IAAF,CAAO,SAAP,KAAqB;;AAGxE,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,QAA7B,GAAwC,UAAU,CAAG,EAAA,GACrD;IACC,OAAQ,CAAA,KAAM,IAAN,IAAc,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY,CAA1B,IAA+B,CAAA,CAAE,SAAF,KAAgB;;AAGxD,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,cAA7B,GAA8C,UAAU,CAAG,EAAA,GAC3D;IACC,OAAQ,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY,CAAZ,IAAiB,CAAA,CAAE,SAAF,KAAgB;;AAG1C,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,aAA7B,GAA6C,UAAU,GACvD;IACC,IAAK,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,CAAA,CAAE,IAAF,CAAO,KAAK,CAAA,CAAE,IAA7C,IAAsD,CAAA,CAAE,IAAF,CAAO,SAAP,KAAqB,MAC/E;QACC,OAAO,CAAA,CAAE;WAGV;QACC,IAAK,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,CAAA,CAAE,IAAF,CAAO,KAAK,CAAA,CAAE,IAA7C,IAAsD,CAAA,CAAE,IAAF,CAAO,SAAP,KAAqB,MAC/E;YACC,OAAO,CAAA,CAAE;eAGV;YACC,OAAO;;;;AAKV,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,eAA7B,GAA+C,UAAU,GACzD;IAEC,IAAI,SAAS,IAAA,CAAK,aAAL,CAAmB;IAChC,IAAI,MAAA,KAAW,IAAX,IAAmB,MAAA,CAAO,MAAP,KAAkB,UAAA,CAAW,WAAX,CAAuB,IAA5D,IACD,MAAA,CAAO,SAAP,KAAqB,MAAA,CAAO,SAA7B,IAA2C,CAAC,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,SAClF;QACC,OAAO;;IAER,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,oBAA7B,GAAoD,UAAU,MAC9D;IACC,IAAI,IAAA,CAAK,aAAL,KAAuB;UAC1B,OAAO;IACR,IACA;QACC,IAAA,CAAK,kBAAL,CAAwB;QACxB,IAAI,IAAA,CAAK,eAAL,CAAqB,MAArB,KAAgC;cACnC,OAAO;QACR,IAAI,IAAA,CAAK,eAAL,CAAqB,MAArB,KAAgC,CAAhC,IAAqC,IAAA,CAAK,sBAAL;cACxC,IAAA,CAAK,oBAAL;;cAEA,OAAO;KAET,QAAO,MACP;QACC,IAAA,CAAK,aAAL,GAAqB;QACrB,IAAA,CAAK,eAAL,CAAqB,MAArB,GAA8B;QAC9B,UAAA,CAAW,KAAX,CAAiB;;IAElB,IAAA,CAAK,aAAL,GAAqB;IACrB,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,kBAA7B,GAAkD,UAAU,MAC5D;;;IACC,IAAI,IAAA,CAAK,aAAL,KAAuB;UAC1B;IAED,IAAI,IAAI,IAAA,CAAK;IAEb,IAAA,CAAK,aAAL,GAAqB;IACrB,OAAO,CAAA,KAAM,MACb;QACC,CAAA,CAAE,SAAF,GAAc,CAAA,CAAE;QAChB,CAAA,CAAE,SAAF,GAAc,CAAA,CAAE;QAChB,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,GAAG;QACtC,CAAA,GAAI,CAAA,CAAE;;IAGP,IAAI,aAAa;IACjB,OAAO,UAAA,IAAc,IAAA,CAAK,aAAL,KAAuB,MAC5C;QACC,UAAA,GAAa;QACb,CAAA,GAAIA,MAAA,CAAK;QACT,OAAO,CAAA,CAAE,SAAF,KAAgB,MACvB;YACC,IAAI,QAAQ,CAAA,CAAE;YACd,IAAI,KAAK,IAAI,UAAA,CAAW,OAAf;YAET,IAAI,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,KAAA,CAAM,IAAN,CAAW,GAC1B;gBACCA,MAAA,CAAK,cAAL,CAAoB,GAAG,OAAO;gBAC9B,IAAI,EAAA,CAAG,CAAH,GAAO,MACX;oBACC,EAAA,GAAK,IAAI,UAAA,CAAW,OAAf,CAAuB,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,GAAG,OAAO;;gBAE/D,IAAI,UAAU,IAAI,UAAA,CAAW,aAAf;gBACd,OAAA,CAAQ,KAAR,GAAgB;gBAChB,OAAA,CAAQ,KAAR,GAAgB;gBAEhB,OAAA,CAAQ,EAAR,CAAW,CAAX,GAAe,EAAA,CAAG;gBAClB,OAAA,CAAQ,EAAR,CAAW,CAAX,GAAe,EAAA,CAAG;gBAClB,IAAI,UAAA,CAAW;sBAAS,OAAA,CAAQ,EAAR,CAAW,CAAX,GAAe,EAAA,CAAG;gBAC1CA,MAAA,CAAK,eAAL,CAAqB,IAArB,CAA0B;gBAC1BA,MAAA,CAAK,kBAAL,CAAwB,GAAG;gBAC3B,UAAA,GAAa;;kBAGb,CAAA,GAAI;;QAEN,IAAI,CAAA,CAAE,SAAF,KAAgB;cACnB,CAAA,CAAE,SAAF,CAAY,SAAZ,GAAwB;;cAExB;;IAEF,IAAA,CAAK,aAAL,GAAqB;;AAGtB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,aAA7B,GAA6C,UAAU,OACvD;IACC,OAAQ,KAAA,CAAM,KAAN,CAAY,SAAZ,KAA0B,KAAA,CAAM,KAAjC,IAA4C,KAAA,CAAM,KAAN,CAAY,SAAZ,KAA0B,KAAA,CAAM;;AAGpF,UAAA,CAAW,OAAX,CAAmB,iBAAnB,GAAuC,UAAU,KAAO,EAAA,OACxD;IAGC,OAAQ,KAAA,CAAM,EAAN,CAAS,CAAT,GAAa,KAAA,CAAM,EAAN,CAAS;;AAG/B,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,sBAA7B,GAAsD,YACtD;;;IAIC,IAAA,CAAK,eAAL,CAAqB,IAArB,CAA0B,IAAA,CAAK;IAC/B,IAAA,CAAK,YAAL;IACA,IAAI,MAAM,IAAA,CAAK,eAAL,CAAqB;IAC/B,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAK,CAAA,IACzB;QACC,IAAI,CAACA,MAAA,CAAK,aAAL,CAAmBA,MAAA,CAAK,eAAL,CAAqB,KAC7C;YACC,IAAI,IAAI,CAAA,GAAI;YACZ,OAAO,CAAA,GAAI,GAAJ,IAAW,CAAC,IAAA,CAAK,aAAL,CAAmB,IAAA,CAAK,eAAL,CAAqB;kBAC1D,CAAA;YACD,IAAI,CAAA,KAAM;kBACT,OAAO;YACR,IAAI,MAAMA,MAAA,CAAK,eAAL,CAAqB;YAC/BA,MAAA,CAAK,eAAL,CAAqB,EAArB,GAA0BA,MAAA,CAAK,eAAL,CAAqB;YAC/CA,MAAA,CAAK,eAAL,CAAqB,EAArB,GAA0B;;QAE3BA,MAAA,CAAK,kBAAL,CAAwBA,MAAA,CAAK,eAAL,CAAqB,EAArB,CAAwB,OAAOA,MAAA,CAAK,eAAL,CAAqB,EAArB,CAAwB;;IAEhF,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,oBAA7B,GAAoD,YACpD;;;IACC,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,eAAL,CAAqB,OAAQ,CAAA,GAAI,MAAM,CAAA,IAC9D;QACC,IAAI,QAAQA,MAAA,CAAK,eAAL,CAAqB;QACjCA,MAAA,CAAK,cAAL,CAAoB,KAAA,CAAM,OAAO,KAAA,CAAM,OAAO,KAAA,CAAM;QACpDA,MAAA,CAAK,kBAAL,CAAwB,KAAA,CAAM,OAAO,KAAA,CAAM;;IAE5C,IAAA,CAAK,eAAL,CAAqB,MAArB,GAA8B;;AAG/B,UAAA,CAAW,OAAX,CAAmB,IAAnB,GAA0B,UAAU,IAAM,EAAA,UAC1C;IAGC,IAAI,QAAA,KAAa,IAAA,CAAK,GAAL,CAAS;UACzB,OAAO,IAAA,CAAK,GAAL,CAAS;IACjB,OAAO,IAAA,CAAK,GAAL,CAAS,CAAT,GAAa,IAAA,CAAK,EAAL,IAAW,QAAA,GAAW,IAAA,CAAK,GAAL,CAAS;;AAGpD,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,cAA7B,GAA8C,UAAU,KAAO,EAAA,KAAO,EAAA,IACtE;IACC,EAAA,CAAG,CAAH,GAAO;IACP,EAAA,CAAG,CAAH,GAAO;IACP,IAAI,IAAI;IAGR,IAAI,KAAA,CAAM,EAAN,KAAa,KAAA,CAAM,IACvB;QACC,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,IAAN,CAAW;QAClB,EAAA,CAAG,CAAH,GAAO,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,OAAO,EAAA,CAAG;QACzC;;IAED,IAAI,KAAA,CAAM,KAAN,CAAY,CAAZ,KAAkB,GACtB;QACC,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,GAAN,CAAU;QACjB,IAAI,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,QACxC;YACC,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,GAAN,CAAU;eAGlB;YACC,EAAA,GAAK,KAAA,CAAM,GAAN,CAAU,CAAV,GAAe,KAAA,CAAM,GAAN,CAAU,CAAV,GAAc,KAAA,CAAM;YACxC,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,EAAb,GAAkB;;WAGtB,IAAI,KAAA,CAAM,KAAN,CAAY,CAAZ,KAAkB,GAC3B;QACC,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,GAAN,CAAU;QACjB,IAAI,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,QACxC;YACC,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,GAAN,CAAU;eAGlB;YACC,EAAA,GAAK,KAAA,CAAM,GAAN,CAAU,CAAV,GAAe,KAAA,CAAM,GAAN,CAAU,CAAV,GAAc,KAAA,CAAM;YACxC,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,EAAb,GAAkB;;WAI3B;QACC,EAAA,GAAK,KAAA,CAAM,GAAN,CAAU,CAAV,GAAc,KAAA,CAAM,GAAN,CAAU,CAAV,GAAc,KAAA,CAAM;QACvC,EAAA,GAAK,KAAA,CAAM,GAAN,CAAU,CAAV,GAAc,KAAA,CAAM,GAAN,CAAU,CAAV,GAAc,KAAA,CAAM;QACvC,IAAI,KAAK,EAAA,GAAK,OAAO,KAAA,CAAM,EAAN,GAAW,KAAA,CAAM;QACtC,EAAA,CAAG,CAAH,GAAO;QACP,IAAI,IAAA,CAAK,GAAL,CAAS,KAAA,CAAM,GAAf,GAAqB,IAAA,CAAK,GAAL,CAAS,KAAA,CAAM;cACvC,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,EAAN,GAAW,CAAX,GAAe;;cAEtB,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,EAAN,GAAW,CAAX,GAAe;;IAExB,IAAI,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,GAAN,CAAU,CAAjB,IAAsB,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,GAAN,CAAU,GAC3C;QACC,IAAI,KAAA,CAAM,GAAN,CAAU,CAAV,GAAc,KAAA,CAAM,GAAN,CAAU,GAC5B;YACC,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,GAAN,CAAU;YACjB,EAAA,CAAG,CAAH,GAAO,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,OAAO,KAAA,CAAM,GAAN,CAAU;YAChD,OAAO,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,GAAN,CAAU;;cAGxB,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,GAAN,CAAU;QAClB,IAAI,IAAA,CAAK,GAAL,CAAS,KAAA,CAAM,GAAf,GAAqB,IAAA,CAAK,GAAL,CAAS,KAAA,CAAM;cACvC,EAAA,CAAG,CAAH,GAAO,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,OAAO,EAAA,CAAG;;cAEzC,EAAA,CAAG,CAAH,GAAO,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,OAAO,EAAA,CAAG;;IAG3C,IAAI,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,IAAN,CAAW,GACtB;QACC,EAAA,CAAG,CAAH,GAAO,KAAA,CAAM,IAAN,CAAW;QAElB,IAAI,IAAA,CAAK,GAAL,CAAS,KAAA,CAAM,GAAf,GAAqB,IAAA,CAAK,GAAL,CAAS,KAAA,CAAM;cACvC,EAAA,CAAG,CAAH,GAAO,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,OAAO,EAAA,CAAG;;cAEzC,EAAA,CAAG,CAAH,GAAO,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,OAAO,EAAA,CAAG;;;AAI5C,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,2BAA7B,GAA2D,UAAU,MACrE;;;IACC,IAAI,IAAI,IAAA,CAAK;IAEb,OAAO,CAAA,KAAM,MACb;QAGC,IAAI,eAAeA,MAAA,CAAK,QAAL,CAAc,GAAG;QACpC,IAAI,cACJ;YACC,IAAI,WAAWA,MAAA,CAAK,eAAL,CAAqB;YACpC,YAAA,GAAgB,QAAA,KAAa,IAAb,IAAqB,CAAC,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC;;QAE3E,IAAI,cACJ;YACC,IAAIA,MAAA,CAAK,gBACT;gBACCA,MAAA,CAAK,YAAL,CAAkB,CAAA,CAAE,GAAF,CAAM;;YAEzB,IAAI,QAAQ,CAAA,CAAE;YACdA,MAAA,CAAK,QAAL,CAAc;YACd,IAAI,KAAA,KAAU;kBACb,CAAA,GAAIA,MAAA,CAAK;;kBAET,CAAA,GAAI,KAAA,CAAM;eAGZ;YAEC,IAAIA,MAAA,CAAK,cAAL,CAAoB,GAAG,KAAvB,IAAgC,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,CAAA,CAAE,YAC1E;gBACC,CAAA,GAAIA,MAAA,CAAK,iBAAL,CAAuB;gBAC3B,IAAI,CAAA,CAAE,MAAF,IAAY;sBACfA,MAAA,CAAK,QAAL,CAAc,GAAG,CAAA,CAAE;gBACpBA,MAAA,CAAK,YAAL,CAAkB;mBAGnB;gBACC,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,GAAG;gBACtC,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW;;YAGZ,IAAI,UAAA,CAAW,SACf;gBACC,IAAI,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY;sBAAM,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;sBAClC,IAAI,CAAA,CAAE,GAAF,CAAM,CAAN,KAAY;sBAAM,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW,CAAA,CAAE,GAAF,CAAM;;sBACvC,CAAA,CAAE,IAAF,CAAO,CAAP,GAAW;;YAKjB,IAAIA,MAAA,CAAK,gBACT;gBACC,IAAI,QAAQ,CAAA,CAAE;gBACd,IAAK,CAAA,CAAE,MAAF,IAAY,CAAb,IAAoB,CAAA,CAAE,SAAF,KAAgB,CAApC,IAA0C,KAAA,KAAU,IAApD,IACF,KAAA,CAAM,MAAN,IAAgB,CADd,IACqB,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,CAAA,CAAE,IAAF,CAAO,CAD7C,IAEF,KAAA,CAAM,SAAN,KAAoB,GACtB;oBACC,IAAI,KAAK,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE;oBAElC,IAAI,UAAA,CAAW,SACf;wBACCA,MAAA,CAAK,IAAL,CAAU,IAAI,OAAO;;oBAGtB,IAAI,KAAKA,MAAA,CAAK,QAAL,CAAc,OAAO;oBAC9B,IAAI,MAAMA,MAAA,CAAK,QAAL,CAAc,GAAG;oBAC3BA,MAAA,CAAK,OAAL,CAAa,IAAI,KAAK;;;YAGxB,CAAA,GAAI,CAAA,CAAE;;;IAIR,IAAA,CAAK,kBAAL;IACA,IAAA,CAAK,QAAL,GAAgB;IAEhB,CAAA,GAAI,IAAA,CAAK;IACT,OAAO,CAAA,KAAM,MACb;QACC,IAAIA,MAAA,CAAK,cAAL,CAAoB,GAAG,OAC3B;YACC,IAAI,KAAK;YACT,IAAI,CAAA,CAAE,MAAF,IAAY;kBACf,EAAA,GAAKA,MAAA,CAAK,QAAL,CAAc,GAAG,CAAA,CAAE;YACzB,CAAA,GAAIA,MAAA,CAAK,iBAAL,CAAuB;YAE3B,IAAI,QAAQ,CAAA,CAAE;YACd,IAAI,QAAQ,CAAA,CAAE;YAEd,IAAI,KAAA,KAAU,IAAV,IAAkB,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,CAAA,CAAE,GAAF,CAAM,CAAzC,IAA8C,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,CAAA,CAAE,GAAF,CAAM,CAArE,IAA0E,EAAA,KAAO,IAAjF,IAAyF,KAAA,CAAM,MAAN,IAAgB,CAAzG,IAA8G,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,KAAA,CAAM,GAAN,CAAU,CAAzI,IAA8I,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,CAAA,CAAE,MAAM,CAAA,CAAE,KAAK,KAAA,CAAM,MAAM,KAAA,CAAM,IAAnN,IAA4N,CAAA,CAAE,SAAF,KAAgB,CAA5O,IAAmP,KAAA,CAAM,SAAN,KAAoB,GAC3Q;gBACC,IAAI,MAAMA,MAAA,CAAK,QAAL,CAAc,QAAQ,CAAA,CAAE;gBAClCA,MAAA,CAAK,OAAL,CAAa,IAAI,KAAK,CAAA,CAAE;mBAEpB,IAAI,KAAA,KAAU,IAAV,IAAkB,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,CAAA,CAAE,GAAF,CAAM,CAAzC,IAA8C,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,CAAA,CAAE,GAAF,CAAM,CAArE,IAA0E,EAAA,KAAO,IAAjF,IAAyF,KAAA,CAAM,MAAN,IAAgB,CAAzG,IAA8G,KAAA,CAAM,IAAN,CAAW,CAAX,KAAiB,KAAA,CAAM,GAAN,CAAU,CAAzI,IAA8I,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,CAAA,CAAE,MAAM,CAAA,CAAE,KAAK,KAAA,CAAM,MAAM,KAAA,CAAM,IAAnN,IAA4N,CAAA,CAAE,SAAF,KAAgB,CAA5O,IAAmP,KAAA,CAAM,SAAN,KAAoB,GAChR;gBACC,IAAI,MAAMA,MAAA,CAAK,QAAL,CAAc,OAAO,CAAA,CAAE;gBACjCA,MAAA,CAAK,OAAL,CAAa,IAAI,KAAK,CAAA,CAAE;;;QAG1B,CAAA,GAAI,CAAA,CAAE;;;AAIR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,QAA7B,GAAwC,UAAU,GAClD;;;IACC,IAAI,WAAW,IAAA,CAAK,eAAL,CAAqB;IACpC,IAAI,QAAA,KAAa,MACjB;QACC,IAAI,CAAA,CAAE,MAAF,IAAY;cACf,IAAA,CAAK,QAAL,CAAc,GAAG,CAAA,CAAE;QACpB,IAAA,CAAK,aAAL,CAAmB;QACnB;;IAED,IAAI,QAAQ,CAAA,CAAE;IACd,OAAO,KAAA,KAAU,IAAV,IAAkB,KAAA,KAAU,UACnC;QACCA,MAAA,CAAK,cAAL,CAAoB,GAAG,OAAO,CAAA,CAAE;QAChCA,MAAA,CAAK,kBAAL,CAAwB,GAAG;QAC3B,KAAA,GAAQ,CAAA,CAAE;;IAEX,IAAI,CAAA,CAAE,MAAF,KAAa,CAAC,CAAd,IAAmB,QAAA,CAAS,MAAT,KAAoB,CAAC,GAC5C;QACC,IAAA,CAAK,aAAL,CAAmB;QACnB,IAAA,CAAK,aAAL,CAAmB;WAEf,IAAI,CAAA,CAAE,MAAF,IAAY,CAAZ,IAAiB,QAAA,CAAS,MAAT,IAAmB,GAC7C;QACC,IAAI,CAAA,CAAE,MAAF,IAAY;cAAG,IAAA,CAAK,eAAL,CAAqB,GAAG,UAAU,CAAA,CAAE;QACvD,IAAA,CAAK,aAAL,CAAmB;QACnB,IAAA,CAAK,aAAL,CAAmB;WAEf,IAAI,UAAA,CAAW,SAAX,IAAwB,CAAA,CAAE,SAAF,KAAgB,GACjD;QACC,IAAI,CAAA,CAAE,MAAF,IAAY,GAChB;YACC,IAAA,CAAK,QAAL,CAAc,GAAG,CAAA,CAAE;YACnB,CAAA,CAAE,MAAF,GAAW,UAAA,CAAW,WAAX,CAAuB;;QAEnC,IAAA,CAAK,aAAL,CAAmB;QACnB,IAAI,QAAA,CAAS,MAAT,IAAmB,GACvB;YACC,IAAA,CAAK,QAAL,CAAc,UAAU,CAAA,CAAE;YAC1B,QAAA,CAAS,MAAT,GAAkB,UAAA,CAAW,WAAX,CAAuB;;QAE1C,IAAA,CAAK,aAAL,CAAmB;;UAGnB,UAAA,CAAW,KAAX,CAAiB;;AAGnB,UAAA,CAAW,OAAX,CAAmB,YAAnB,GAAkC,UAAU,OAC5C;IACC,KAAK,IAAI,IAAI,GAAG,MAAM,KAAA,CAAM,OAAQ,CAAA,GAAI,KAAK,CAAA;UAC5C,KAAA,CAAM,EAAN,CAAS,OAAT;;AAGF,UAAA,CAAW,OAAX,CAAmB,WAAnB,GAAiC,UAAU,MAC3C;IACC,OAAO,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,KAAxB,IAAiC;;AAGzC,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,UAA7B,GAA0C,UAAU,KACpD;IACC,IAAI,GAAA,KAAQ;UACX,OAAO;IACR,IAAI,SAAS;IACb,IAAI,IAAI;IACR,GAAG;QACF,MAAA;QACA,CAAA,GAAI,CAAA,CAAE;aAEA,CAAA,KAAM;IACb,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,WAA7B,GAA2C,UAAU,OACrD;;;IACC,UAAA,CAAW,KAAX,CAAiB;IACjB,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,UAAL,CAAgB,OAAQ,CAAA,GAAI,MAAM,CAAA,IACzD;QACC,IAAI,SAASA,MAAA,CAAK,UAAL,CAAgB;QAC7B,IAAI,MAAA,CAAO,GAAP,KAAe;cAClB;QACD,IAAI,IAAI,MAAA,CAAO,GAAP,CAAW;QACnB,IAAI,MAAMA,MAAA,CAAK,UAAL,CAAgB;QAC1B,IAAI,GAAA,GAAM;cACT;QACD,IAAI,KAAK,IAAI,KAAJ,CAAU;QACnB,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAK,CAAA,IACzB;YACC,EAAA,CAAG,EAAH,GAAQ,CAAA,CAAE;YACV,CAAA,GAAI,CAAA,CAAE;;QAEP,KAAA,CAAM,IAAN,CAAW;;;AAIb,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,YAA7B,GAA4C,UAAU,UACtD;;;IACC,QAAA,CAAS,KAAT;IAGA,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,UAAL,CAAgB,OAAQ,CAAA,GAAI,MAAM,CAAA,IACzD;QACC,IAAI,SAASA,MAAA,CAAK,UAAL,CAAgB;QAC7B,IAAI,MAAMA,MAAA,CAAK,UAAL,CAAgB,MAAA,CAAO;QACjC,IAAK,MAAA,CAAO,MAAP,IAAiB,GAAA,GAAM,CAAxB,IAA+B,CAAC,MAAA,CAAO,MAAR,IAAkB,GAAA,GAAM;cAC1D;QACDA,MAAA,CAAK,cAAL,CAAoB;QACpB,IAAI,KAAK,IAAI,UAAA,CAAW,QAAf;QACT,QAAA,CAAS,UAAT,CAAoB,IAApB,CAAyB;QACzB,MAAA,CAAO,QAAP,GAAkB;QAClB,EAAA,CAAG,SAAH,CAAa,MAAb,GAAsB;QACtB,IAAI,KAAK,MAAA,CAAO,GAAP,CAAW;QACpB,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAK,CAAA,IACzB;YACC,EAAA,CAAG,SAAH,CAAa,EAAb,GAAkB,EAAA,CAAG;YACrB,EAAA,GAAK,EAAA,CAAG;;;IAKV,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,UAAL,CAAgB,OAAQ,CAAA,GAAI,MAAM,CAAA,IACzD;QACC,IAAI,SAASA,MAAA,CAAK,UAAL,CAAgB;QAC7B,IAAI,MAAA,CAAO,QAAP,KAAoB;cACvB;cACI,IAAI,MAAA,CAAO,QAChB;YACC,MAAA,CAAO,QAAP,CAAgB,MAAhB,GAAyB;YACzB,QAAA,CAAS,QAAT,CAAkB,MAAA,CAAO;eAErB,IAAI,MAAA,CAAO,SAAP,KAAqB,IAArB,IAA6B,MAAA,CAAO,SAAP,CAAiB,QAAjB,KAA8B;cACnE,MAAA,CAAO,SAAP,CAAiB,QAAjB,CAA0B,QAA1B,CAAmC,MAAA,CAAO;;cAE1C,QAAA,CAAS,QAAT,CAAkB,MAAA,CAAO;;;AAI5B,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,gBAA7B,GAAgD,UAAU,QAC1D;IACC,IAAI,KAAK,MAAA,CAAO;IAChB,IAAI,SAAS,EAAA,CAAG;IAChB,OAAO,EAAA,KAAO,QACd;QACC,EAAA,GAAK,EAAA,CAAG;QACR,IAAI,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,EAAA,CAAG,IAAI,EAAA,CAAG,IAAH,CAAQ,KACjD;YACC,IAAI,EAAA,KAAO,QACX;gBACC,MAAA,GAAS,EAAA,CAAG;;YAEb,IAAI,QAAQ,EAAA,CAAG;YACf,KAAA,CAAM,IAAN,GAAa,EAAA,CAAG;YAChB,EAAA,CAAG,IAAH,CAAQ,IAAR,GAAe;YACf,EAAA,GAAK;;;IAGP,IAAI,EAAA,KAAO,EAAA,CAAG,MACd;QACC,MAAA,CAAO,GAAP,GAAa;;;AAIf,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,eAA7B,GAA+C,UAAU,QACzD;;;IAGC,IAAI,SAAS;IACb,MAAA,CAAO,QAAP,GAAkB;IAClB,IAAI,KAAK,MAAA,CAAO;IAChB,IAAI,cAAc,IAAA,CAAK,iBAAL,IAA0B,IAAA,CAAK;IACjD,WACA;QACC,IAAI,EAAA,CAAG,IAAH,KAAY,EAAZ,IAAkB,EAAA,CAAG,IAAH,KAAY,EAAA,CAAG,MACrC;YACC,MAAA,CAAO,GAAP,GAAa;YACb;;QAID,IAAK,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,EAAA,CAAG,IAAI,EAAA,CAAG,IAAH,CAAQ,GAA9C,IAAuD,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,EAAA,CAAG,IAAI,EAAA,CAAG,IAAH,CAAQ,GAApG,IAA6G,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,EAAA,CAAG,IAAH,CAAQ,IAAI,EAAA,CAAG,IAAI,EAAA,CAAG,IAAH,CAAQ,GAA/D,KAAuE,CAAC,WAAD,IAAgB,CAACA,MAAA,CAAK,qBAAL,CAA2B,EAAA,CAAG,IAAH,CAAQ,IAAI,EAAA,CAAG,IAAI,EAAA,CAAG,IAAH,CAAQ,MAC/P;YACC,MAAA,GAAS;YACT,EAAA,CAAG,IAAH,CAAQ,IAAR,GAAe,EAAA,CAAG;YAClB,EAAA,CAAG,IAAH,CAAQ,IAAR,GAAe,EAAA,CAAG;YAClB,EAAA,GAAK,EAAA,CAAG;eAEJ,IAAI,EAAA,KAAO;cACf;cAED;YACC,IAAI,MAAA,KAAW;kBACd,MAAA,GAAS;YACV,EAAA,GAAK,EAAA,CAAG;;;IAGV,MAAA,CAAO,GAAP,GAAa;;AAGd,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,QAA7B,GAAwC,UAAU,KAAO,EAAA,aACzD;IACC,IAAI,SAAS,IAAI,UAAA,CAAW,KAAf;IAEb,MAAA,CAAO,EAAP,CAAU,CAAV,GAAc,KAAA,CAAM,EAAN,CAAS;IACvB,MAAA,CAAO,EAAP,CAAU,CAAV,GAAc,KAAA,CAAM,EAAN,CAAS;IACvB,IAAI,UAAA,CAAW;UAAS,MAAA,CAAO,EAAP,CAAU,CAAV,GAAc,KAAA,CAAM,EAAN,CAAS;IAC/C,MAAA,CAAO,GAAP,GAAa,KAAA,CAAM;IACnB,IAAI,aACJ;QACC,MAAA,CAAO,IAAP,GAAc,KAAA,CAAM;QACpB,MAAA,CAAO,IAAP,GAAc;QACd,KAAA,CAAM,IAAN,CAAW,IAAX,GAAkB;QAClB,KAAA,CAAM,IAAN,GAAa;WAGd;QACC,MAAA,CAAO,IAAP,GAAc,KAAA,CAAM;QACpB,MAAA,CAAO,IAAP,GAAc;QACd,KAAA,CAAM,IAAN,CAAW,IAAX,GAAkB;QAClB,KAAA,CAAM,IAAN,GAAa;;IAEd,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,UAA7B,GAA0C,UAAU,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,MACpE;IACC,IAAI,EAAA,GAAK,IACT;QACC,IAAI,EAAA,GAAK,IACT;YACC,IAAA,CAAK,IAAL,GAAY,IAAA,CAAK,GAAL,CAAS,IAAI;YACzB,IAAA,CAAK,KAAL,GAAa,IAAA,CAAK,GAAL,CAAS,IAAI;eAG3B;YACC,IAAA,CAAK,IAAL,GAAY,IAAA,CAAK,GAAL,CAAS,IAAI;YACzB,IAAA,CAAK,KAAL,GAAa,IAAA,CAAK,GAAL,CAAS,IAAI;;WAI5B;QACC,IAAI,EAAA,GAAK,IACT;YACC,IAAA,CAAK,IAAL,GAAY,IAAA,CAAK,GAAL,CAAS,IAAI;YACzB,IAAA,CAAK,KAAL,GAAa,IAAA,CAAK,GAAL,CAAS,IAAI;eAG3B;YACC,IAAA,CAAK,IAAL,GAAY,IAAA,CAAK,GAAL,CAAS,IAAI;YACzB,IAAA,CAAK,KAAL,GAAa,IAAA,CAAK,GAAL,CAAS,IAAI;;;IAG5B,OAAO,IAAA,CAAK,IAAL,GAAY,IAAA,CAAK;;AAGzB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,QAA7B,GAAwC,UAAU,GAAK,EAAA,IAAM,EAAA,GAAK,EAAA,IAAM,EAAA,EAAI,EAAA,aAC5E;IACC,IAAI,OAAQ,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,IAAA,CAAK,EAAL,CAAQ,CAAnB,GAAuB,UAAA,CAAW,SAAX,CAAqB,eAAe,UAAA,CAAW,SAAX,CAAqB;IAC5F,IAAI,OAAQ,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,IAAA,CAAK,EAAL,CAAQ,CAAnB,GAAuB,UAAA,CAAW,SAAX,CAAqB,eAAe,UAAA,CAAW,SAAX,CAAqB;IAC5F,IAAI,IAAA,KAAS;UACZ,OAAO;IAMR,IAAI,IAAA,KAAS,UAAA,CAAW,SAAX,CAAqB,cAClC;QACC,OAAO,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,IAAiB,EAAA,CAAG,CAApB,IACN,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,IAAiB,GAAA,CAAI,EAAJ,CAAO,CADlB,IACuB,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,KAAkB,EAAA,CAAG;cAClD,GAAA,GAAM,GAAA,CAAI;QACX,IAAI,WAAA,IAAgB,GAAA,CAAI,EAAJ,CAAO,CAAP,KAAa,EAAA,CAAG;cACnC,GAAA,GAAM,GAAA,CAAI;QACX,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK,CAAC;QAC3B,IAAI,UAAA,CAAW,MAAX,CAAkB,aAAlB,CAAgC,IAAA,CAAK,IAAI,KAC7C;YACC,GAAA,GAAM;YAEN,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACd,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACd,IAAI,UAAA,CAAW;kBAAS,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACtC,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK,CAAC;;WAI7B;QACC,OAAO,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,IAAiB,EAAA,CAAG,CAApB,IACN,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,IAAiB,GAAA,CAAI,EAAJ,CAAO,CADlB,IACuB,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,KAAkB,EAAA,CAAG;cAClD,GAAA,GAAM,GAAA,CAAI;QACX,IAAI,CAAC,WAAD,IAAiB,GAAA,CAAI,EAAJ,CAAO,CAAP,KAAa,EAAA,CAAG;cACpC,GAAA,GAAM,GAAA,CAAI;QACX,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;QAC1B,IAAI,UAAA,CAAW,MAAX,CAAkB,aAAlB,CAAgC,IAAA,CAAK,IAAI,KAC7C;YACC,GAAA,GAAM;YAEN,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACd,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACd,IAAI,UAAA,CAAW;kBAAS,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACtC,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;;;IAG5B,IAAI,IAAA,KAAS,UAAA,CAAW,SAAX,CAAqB,cAClC;QACC,OAAO,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,IAAiB,EAAA,CAAG,CAApB,IACN,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,IAAiB,GAAA,CAAI,EAAJ,CAAO,CADlB,IACuB,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,KAAkB,EAAA,CAAG;cAClD,GAAA,GAAM,GAAA,CAAI;QACX,IAAI,WAAA,IAAgB,GAAA,CAAI,EAAJ,CAAO,CAAP,KAAa,EAAA,CAAG;cACnC,GAAA,GAAM,GAAA,CAAI;QACX,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK,CAAC;QAC3B,IAAI,UAAA,CAAW,MAAX,CAAkB,aAAlB,CAAgC,IAAA,CAAK,IAAI,KAC7C;YACC,GAAA,GAAM;YAEN,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACd,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACd,IAAI,UAAA,CAAW;kBAAS,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACtC,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK,CAAC;;WAI7B;QACC,OAAO,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,IAAiB,EAAA,CAAG,CAApB,IACN,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,IAAiB,GAAA,CAAI,EAAJ,CAAO,CADlB,IACuB,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,KAAkB,EAAA,CAAG;cAClD,GAAA,GAAM,GAAA,CAAI;QACX,IAAI,CAAC,WAAD,IAAiB,GAAA,CAAI,EAAJ,CAAO,CAAP,KAAa,EAAA,CAAG;cACpC,GAAA,GAAM,GAAA,CAAI;QACX,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;QAC1B,IAAI,UAAA,CAAW,MAAX,CAAkB,aAAlB,CAAgC,IAAA,CAAK,IAAI,KAC7C;YACC,GAAA,GAAM;YAEN,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACd,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACd,IAAI,UAAA,CAAW;kBAAS,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,EAAA,CAAG;YACtC,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;;;IAG5B,IAAK,IAAA,KAAS,UAAA,CAAW,SAAX,CAAqB,YAA/B,KAAiD,aACrD;QACC,GAAA,CAAI,IAAJ,GAAW;QACX,GAAA,CAAI,IAAJ,GAAW;QACX,IAAA,CAAK,IAAL,GAAY;QACZ,IAAA,CAAK,IAAL,GAAY;WAGb;QACC,GAAA,CAAI,IAAJ,GAAW;QACX,GAAA,CAAI,IAAJ,GAAW;QACX,IAAA,CAAK,IAAL,GAAY;QACZ,IAAA,CAAK,IAAL,GAAY;;IAEb,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,UAA7B,GAA0C,UAAU,CAAG,EAAA,OAAS,EAAA,SAChE;IACC,IAAI,MAAM,CAAA,CAAE,QACX,OAAO,IAAI,UAAA,CAAW,KAAf;IACR,IAAI,MAAM,CAAA,CAAE,QACX,OAAO,IAAI,UAAA,CAAW,KAAf;IAQR,IAAI,eAAgB,CAAA,CAAE,MAAF,CAAS,EAAT,CAAY,CAAZ,KAAkB,CAAA,CAAE,KAAF,CAAQ;IAC9C,IAAI,YAAA,IAAiB,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,CAAA,CAAE,OAAO,CAAA,CAAE,MAAF,CAAS,GAAjE,IAA0E,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,CAAA,CAAE,OAAO,CAAA,CAAE,MAAF,CAAS,KAC9H;QAEC,IAAI,OAAA,KAAY;cAAS,OAAO;QAEhC,IAAA,GAAO,CAAA,CAAE,MAAF,CAAS;QAChB,OAAO,IAAA,KAAS,GAAT,IAAiB,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAA,CAAK,IAAI,CAAA,CAAE;cAChE,IAAA,GAAO,IAAA,CAAK;QACb,IAAI,WAAY,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,CAAA,CAAE,KAAF,CAAQ;QACpC,IAAA,GAAO,CAAA,CAAE,MAAF,CAAS;QAChB,OAAO,IAAA,KAAS,GAAT,IAAiB,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAA,CAAK,IAAI,CAAA,CAAE;cAChE,IAAA,GAAO,IAAA,CAAK;QACb,IAAI,WAAY,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,CAAA,CAAE,KAAF,CAAQ;QACpC,IAAI,QAAA,KAAa;cAChB,OAAO;QACR,IAAI,UACJ;YACC,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;YAC1B,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;YAC1B,GAAA,CAAI,IAAJ,GAAW;YACX,GAAA,CAAI,IAAJ,GAAW;YACX,IAAA,CAAK,IAAL,GAAY;YACZ,IAAA,CAAK,IAAL,GAAY;YACZ,CAAA,CAAE,MAAF,GAAW;YACX,CAAA,CAAE,MAAF,GAAW;YACX,OAAO;eAGR;YACC,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;YAC1B,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;YAC1B,GAAA,CAAI,IAAJ,GAAW;YACX,GAAA,CAAI,IAAJ,GAAW;YACX,IAAA,CAAK,IAAL,GAAY;YACZ,IAAA,CAAK,IAAL,GAAY;YACZ,CAAA,CAAE,MAAF,GAAW;YACX,CAAA,CAAE,MAAF,GAAW;YACX,OAAO;;WAGJ,IAAI,cACT;QAIC,IAAA,GAAO;QACP,OAAO,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,KAAkB,GAAA,CAAI,EAAJ,CAAO,CAAzB,IAA8B,GAAA,CAAI,IAAJ,KAAa,IAA3C,IAAmD,GAAA,CAAI,IAAJ,KAAa;cACtE,GAAA,GAAM,GAAA,CAAI;QACX,OAAO,IAAA,CAAK,IAAL,CAAU,EAAV,CAAa,CAAb,KAAmB,IAAA,CAAK,EAAL,CAAQ,CAA3B,IAAgC,IAAA,CAAK,IAAL,KAAc,GAA9C,IAAqD,IAAA,CAAK,IAAL,KAAc;cACzE,IAAA,GAAO,IAAA,CAAK;QACb,IAAI,IAAA,CAAK,IAAL,KAAc,GAAd,IAAqB,IAAA,CAAK,IAAL,KAAc;cACtC,OAAO;QAER,IAAA,GAAO;QACP,OAAO,GAAA,CAAI,IAAJ,CAAS,EAAT,CAAY,CAAZ,KAAkB,GAAA,CAAI,EAAJ,CAAO,CAAzB,IAA8B,GAAA,CAAI,IAAJ,KAAa,IAA3C,IAAmD,GAAA,CAAI,IAAJ,KAAa;cACtE,GAAA,GAAM,GAAA,CAAI;QACX,OAAO,IAAA,CAAK,IAAL,CAAU,EAAV,CAAa,CAAb,KAAmB,IAAA,CAAK,EAAL,CAAQ,CAA3B,IAAgC,IAAA,CAAK,IAAL,KAAc,GAA9C,IAAqD,IAAA,CAAK,IAAL,KAAc;cACzE,IAAA,GAAO,IAAA,CAAK;QACb,IAAI,IAAA,CAAK,IAAL,KAAc,GAAd,IAAqB,IAAA,CAAK,IAAL,KAAc;cACtC,OAAO;QAIR,IAAI,OAAO;YACV,MAAM,IADI;YAEV,OAAO;;QAGR,IAAI,CAAC,IAAA,CAAK,UAAL,CAAgB,GAAA,CAAI,EAAJ,CAAO,GAAG,IAAA,CAAK,EAAL,CAAQ,GAAG,GAAA,CAAI,EAAJ,CAAO,GAAG,IAAA,CAAK,EAAL,CAAQ,GAAG;cAC9D,OAAO;QACR,IAAI,OAAO,IAAA,CAAK;QAChB,IAAI,QAAQ,IAAA,CAAK;QAKjB,IAAI,KAAK,IAAI,UAAA,CAAW,OAAf;QACT,IAAI;QACJ,IAAI,GAAA,CAAI,EAAJ,CAAO,CAAP,IAAY,IAAZ,IAAoB,GAAA,CAAI,EAAJ,CAAO,CAAP,IAAY,OACpC;YAEC,EAAA,CAAG,CAAH,GAAO,GAAA,CAAI,EAAJ,CAAO;YACd,EAAA,CAAG,CAAH,GAAO,GAAA,CAAI,EAAJ,CAAO;YACd,IAAI,UAAA,CAAW;kBAAS,EAAA,CAAG,CAAH,GAAO,GAAA,CAAI,EAAJ,CAAO;YACtC,eAAA,GAAmB,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,IAAA,CAAK,EAAL,CAAQ;eAElC,IAAI,GAAA,CAAI,EAAJ,CAAO,CAAP,IAAY,IAAZ,IAAoB,GAAA,CAAI,EAAJ,CAAO,CAAP,IAAY,OACzC;YAEC,EAAA,CAAG,CAAH,GAAO,GAAA,CAAI,EAAJ,CAAO;YACd,EAAA,CAAG,CAAH,GAAO,GAAA,CAAI,EAAJ,CAAO;YACd,IAAI,UAAA,CAAW;kBAAS,EAAA,CAAG,CAAH,GAAO,GAAA,CAAI,EAAJ,CAAO;YACtC,eAAA,GAAmB,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,IAAA,CAAK,EAAL,CAAQ;eAElC,IAAI,IAAA,CAAK,EAAL,CAAQ,CAAR,IAAa,IAAb,IAAqB,IAAA,CAAK,EAAL,CAAQ,CAAR,IAAa,OAC3C;YAEC,EAAA,CAAG,CAAH,GAAO,IAAA,CAAK,EAAL,CAAQ;YACf,EAAA,CAAG,CAAH,GAAO,IAAA,CAAK,EAAL,CAAQ;YACf,IAAI,UAAA,CAAW;kBAAS,EAAA,CAAG,CAAH,GAAO,IAAA,CAAK,EAAL,CAAQ;YACvC,eAAA,GAAkB,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,GAAA,CAAI,EAAJ,CAAO;eAGtC;YAEC,EAAA,CAAG,CAAH,GAAO,IAAA,CAAK,EAAL,CAAQ;YACf,EAAA,CAAG,CAAH,GAAO,IAAA,CAAK,EAAL,CAAQ;YACf,IAAI,UAAA,CAAW;kBAAS,EAAA,CAAG,CAAH,GAAO,IAAA,CAAK,EAAL,CAAQ;YACvC,eAAA,GAAmB,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,GAAA,CAAI,EAAJ,CAAO;;QAEvC,CAAA,CAAE,MAAF,GAAW;QACX,CAAA,CAAE,MAAF,GAAW;QACX,OAAO,IAAA,CAAK,QAAL,CAAc,KAAK,MAAM,KAAK,MAAM,IAAI;WAGhD;QAKC,IAAA,GAAO,GAAA,CAAI;QACX,OAAQ,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAA,CAAK,IAAI,GAAA,CAAI,GAA5C,IAAqD,IAAA,KAAS;cACpE,IAAA,GAAO,IAAA,CAAK;QACb,IAAI,WAAa,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,GAAA,CAAI,EAAJ,CAAO,CAApB,IAA0B,CAAC,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,GAAA,CAAI,IAAI,IAAA,CAAK,IAAI,CAAA,CAAE;QAClG,IAAI,UACJ;YACC,IAAA,GAAO,GAAA,CAAI;YACX,OAAQ,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAA,CAAK,IAAI,GAAA,CAAI,GAA5C,IAAqD,IAAA,KAAS;kBACpE,IAAA,GAAO,IAAA,CAAK;YAEb,IAAK,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,GAAA,CAAI,EAAJ,CAAO,CAApB,IAA0B,CAAC,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,GAAA,CAAI,IAAI,IAAA,CAAK,IAAI,CAAA,CAAE;kBACrF,OAAO;;QAET,IAAA,GAAO,GAAA,CAAI;QACX,OAAQ,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAA,CAAK,IAAI,GAAA,CAAI,GAA5C,IAAqD,IAAA,KAAS;cACpE,IAAA,GAAO,IAAA,CAAK;QAEb,IAAI,WAAa,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,GAAA,CAAI,EAAJ,CAAO,CAApB,IAA0B,CAAC,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,GAAA,CAAI,IAAI,IAAA,CAAK,IAAI,CAAA,CAAE;QAClG,IAAI,UACJ;YACC,IAAA,GAAO,GAAA,CAAI;YACX,OAAQ,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAA,CAAK,IAAI,GAAA,CAAI,GAA5C,IAAqD,IAAA,KAAS;kBACpE,IAAA,GAAO,IAAA,CAAK;YAEb,IAAK,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,GAAA,CAAI,EAAJ,CAAO,CAApB,IAA0B,CAAC,UAAA,CAAW,WAAX,CAAuB,YAAvB,CAAoC,GAAA,CAAI,IAAI,IAAA,CAAK,IAAI,CAAA,CAAE;kBACrF,OAAO;;QAET,IAAK,IAAA,KAAS,GAAV,IAAmB,IAAA,KAAS,GAA5B,IAAqC,IAAA,KAAS,IAA9C,IACD,OAAA,KAAY,OAAb,IAA0B,QAAA,KAAa;cACxC,OAAO;QACR,IAAI,UACJ;YACC,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;YAC1B,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;YAC1B,GAAA,CAAI,IAAJ,GAAW;YACX,GAAA,CAAI,IAAJ,GAAW;YACX,IAAA,CAAK,IAAL,GAAY;YACZ,IAAA,CAAK,IAAL,GAAY;YACZ,CAAA,CAAE,MAAF,GAAW;YACX,CAAA,CAAE,MAAF,GAAW;YACX,OAAO;eAGR;YACC,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;YAC1B,IAAA,GAAO,IAAA,CAAK,QAAL,CAAc,KAAK;YAC1B,GAAA,CAAI,IAAJ,GAAW;YACX,GAAA,CAAI,IAAJ,GAAW;YACX,IAAA,CAAK,IAAL,GAAY;YACZ,IAAA,CAAK,IAAL,GAAY;YACZ,CAAA,CAAE,MAAF,GAAW;YACX,CAAA,CAAE,MAAF,GAAW;YACX,OAAO;;;;AAKV,UAAA,CAAW,OAAX,CAAmB,SAAnB,GAA+B,UAAU,OACzC;IACC,IAAI,IAAI,GACP,MAAM,KAAA,CAAM;IACb,OAAO,CAAA,GAAI,GAAJ,IAAW,KAAA,CAAM,EAAN,CAAS,MAAT,KAAoB;UAAG,CAAA;IACzC,IAAI,CAAA,KAAM;UAAK,OAAO,IAAI,UAAA,CAAW,KAAf,CAAqB,GAAG,GAAG,GAAG;IACpD,IAAI,SAAS,IAAI,UAAA,CAAW,KAAf;IACb,MAAA,CAAO,IAAP,GAAc,KAAA,CAAM,EAAN,CAAS,EAAT,CAAY;IAC1B,MAAA,CAAO,KAAP,GAAe,MAAA,CAAO;IACtB,MAAA,CAAO,GAAP,GAAa,KAAA,CAAM,EAAN,CAAS,EAAT,CAAY;IACzB,MAAA,CAAO,MAAP,GAAgB,MAAA,CAAO;IACvB,OAAO,CAAA,GAAI,KAAK,CAAA;UACf,KAAK,IAAI,IAAI,GAAG,OAAO,KAAA,CAAM,EAAN,CAAS,OAAQ,CAAA,GAAI,MAAM,CAAA,IAClD;QACC,IAAI,KAAA,CAAM,EAAN,CAAS,EAAT,CAAY,CAAZ,GAAgB,MAAA,CAAO;cAAM,MAAA,CAAO,IAAP,GAAc,KAAA,CAAM,EAAN,CAAS,EAAT,CAAY;cACtD,IAAI,KAAA,CAAM,EAAN,CAAS,EAAT,CAAY,CAAZ,GAAgB,MAAA,CAAO;cAAO,MAAA,CAAO,KAAP,GAAe,KAAA,CAAM,EAAN,CAAS,EAAT,CAAY;QAClE,IAAI,KAAA,CAAM,EAAN,CAAS,EAAT,CAAY,CAAZ,GAAgB,MAAA,CAAO;cAAK,MAAA,CAAO,GAAP,GAAa,KAAA,CAAM,EAAN,CAAS,EAAT,CAAY;cACpD,IAAI,KAAA,CAAM,EAAN,CAAS,EAAT,CAAY,CAAZ,GAAgB,MAAA,CAAO;cAAQ,MAAA,CAAO,MAAP,GAAgB,KAAA,CAAM,EAAN,CAAS,EAAT,CAAY;;IAEtE,OAAO;;AAER,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,UAA7B,GAA0C,UAAU,KACpD;IACC,IAAI,UAAU;IACd,IAAI,SAAS,IAAI,UAAA,CAAW,KAAf;IACb,MAAA,CAAO,IAAP,GAAc,GAAA,CAAI,EAAJ,CAAO;IACrB,MAAA,CAAO,KAAP,GAAe,GAAA,CAAI,EAAJ,CAAO;IACtB,MAAA,CAAO,GAAP,GAAa,GAAA,CAAI,EAAJ,CAAO;IACpB,MAAA,CAAO,MAAP,GAAgB,GAAA,CAAI,EAAJ,CAAO;IACvB,GAAA,GAAM,GAAA,CAAI;IACV,OAAO,GAAA,KAAQ,SACf;QACC,IAAI,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,MAAA,CAAO;cACrB,MAAA,CAAO,IAAP,GAAc,GAAA,CAAI,EAAJ,CAAO;QACtB,IAAI,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,MAAA,CAAO;cACrB,MAAA,CAAO,KAAP,GAAe,GAAA,CAAI,EAAJ,CAAO;QACvB,IAAI,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,MAAA,CAAO;cACrB,MAAA,CAAO,GAAP,GAAa,GAAA,CAAI,EAAJ,CAAO;QACrB,IAAI,GAAA,CAAI,EAAJ,CAAO,CAAP,GAAW,MAAA,CAAO;cACrB,MAAA,CAAO,MAAP,GAAgB,GAAA,CAAI,EAAJ,CAAO;QACxB,GAAA,GAAM,GAAA,CAAI;;IAEX,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,cAAnB,GAAoC,UAAU,EAAI,EAAA,MAClD;IAIC,IAAI,SAAS,GACZ,MAAM,IAAA,CAAK;IACZ,IAAI,GAAA,GAAM;UACT,OAAO;IACR,IAAI,KAAK,IAAA,CAAK;IACd,KAAK,IAAI,IAAI,EAAG,CAAA,IAAK,KAAK,EAAE,GAC5B;QACC,IAAI,SAAU,CAAA,KAAM,GAAN,GAAY,IAAA,CAAK,KAAK,IAAA,CAAK;QACzC,IAAI,MAAA,CAAO,CAAP,KAAa,EAAA,CAAG,GACpB;YACC,IAAK,MAAA,CAAO,CAAP,KAAa,EAAA,CAAG,CAAjB,IAAwB,EAAA,CAAG,CAAH,KAAS,EAAA,CAAG,CAAZ,IAAmB,MAAA,CAAO,CAAP,GAAW,EAAA,CAAG,CAAf,KAAuB,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG;kBAC9E,OAAO,CAAC;;QAEV,IAAK,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG,CAAX,KAAmB,MAAA,CAAO,CAAP,GAAW,EAAA,CAAG,GACrC;YACC,IAAI,EAAA,CAAG,CAAH,IAAQ,EAAA,CAAG,GACf;gBACC,IAAI,MAAA,CAAO,CAAP,GAAW,EAAA,CAAG;sBACjB,MAAA,GAAS,CAAA,GAAI;sBAEd;oBACC,IAAI,KAAK,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG,MAAM,MAAA,CAAO,CAAP,GAAW,EAAA,CAAG,EAA/B,IAAqC,MAAA,CAAO,CAAP,GAAW,EAAA,CAAG,MAAM,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG;oBAC3E,IAAI,CAAA,KAAM;0BACT,OAAO,CAAC;0BACJ,IAAK,CAAA,GAAI,CAAL,KAAa,MAAA,CAAO,CAAP,GAAW,EAAA,CAAG;0BACnC,MAAA,GAAS,CAAA,GAAI;;mBAIhB;gBACC,IAAI,MAAA,CAAO,CAAP,GAAW,EAAA,CAAG,GAClB;oBACC,IAAI,KAAK,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG,MAAM,MAAA,CAAO,CAAP,GAAW,EAAA,CAAG,EAA/B,IAAqC,MAAA,CAAO,CAAP,GAAW,EAAA,CAAG,MAAM,EAAA,CAAG,CAAH,GAAO,EAAA,CAAG;oBAC3E,IAAI,CAAA,KAAM;0BACT,OAAO,CAAC;0BACJ,IAAK,CAAA,GAAI,CAAL,KAAa,MAAA,CAAO,CAAP,GAAW,EAAA,CAAG;0BACnC,MAAA,GAAS,CAAA,GAAI;;;;QAIjB,EAAA,GAAK;;IAEN,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,cAA7B,GAA8C,UAAU,EAAI,EAAA,IAC5D;IAEC,IAAI,SAAS;IACb,IAAI,UAAU;IACd,IAAI,MAAM,EAAA,CAAG,GACZ,MAAM,EAAA,CAAG;IACV,IAAI,SAAS,EAAA,CAAG,EAAH,CAAM,GAClB,SAAS,EAAA,CAAG,EAAH,CAAM;IAChB,GAAG;QACF,EAAA,GAAK,EAAA,CAAG;QACR,IAAI,SAAS,EAAA,CAAG,EAAH,CAAM,GAClB,SAAS,EAAA,CAAG,EAAH,CAAM;QAChB,IAAI,MAAA,KAAW,KACf;YACC,IAAK,MAAA,KAAW,GAAZ,IAAqB,MAAA,KAAW,GAAX,IAAoB,MAAA,GAAS,GAAV,KAAoB,MAAA,GAAS;kBACxE,OAAO,CAAC;;QAEV,IAAK,MAAA,GAAS,GAAV,KAAoB,MAAA,GAAS,KACjC;YACC,IAAI,MAAA,IAAU,KACd;gBACC,IAAI,MAAA,GAAS;sBACZ,MAAA,GAAS,CAAA,GAAI;sBAEd;oBACC,IAAI,KAAK,MAAA,GAAS,QAAQ,MAAA,GAAS,IAA3B,IAAmC,MAAA,GAAS,QAAQ,MAAA,GAAS;oBACrE,IAAI,CAAA,KAAM;0BACT,OAAO,CAAC;oBACT,IAAK,CAAA,GAAI,CAAL,KAAa,MAAA,GAAS;0BACzB,MAAA,GAAS,CAAA,GAAI;;mBAIhB;gBACC,IAAI,MAAA,GAAS,KACb;oBACC,IAAI,KAAK,MAAA,GAAS,QAAQ,MAAA,GAAS,IAA3B,IAAmC,MAAA,GAAS,QAAQ,MAAA,GAAS;oBACrE,IAAI,CAAA,KAAM;0BACT,OAAO,CAAC;oBACT,IAAK,CAAA,GAAI,CAAL,KAAa,MAAA,GAAS;0BACzB,MAAA,GAAS,CAAA,GAAI;;;;QAIjB,MAAA,GAAS;QACT,MAAA,GAAS;aACD,OAAA,KAAY;IAErB,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,kBAA7B,GAAkD,UAAU,MAAQ,EAAA,QACpE;;;IACC,IAAI,KAAK;IACT,GAAG;QAEF,IAAI,MAAMA,MAAA,CAAK,cAAL,CAAoB,EAAA,CAAG,IAAI;QACrC,IAAI,GAAA,IAAO;cACV,OAAO,GAAA,GAAM;QACd,EAAA,GAAK,EAAA,CAAG;aAEF,EAAA,KAAO;IACd,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,gBAA7B,GAAgD,UAAU,SAAW,EAAA,WACrE;;;IACC,IAAI,QAAQ;IACZ,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,UAAL,CAAgB,OAAQ,CAAA,GAAI,MAAM,CAAA,IACzD;QACC,MAAA,GAASA,MAAA,CAAK,UAAL,CAAgB;QACzB,SAAA,GAAY,UAAA,CAAW,OAAX,CAAmB,cAAnB,CAAkC,MAAA,CAAO;QACrD,IAAI,MAAA,CAAO,GAAP,KAAe,IAAf,IAAuB,SAAA,KAAc,WACzC;YACC,IAAIA,MAAA,CAAK,kBAAL,CAAwB,MAAA,CAAO,KAAK,SAAA,CAAU;kBACjD,MAAA,CAAO,SAAP,GAAmB;;;;AAKvB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,gBAA7B,GAAgD,UAAU,WAAa,EAAA,aACvE;;;IAKC,IAAI,OAAO,WAAA,CAAY;IACvB,IAAI,QAAQ;IACZ,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,UAAL,CAAgB,OAAQ,CAAA,GAAI,MAAM,CAAA,IACzD;QACC,MAAA,GAASA,MAAA,CAAK,UAAL,CAAgB;QACzB,IAAI,MAAA,CAAO,GAAP,KAAe,IAAf,IAAuB,MAAA,KAAW,WAAlC,IAAiD,MAAA,KAAW;cAC/D;QACD,SAAA,GAAY,UAAA,CAAW,OAAX,CAAmB,cAAnB,CAAkC,MAAA,CAAO;QACrD,IAAI,SAAA,KAAc,IAAd,IAAsB,SAAA,KAAc,WAApC,IAAmD,SAAA,KAAc;cACpE;QACD,IAAIA,MAAA,CAAK,kBAAL,CAAwB,MAAA,CAAO,KAAK,WAAA,CAAY;cACnD,MAAA,CAAO,SAAP,GAAmB;cACf,IAAIA,MAAA,CAAK,kBAAL,CAAwB,MAAA,CAAO,KAAK,WAAA,CAAY;cACxD,MAAA,CAAO,SAAP,GAAmB;cACf,IAAI,MAAA,CAAO,SAAP,KAAqB,WAArB,IAAoC,MAAA,CAAO,SAAP,KAAqB;cACjE,MAAA,CAAO,SAAP,GAAmB;;;AAItB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,gBAA7B,GAAgD,UAAU,SAAW,EAAA,WACrE;;;IAEC,IAAI;IACJ,IAAI;IACJ,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,UAAL,CAAgB,OAAQ,CAAA,GAAI,MAAM,CAAA,IACzD;QACC,MAAA,GAASA,MAAA,CAAK,UAAL,CAAgB;QACzB,SAAA,GAAY,UAAA,CAAW,OAAX,CAAmB,cAAnB,CAAkC,MAAA,CAAO;QACrD,IAAI,MAAA,CAAO,GAAP,KAAe,IAAf,IAAuB,SAAA,KAAc;cACxC,MAAA,CAAO,SAAP,GAAmB;;;AAItB,UAAA,CAAW,OAAX,CAAmB,cAAnB,GAAoC,UAAU,WAC9C;IACC,OAAO,SAAA,KAAc,IAAd,IAAsB,SAAA,CAAU,GAAV,KAAkB;UAC9C,SAAA,GAAY,SAAA,CAAU;IACvB,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,eAA7B,GAA+C,YAC/C;;;IACC,KAAK,IAAI,IAAI,GAAG,OAAO,IAAA,CAAK,OAAL,CAAa,OAAQ,CAAA,GAAI,MAAM,CAAA,IACtD;QACC,IAAI,OAAOA,MAAA,CAAK,OAAL,CAAa;QACxB,IAAI,UAAUA,MAAA,CAAK,SAAL,CAAe,IAAA,CAAK,MAAL,CAAY;QACzC,IAAI,UAAUA,MAAA,CAAK,SAAL,CAAe,IAAA,CAAK,MAAL,CAAY;QACzC,IAAI,OAAA,CAAQ,GAAR,KAAgB,IAAhB,IAAwB,OAAA,CAAQ,GAAR,KAAgB;cAC3C;QAED,IAAI,OAAA,CAAQ,MAAR,IAAkB,OAAA,CAAQ,QAC9B;YACC;;QAKD,IAAI;QACJ,IAAI,OAAA,KAAY;cACf,YAAA,GAAe;cACX,IAAIA,MAAA,CAAK,qBAAL,CAA2B,SAAS;cAC5C,YAAA,GAAe;cACX,IAAIA,MAAA,CAAK,qBAAL,CAA2B,SAAS;cAC5C,YAAA,GAAe;;cAEf,YAAA,GAAeA,MAAA,CAAK,eAAL,CAAqB,SAAS;QAE9C,IAAI,CAACA,MAAA,CAAK,UAAL,CAAgB,MAAM,SAAS;cAAU;QAE9C,IAAI,OAAA,KAAY,SAChB;YAGC,OAAA,CAAQ,GAAR,GAAc,IAAA,CAAK;YACnB,OAAA,CAAQ,QAAR,GAAmB;YACnB,OAAA,GAAUA,MAAA,CAAK,YAAL;YACV,OAAA,CAAQ,GAAR,GAAc,IAAA,CAAK;YAEnBA,MAAA,CAAK,eAAL,CAAqB;YAErB,IAAIA,MAAA,CAAK,kBAAL,CAAwB,OAAA,CAAQ,KAAK,OAAA,CAAQ,MACjD;gBAEC,OAAA,CAAQ,MAAR,GAAiB,CAAC,OAAA,CAAQ;gBAC1B,OAAA,CAAQ,SAAR,GAAoB;gBACpB,IAAIA,MAAA,CAAK;sBACRA,MAAA,CAAK,gBAAL,CAAsB,SAAS;gBAChC,KAAK,OAAA,CAAQ,MAAR,GAAiBA,MAAA,CAAK,oBAAqBA,MAAA,CAAK,MAAL,CAAY,QAAZ,GAAuB;sBACtEA,MAAA,CAAK,kBAAL,CAAwB,OAAA,CAAQ;mBAE7B,IAAIA,MAAA,CAAK,kBAAL,CAAwB,OAAA,CAAQ,KAAK,OAAA,CAAQ,MACtD;gBAEC,OAAA,CAAQ,MAAR,GAAiB,OAAA,CAAQ;gBACzB,OAAA,CAAQ,MAAR,GAAiB,CAAC,OAAA,CAAQ;gBAC1B,OAAA,CAAQ,SAAR,GAAoB,OAAA,CAAQ;gBAC5B,OAAA,CAAQ,SAAR,GAAoB;gBACpB,IAAIA,MAAA,CAAK;sBACRA,MAAA,CAAK,gBAAL,CAAsB,SAAS;gBAEhC,KAAK,OAAA,CAAQ,MAAR,GAAiBA,MAAA,CAAK,oBAAqBA,MAAA,CAAK,MAAL,CAAY,QAAZ,GAAuB;sBACtEA,MAAA,CAAK,kBAAL,CAAwB,OAAA,CAAQ;mBAGlC;gBAEC,OAAA,CAAQ,MAAR,GAAiB,OAAA,CAAQ;gBACzB,OAAA,CAAQ,SAAR,GAAoB,OAAA,CAAQ;gBAE5B,IAAIA,MAAA,CAAK;sBACRA,MAAA,CAAK,gBAAL,CAAsB,SAAS;;eAIlC;YAEC,OAAA,CAAQ,GAAR,GAAc;YACd,OAAA,CAAQ,QAAR,GAAmB;YACnB,OAAA,CAAQ,GAAR,GAAc,OAAA,CAAQ;YACtB,OAAA,CAAQ,MAAR,GAAiB,YAAA,CAAa;YAC9B,IAAI,YAAA,KAAiB;kBACpB,OAAA,CAAQ,SAAR,GAAoB,OAAA,CAAQ;YAC7B,OAAA,CAAQ,SAAR,GAAoB;YAEpB,IAAIA,MAAA,CAAK;kBACRA,MAAA,CAAK,gBAAL,CAAsB,SAAS;;;;AAKnC,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,eAA7B,GAA+C,UAAU,QACzD;IACC,IAAI,KAAK,MAAA,CAAO;IAChB,GAAG;QACF,EAAA,CAAG,GAAH,GAAS,MAAA,CAAO;QAChB,EAAA,GAAK,EAAA,CAAG;aAEF,EAAA,KAAO,MAAA,CAAO;;AAGtB,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,gBAA7B,GAAgD,YAChD;;;IACC,IAAI,IAAI;IACR,OAAO,CAAA,GAAI,IAAA,CAAK,UAAL,CAAgB,QAC3B;QACC,IAAI,SAASA,MAAA,CAAK,UAAL,CAAgB,CAAA;QAC7B,IAAI,KAAK,MAAA,CAAO;QAChB,IAAI,EAAA,KAAO,IAAP,IAAe,MAAA,CAAO;cACzB;QACD,GACA;YACC,IAAI,MAAM,EAAA,CAAG;YACb,OAAO,GAAA,KAAQ,MAAA,CAAO,KACtB;gBACC,IAAK,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,EAAA,CAAG,IAAI,GAAA,CAAI,GAA1C,IAAkD,GAAA,CAAI,IAAJ,KAAa,EAA/D,IAAqE,GAAA,CAAI,IAAJ,KAAa,IACtF;oBAEC,IAAI,MAAM,EAAA,CAAG;oBACb,IAAI,MAAM,GAAA,CAAI;oBACd,EAAA,CAAG,IAAH,GAAU;oBACV,GAAA,CAAI,IAAJ,GAAW;oBACX,GAAA,CAAI,IAAJ,GAAW;oBACX,GAAA,CAAI,IAAJ,GAAW;oBACX,MAAA,CAAO,GAAP,GAAa;oBACb,IAAI,UAAUA,MAAA,CAAK,YAAL;oBACd,OAAA,CAAQ,GAAR,GAAc;oBACdA,MAAA,CAAK,eAAL,CAAqB;oBACrB,IAAIA,MAAA,CAAK,kBAAL,CAAwB,OAAA,CAAQ,KAAK,MAAA,CAAO,MAChD;wBAEC,OAAA,CAAQ,MAAR,GAAiB,CAAC,MAAA,CAAO;wBACzB,OAAA,CAAQ,SAAR,GAAoB;wBACpB,IAAIA,MAAA,CAAK;8BAAiBA,MAAA,CAAK,gBAAL,CAAsB,SAAS;2BAGrD,IAAIA,MAAA,CAAK,kBAAL,CAAwB,MAAA,CAAO,KAAK,OAAA,CAAQ,MACrD;wBAEC,OAAA,CAAQ,MAAR,GAAiB,MAAA,CAAO;wBACxB,MAAA,CAAO,MAAP,GAAgB,CAAC,OAAA,CAAQ;wBACzB,OAAA,CAAQ,SAAR,GAAoB,MAAA,CAAO;wBAC3B,MAAA,CAAO,SAAP,GAAmB;wBACnB,IAAIA,MAAA,CAAK;8BAAiBA,MAAA,CAAK,gBAAL,CAAsB,QAAQ;2BAGzD;wBAEC,OAAA,CAAQ,MAAR,GAAiB,MAAA,CAAO;wBACxB,OAAA,CAAQ,SAAR,GAAoB,MAAA,CAAO;wBAC3B,IAAIA,MAAA,CAAK;8BAAiBA,MAAA,CAAK,gBAAL,CAAsB,QAAQ;;oBAEzD,GAAA,GAAM;;gBAGP,GAAA,GAAM,GAAA,CAAI;;YAEX,EAAA,GAAK,EAAA,CAAG;iBAEF,EAAA,KAAO,MAAA,CAAO;;;AAIvB,UAAA,CAAW,OAAX,CAAmB,IAAnB,GAA0B,UAAU,MACpC;IACC,IAAI,CAAC,KAAA,CAAM,OAAN,CAAc;UAClB,OAAO;IACR,IAAI,MAAM,IAAA,CAAK;IACf,IAAI,GAAA,GAAM;UACT,OAAO;IACR,IAAI,IAAI;IACR,KAAK,IAAI,IAAI,GAAG,IAAI,GAAA,GAAM,EAAG,CAAA,GAAI,KAAK,EAAE,GACxC;QACC,CAAA,KAAM,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,IAAA,CAAK,EAAL,CAAQ,MAAM,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,IAAA,CAAK,EAAL,CAAQ;QACpD,CAAA,GAAI;;IAEL,OAAO,CAAC,CAAD,GAAK;;AAGb,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,IAA7B,GAAoC,UAAU,IAC9C;IACC,IAAI,UAAU;IACd,IAAI,EAAA,KAAO;UAAM,OAAO;IACxB,IAAI,IAAI;IACR,GAAG;QACF,CAAA,GAAI,CAAA,IAAK,EAAA,CAAG,IAAH,CAAQ,EAAR,CAAW,CAAX,GAAe,EAAA,CAAG,EAAH,CAAM,MAAM,EAAA,CAAG,IAAH,CAAQ,EAAR,CAAW,CAAX,GAAe,EAAA,CAAG,EAAH,CAAM;QACzD,EAAA,GAAK,EAAA,CAAG;aACA,EAAA,KAAO;IAChB,OAAO,CAAA,GAAI;;AAGZ,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,MAA7B,GAAsC,UAAU,QAChD;IACC,OAAO,IAAA,CAAK,IAAL,CAAU,MAAA,CAAO;;AAGzB,UAAA,CAAW,OAAX,CAAmB,eAAnB,GAAqC,UAAU,IAAM,EAAA,UACrD;IACC,IAAI,SAAS,IAAI,KAAJ;IACb,IAAI,IAAI,IAAI,UAAA,CAAW,OAAf,CAAuB;IAC/B,CAAA,CAAE,cAAF,GAAmB;IACnB,CAAA,CAAE,OAAF,CAAU,MAAM,UAAA,CAAW,QAAX,CAAoB,WAAW;IAC/C,CAAA,CAAE,OAAF,CAAU,UAAA,CAAW,QAAX,CAAoB,SAAS,QAAQ,UAAU;IACzD,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,gBAAnB,GAAsC,UAAU,KAAO,EAAA,UACvD;IACC,IAAI,OAAQ,QAAR,KAAsB;UAAa,QAAA,GAAW,UAAA,CAAW,YAAX,CAAwB;IAC1E,IAAI,SAAS,IAAI,KAAJ;IACb,IAAI,IAAI,IAAI,UAAA,CAAW,OAAf,CAAuB;IAC/B,CAAA,CAAE,cAAF,GAAmB;IACnB,CAAA,CAAE,QAAF,CAAW,OAAO,UAAA,CAAW,QAAX,CAAoB,WAAW;IACjD,CAAA,CAAE,OAAF,CAAU,UAAA,CAAW,QAAX,CAAoB,SAAS,QAAQ,UAAU;IACzD,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,YAAnB,GAAkC,UAAU,GAAK,EAAA,KACjD;IACC,IAAI,KAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;IACtB,IAAI,KAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;IACtB,OAAQ,EAAA,GAAK,EAAL,GAAU,EAAA,GAAK;;AAGxB,UAAA,CAAW,OAAX,CAAmB,oBAAnB,GAA0C,UAAU,EAAI,EAAA,GAAK,EAAA,KAC7D;IAOC,IAAI,IAAI,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;IACpB,IAAI,IAAI,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;IACpB,IAAI,IAAI,CAAA,GAAI,GAAA,CAAI,CAAR,GAAY,CAAA,GAAI,GAAA,CAAI;IAC5B,CAAA,GAAI,CAAA,GAAI,EAAA,CAAG,CAAP,GAAW,CAAA,GAAI,EAAA,CAAG,CAAlB,GAAsB;IAC1B,OAAQ,CAAA,GAAI,CAAL,IAAW,CAAA,GAAI,CAAJ,GAAQ,CAAA,GAAI;;AAG/B,UAAA,CAAW,OAAX,CAAmB,mBAAnB,GAAyC,UAAU,GAAK,EAAA,GAAK,EAAA,GAAK,EAAA,UAClE;IAIC,IAAI,IAAA,CAAK,GAAL,CAAS,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,EAArB,GAA0B,IAAA,CAAK,GAAL,CAAS,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,IACnD;QACC,IAAK,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,CAAb,KAAqB,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;cACpC,OAAO,UAAA,CAAW,OAAX,CAAmB,oBAAnB,CAAwC,KAAK,KAAK,IAAlD,GAAyD;cAC5D,IAAK,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,CAAb,KAAqB,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;cACzC,OAAO,UAAA,CAAW,OAAX,CAAmB,oBAAnB,CAAwC,KAAK,KAAK,IAAlD,GAAyD;;cAEhE,OAAO,UAAA,CAAW,OAAX,CAAmB,oBAAnB,CAAwC,KAAK,KAAK,IAAlD,GAAyD;WAGlE;QACC,IAAK,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,CAAb,KAAqB,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;cACpC,OAAO,UAAA,CAAW,OAAX,CAAmB,oBAAnB,CAAwC,KAAK,KAAK,IAAlD,GAAyD;cAC5D,IAAK,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI,CAAb,KAAqB,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;cACzC,OAAO,UAAA,CAAW,OAAX,CAAmB,oBAAnB,CAAwC,KAAK,KAAK,IAAlD,GAAyD;;cAEhE,OAAO,UAAA,CAAW,OAAX,CAAmB,oBAAnB,CAAwC,KAAK,KAAK,IAAlD,GAAyD;;;AAInE,UAAA,CAAW,OAAX,CAAmB,cAAnB,GAAoC,UAAU,GAAK,EAAA,GAAK,EAAA,UACxD;IACC,IAAI,KAAK,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;IACrB,IAAI,KAAK,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;IACrB,OAAS,EAAA,GAAK,EAAN,GAAa,EAAA,GAAK,EAAlB,IAAyB;;AAGlC,UAAA,CAAW,OAAX,CAAmB,SAAnB,GAA+B,UAAU,IACzC;IACC,IAAI,SAAS,EAAA,CAAG;IAChB,MAAA,CAAO,IAAP,GAAc,EAAA,CAAG;IACjB,EAAA,CAAG,IAAH,CAAQ,IAAR,GAAe;IACf,MAAA,CAAO,GAAP,GAAa;IACb,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,YAAnB,GAAkC,UAAU,IAAM,EAAA,UAClD;IACC,IAAI,OAAQ,QAAR,KAAsB;UAAa,QAAA,GAAW;IAIlD,IAAI,MAAM,IAAA,CAAK;IACf,IAAI,GAAA,KAAQ;UACX,OAAO,IAAI,KAAJ;IACR,IAAI,SAAS,IAAI,KAAJ,CAAU;IACvB,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAK,EAAE;UAC1B,MAAA,CAAO,EAAP,GAAY,IAAI,UAAA,CAAW,KAAf;IACb,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAK,EAAE,GAC3B;QACC,MAAA,CAAO,EAAP,CAAU,EAAV,GAAe,IAAA,CAAK;QACpB,MAAA,CAAO,EAAP,CAAU,IAAV,GAAiB,MAAA,EAAQ,CAAA,GAAI,KAAK;QAClC,MAAA,CAAO,EAAP,CAAU,IAAV,CAAe,IAAf,GAAsB,MAAA,CAAO;QAC7B,MAAA,CAAO,EAAP,CAAU,GAAV,GAAgB;;IAEjB,IAAI,WAAW,QAAA,GAAW;IAC1B,IAAI,KAAK,MAAA,CAAO;IAChB,OAAO,EAAA,CAAG,GAAH,KAAW,CAAX,IAAgB,EAAA,CAAG,IAAH,KAAY,EAAA,CAAG,MACtC;QACC,IAAI,UAAA,CAAW,OAAX,CAAmB,cAAnB,CAAkC,EAAA,CAAG,IAAI,EAAA,CAAG,IAAH,CAAQ,IAAI,WACzD;YACC,EAAA,GAAK,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B;YAClC,GAAA;eAEI,IAAI,UAAA,CAAW,OAAX,CAAmB,cAAnB,CAAkC,EAAA,CAAG,IAAH,CAAQ,IAAI,EAAA,CAAG,IAAH,CAAQ,IAAI,WACnE;YACC,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,EAAA,CAAG;YAChC,EAAA,GAAK,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B;YAClC,GAAA,IAAO;eAEH,IAAI,UAAA,CAAW,OAAX,CAAmB,mBAAnB,CAAuC,EAAA,CAAG,IAAH,CAAQ,IAAI,EAAA,CAAG,IAAI,EAAA,CAAG,IAAH,CAAQ,IAAI,WAC/E;YACC,EAAA,GAAK,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B;YAClC,GAAA;eAGD;YACC,EAAA,CAAG,GAAH,GAAS;YACT,EAAA,GAAK,EAAA,CAAG;;;IAGV,IAAI,GAAA,GAAM;UACT,GAAA,GAAM;IACP,IAAI,SAAS,IAAI,KAAJ,CAAU;IACvB,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAK,EAAE,GAC3B;QACC,MAAA,CAAO,EAAP,GAAY,IAAI,UAAA,CAAW,OAAf,CAAuB,EAAA,CAAG;QACtC,EAAA,GAAK,EAAA,CAAG;;IAET,MAAA,GAAS;IACT,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,aAAnB,GAAmC,UAAU,KAAO,EAAA,UACpD;IACC,IAAI,SAAS,IAAI,KAAJ,CAAU,KAAA,CAAM;IAC7B,KAAK,IAAI,IAAI,GAAG,OAAO,KAAA,CAAM,OAAQ,CAAA,GAAI,MAAM,CAAA;UAC9C,MAAA,CAAO,EAAP,GAAY,UAAA,CAAW,OAAX,CAAmB,YAAnB,CAAgC,KAAA,CAAM,IAAI;IACvD,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,SAAnB,GAA+B,UAAU,OAAS,EAAA,IAAM,EAAA,KAAO,EAAA,UAC/D;IACC,IAAI,QAAS,QAAA,GAAW,IAAI;IAC5B,IAAI,UAAU,OAAA,CAAQ;IACtB,IAAI,UAAU,IAAA,CAAK;IACnB,IAAI,SAAS,IAAI,KAAJ;IACb,IAAI;UACH,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,SAAS,CAAA,IAC7B;QACC,IAAI,IAAI,IAAI,KAAJ,CAAU;QAClB,KAAK,IAAI,IAAI,GAAG,OAAO,OAAA,CAAQ,QAAQ,KAAK,OAAA,CAAQ,GAAI,CAAA,GAAI,MAAM,CAAA,IAAK,EAAA,GAAK,OAAA,CAAQ;cACnF,CAAA,CAAE,EAAF,GAAO,IAAI,UAAA,CAAW,OAAf,CAAuB,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,EAAA,CAAG,GAAG,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,EAAA,CAAG;QAChE,MAAA,CAAO,IAAP,CAAY;;;UAGb,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,SAAS,CAAA,IAC7B;QACC,IAAI,IAAI,IAAI,KAAJ,CAAU;QAClB,KAAK,IAAI,IAAI,GAAG,OAAO,OAAA,CAAQ,QAAQ,KAAK,OAAA,CAAQ,GAAI,CAAA,GAAI,MAAM,CAAA,IAAK,EAAA,GAAK,OAAA,CAAQ;cACnF,CAAA,CAAE,EAAF,GAAO,IAAI,UAAA,CAAW,OAAf,CAAuB,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,EAAA,CAAG,GAAG,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,EAAA,CAAG;QAChE,MAAA,CAAO,IAAP,CAAY;;IAEd,IAAI,QAAQ,IAAI,KAAJ;IACZ,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,OAAA,GAAU,CAAV,GAAc,OAAO,CAAA;UACxC,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,SAAS,CAAA,IAC7B;QACC,IAAI,OAAO,IAAI,KAAJ;QACX,IAAA,CAAK,IAAL,CAAU,MAAA,CAAO,CAAA,GAAI,QAAX,CAAoB,CAAA,GAAI;QAClC,IAAA,CAAK,IAAL,CAAU,MAAA,EAAQ,CAAA,GAAI,KAAK,QAAjB,CAA0B,CAAA,GAAI;QACxC,IAAA,CAAK,IAAL,CAAU,MAAA,EAAQ,CAAA,GAAI,KAAK,QAAjB,EAA2B,CAAA,GAAI,KAAK;QAC9C,IAAA,CAAK,IAAL,CAAU,MAAA,CAAO,CAAA,GAAI,QAAX,EAAqB,CAAA,GAAI,KAAK;QACxC,IAAI,CAAC,UAAA,CAAW,OAAX,CAAmB,WAAnB,CAA+B;cACnC,IAAA,CAAK,OAAL;QACD,KAAA,CAAM,IAAN,CAAW;;IAEb,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,YAAnB,GAAkC,UAAU,OAAS,EAAA,aAAe,EAAA,cACpE;IACC,IAAI,EAAE,aAAA,CAAc,EAAd,YAA4B,QAClC;QACC,IAAI,OAAO;QACX,IAAI,QAAQ,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,SAAS,MAAM,MAAM;QAC9D,IAAI,IAAI,IAAI,UAAA,CAAW,OAAf;QACR,CAAA,CAAE,QAAF,CAAW,OAAO,UAAA,CAAW,QAAX,CAAoB,WAAW;QACjD,CAAA,CAAE,OAAF,CAAU,UAAA,CAAW,QAAX,CAAoB,SAAS,OAAO,UAAA,CAAW,YAAX,CAAwB,YAAY,UAAA,CAAW,YAAX,CAAwB;QAC1G,OAAO;WAGR;QACC,IAAI,QAAQ;QACZ,IAAI,WAAW,IAAI,UAAA,CAAW,KAAf;QACf,IAAI,IAAI,IAAI,UAAA,CAAW,OAAf;QACR,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAA,CAAM,QAAQ,EAAE,GACpC;YACC,IAAI,MAAM,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,SAAS,KAAA,CAAM,IAAI,MAAM;YAChE,CAAA,CAAE,QAAF,CAAW,KAAK,UAAA,CAAW,QAAX,CAAoB,WAAW;YAC/C,IAAI,cACJ;gBACC,IAAI,OAAO,UAAA,CAAW,OAAX,CAAmB,aAAnB,CAAiC,KAAA,CAAM,IAAI,OAAA,CAAQ;gBAC9D,CAAA,CAAE,OAAF,CAAU,MAAM,UAAA,CAAW,QAAX,CAAoB,QAAQ;;;QAG9C,CAAA,CAAE,OAAF,CAAU,UAAA,CAAW,QAAX,CAAoB,SAAS,UACtC,UAAA,CAAW,YAAX,CAAwB,YAAY,UAAA,CAAW,YAAX,CAAwB;QAC7D,OAAO;;;AAIT,UAAA,CAAW,OAAX,CAAmB,aAAnB,GAAmC,UAAU,IAAM,EAAA,OACnD;IACC,IAAI,UAAU,IAAI,UAAA,CAAW,IAAf;IACd,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,IAAA,CAAK,QAAQ,CAAA;UAChC,OAAA,CAAQ,IAAR,CAAa,IAAI,UAAA,CAAW,OAAf,CAAuB,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,KAAA,CAAM,GAAG,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,KAAA,CAAM;IAC5E,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,aAAnB,GAAmC,UAAU,KAAO,EAAA,OACpD;IACC,IAAI,QAAQ,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,OAAO,OAAO,OAAO;IAC9D,IAAI,IAAI,IAAI,UAAA,CAAW,OAAf;IACR,CAAA,CAAE,QAAF,CAAW,OAAO,UAAA,CAAW,QAAX,CAAoB,WAAW;IACjD,CAAA,CAAE,OAAF,CAAU,UAAA,CAAW,QAAX,CAAoB,SAAS,OAAO,UAAA,CAAW,YAAX,CAAwB,YAAY,UAAA,CAAW,YAAX,CAAwB;IAC1G,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,eAAnB,GAAqC,UAAU,UAC/C;IACC,IAAI,SAAS,IAAI,KAAJ;IAEb,UAAA,CAAW,OAAX,CAAmB,kBAAnB,CAAsC,UAAU,UAAA,CAAW,OAAX,CAAmB,QAAnB,CAA4B,OAAO;IACnF,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,kBAAnB,GAAwC,UAAU,QAAU,EAAA,EAAI,EAAA,OAChE;IACC,IAAI,QAAQ;IACZ,QAAQ;QAEP,KAAK,UAAA,CAAW,OAAX,CAAmB,QAAnB,CAA4B;YAChC;QACD,KAAK,UAAA,CAAW,OAAX,CAAmB,QAAnB,CAA4B;YAChC,KAAA,GAAQ,CAAC,QAAA,CAAS;YAClB;QACD;YACC;;IAEF,IAAI,QAAA,CAAS,SAAT,CAAmB,MAAnB,GAA4B,CAA5B,IAAiC;UACpC,KAAA,CAAM,IAAN,CAAW,QAAA,CAAS;IACrB,KAAK,IAAI,MAAM,GAAG,MAAM,QAAA,CAAS,MAAT,IAAmB,MAAM,GAAA,CAAI,QAAQ,KAAK,GAAA,CAAI,KAAM,GAAA,GAAM,KAAK,GAAA,IAAO,EAAA,GAAK,GAAA,CAAI;UACtG,UAAA,CAAW,OAAX,CAAmB,kBAAnB,CAAsC,IAAI,IAAI;;AAGhD,UAAA,CAAW,OAAX,CAAmB,qBAAnB,GAA2C,UAAU,UACrD;IACC,IAAI,SAAS,IAAI,UAAA,CAAW,KAAf;IAEb,KAAK,IAAI,IAAI,GAAG,OAAO,QAAA,CAAS,UAAT,GAAuB,CAAA,GAAI,MAAM,CAAA;UACvD,IAAI,QAAA,CAAS,MAAT,EAAA,CAAkB,EAAlB,CAAqB;UACxB,MAAA,CAAO,IAAP,CAAY,QAAA,CAAS,MAAT,EAAA,CAAkB,EAAlB,CAAqB;IACnC,OAAO;;AAGR,UAAA,CAAW,OAAX,CAAmB,uBAAnB,GAA6C,UAAU,UACvD;IACC,IAAI,SAAS,IAAI,UAAA,CAAW,KAAf;IAEb,UAAA,CAAW,OAAX,CAAmB,kBAAnB,CAAsC,UAAU,UAAA,CAAW,OAAX,CAAmB,QAAnB,CAA4B,UAAU;IACtF,OAAO;;AAGR,OAAA,CAAQ,UAAA,CAAW,SAAS,UAAA,CAAW;AACvC,UAAA,CAAW,OAAX,CAAmB,QAAnB,GAA8B;IAC7B,OAAO,CADsB;IAE7B,QAAQ,CAFqB;IAG7B,UAAU;;AAMX,UAAA,CAAW,aAAX,GAA2B,UAAU,UAAY,EAAA,cACjD;IACC,IAAI,OAAQ,UAAR,KAAwB;UAAa,UAAA,GAAa;IACtD,IAAI,OAAQ,YAAR,KAA0B;UAAa,YAAA,GAAe,UAAA,CAAW,aAAX,CAAyB;IACnF,IAAA,CAAK,WAAL,GAAmB,IAAI,UAAA,CAAW,KAAf;IACnB,IAAA,CAAK,SAAL,GAAiB,IAAI,UAAA,CAAW,IAAf;IACjB,IAAA,CAAK,UAAL,GAAkB,IAAI,UAAA,CAAW,IAAf;IAClB,IAAA,CAAK,SAAL,GAAiB,IAAI,KAAJ;IACjB,IAAA,CAAK,OAAL,GAAe;IACf,IAAA,CAAK,MAAL,GAAc;IACd,IAAA,CAAK,KAAL,GAAa;IACb,IAAA,CAAK,KAAL,GAAa;IACb,IAAA,CAAK,UAAL,GAAkB;IAClB,IAAA,CAAK,aAAL,GAAqB;IACrB,IAAA,CAAK,QAAL,GAAgB,IAAI,UAAA,CAAW,OAAf;IAChB,IAAA,CAAK,WAAL,GAAmB,IAAI,UAAA,CAAW,QAAf;IACnB,IAAA,CAAK,UAAL,GAAkB;IAClB,IAAA,CAAK,YAAL,GAAoB;IACpB,IAAA,CAAK,QAAL,CAAc,CAAd,GAAkB,CAAC;;AAGpB,UAAA,CAAW,aAAX,CAAyB,MAAzB,GAAkC;AAClC,UAAA,CAAW,aAAX,CAAyB,iBAAzB,GAA6C;AAC7C,UAAA,CAAW,aAAX,CAAyB,SAAzB,CAAmC,KAAnC,GAA2C,YAC3C;IACC,UAAA,CAAW,KAAX,CAAiB,IAAA,CAAK,WAAL,CAAiB,MAAjB;IACjB,IAAA,CAAK,QAAL,CAAc,CAAd,GAAkB,CAAC;;AAGpB,UAAA,CAAW,aAAX,CAAyB,SAAzB,CAAmC,OAAnC,GAA6C,UAAU,IAAM,EAAA,QAAU,EAAA,SACvE;IACC,IAAI,QAAQ,IAAA,CAAK,MAAL,GAAc;IAC1B,IAAI,KAAA,GAAQ;UACX;IACD,IAAI,UAAU,IAAI,UAAA,CAAW,QAAf;IACd,OAAA,CAAQ,UAAR,GAAqB;IACrB,OAAA,CAAQ,SAAR,GAAoB;IAEpB,IAAI,OAAA,KAAY,UAAA,CAAW,OAAX,CAAmB,YAA/B,IAA+C,OAAA,KAAY,UAAA,CAAW,OAAX,CAAmB;UACjF,OAAO,KAAA,GAAQ,CAAR,IAAa,UAAA,CAAW,MAAX,CAAkB,WAAlB,CAA8B,IAAA,CAAK,IAAI,IAAA,CAAK;UAC/D,KAAA;IAEF,OAAA,CAAQ,SAAR,CAAkB,IAAlB,CAAuB,IAAA,CAAK;IAC5B,IAAI,IAAI,GACP,IAAI;IACL,KAAK,IAAI,IAAI,EAAG,CAAA,IAAK,OAAO,CAAA;UAC3B,IAAI,UAAA,CAAW,MAAX,CAAkB,aAAlB,CAAgC,OAAA,CAAQ,SAAR,CAAkB,IAAI,IAAA,CAAK,KAC/D;QACC,CAAA;QACA,OAAA,CAAQ,SAAR,CAAkB,IAAlB,CAAuB,IAAA,CAAK;QAC5B,IAAI,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,OAAA,CAAQ,SAAR,CAAkB,EAAlB,CAAqB,CAAjC,IAAuC,IAAA,CAAK,EAAL,CAAQ,CAAR,KAAc,OAAA,CAAQ,SAAR,CAAkB,EAAlB,CAAqB,CAAnC,IAAwC,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,OAAA,CAAQ,SAAR,CAAkB,EAAlB,CAAqB;cACnH,CAAA,GAAI;;IAEP,IAAI,OAAA,KAAY,UAAA,CAAW,OAAX,CAAmB,eAA/B,IAAkD,CAAA,GAAI;UAAG;IAE7D,IAAA,CAAK,WAAL,CAAiB,QAAjB,CAA0B;IAE1B,IAAI,OAAA,KAAY,UAAA,CAAW,OAAX,CAAmB;UAClC;IACD,IAAI,IAAA,CAAK,QAAL,CAAc,CAAd,GAAkB;UACrB,IAAA,CAAK,QAAL,GAAgB,IAAI,UAAA,CAAW,OAAf,CAAuB,IAAA,CAAK,WAAL,CAAiB,UAAjB,EAAA,GAAgC,GAAG;UAE3E;QACC,IAAI,KAAK,IAAA,CAAK,WAAL,CAAiB,MAAjB,EAAA,CAA0B,IAAA,CAAK,QAAL,CAAc,EAAxC,CAA2C,SAA3C,CAAqD,IAAA,CAAK,QAAL,CAAc;QAC5E,IAAI,OAAA,CAAQ,SAAR,CAAkB,EAAlB,CAAqB,CAArB,GAAyB,EAAA,CAAG,CAA5B,IAAkC,OAAA,CAAQ,SAAR,CAAkB,EAAlB,CAAqB,CAArB,KAA2B,EAAA,CAAG,CAA9B,IAAmC,OAAA,CAAQ,SAAR,CAAkB,EAAlB,CAAqB,CAArB,GAAyB,EAAA,CAAG;cACpG,IAAA,CAAK,QAAL,GAAgB,IAAI,UAAA,CAAW,OAAf,CAAuB,IAAA,CAAK,WAAL,CAAiB,UAAjB,EAAA,GAAgC,GAAG;;;AAI7E,UAAA,CAAW,aAAX,CAAyB,SAAzB,CAAmC,QAAnC,GAA8C,UAAU,KAAO,EAAA,QAAU,EAAA,SACzE;;;IACC,KAAK,IAAI,IAAI,GAAG,OAAO,KAAA,CAAM,OAAQ,CAAA,GAAI,MAAM,CAAA;UAC9CA,MAAA,CAAK,OAAL,CAAa,KAAA,CAAM,IAAI,UAAU;;AAGnC,UAAA,CAAW,aAAX,CAAyB,SAAzB,CAAmC,eAAnC,GAAqD,YACrD;;;IAGC,IAAI,IAAA,CAAK,QAAL,CAAc,CAAd,IAAmB,CAAnB,IAAwB,CAAC,UAAA,CAAW,OAAX,CAAmB,WAAnB,CAA+B,IAAA,CAAK,WAAL,CAAiB,MAAjB,EAAA,CAA0B,IAAA,CAAK,QAAL,CAAc,EAAxC,CAA2C,YACvG;QACC,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,IAAA,CAAK,WAAL,CAAiB,UAAjB,IAA+B,CAAA,IACnD;YACC,IAAI,OAAOA,MAAA,CAAK,WAAL,CAAiB,MAAjB,EAAA,CAA0B;YACrC,IAAI,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB,eAAtC,IAA0D,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB,YAAtC,IAAsD,UAAA,CAAW,OAAX,CAAmB,WAAnB,CAA+B,IAAA,CAAK;kBACvJ,IAAA,CAAK,SAAL,CAAe,OAAf;;WAIH;QACC,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,IAAA,CAAK,WAAL,CAAiB,UAAjB,IAA+B,CAAA,IACnD;YACC,IAAI,OAAOA,MAAA,CAAK,WAAL,CAAiB,MAAjB,EAAA,CAA0B;YACrC,IAAI,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB,YAAtC,IAAsD,CAAC,UAAA,CAAW,OAAX,CAAmB,WAAnB,CAA+B,IAAA,CAAK;kBAC9F,IAAA,CAAK,SAAL,CAAe,OAAf;;;;AAKJ,UAAA,CAAW,aAAX,CAAyB,aAAzB,GAAyC,UAAU,GAAK,EAAA,KACxD;IACC,IAAI,KAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;IACtB,IAAI,KAAM,GAAA,CAAI,CAAJ,GAAQ,GAAA,CAAI;IACtB,IAAK,EAAA,KAAO,CAAR,IAAe,EAAA,KAAO;UACzB,OAAO,IAAI,UAAA,CAAW,OAAf,CAAuB,GAAG;IAClC,IAAI,IAAI,CAAA,GAAI,IAAA,CAAK,IAAL,CAAU,EAAA,GAAK,EAAL,GAAU,EAAA,GAAK;IACrC,EAAA,IAAM;IACN,EAAA,IAAM;IACN,OAAO,IAAI,UAAA,CAAW,OAAf,CAAuB,IAAI,CAAC;;AAGpC,UAAA,CAAW,aAAX,CAAyB,SAAzB,CAAmC,QAAnC,GAA8C,UAAU,OACxD;;;IACC,IAAA,CAAK,WAAL,GAAmB,IAAI,KAAJ;IACnB,IAAA,CAAK,OAAL,GAAe;IAEf,IAAI,UAAA,CAAW,WAAX,CAAuB,SAAvB,CAAiC,QACrC;QAEC,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,IAAA,CAAK,WAAL,CAAiB,UAAjB,IAA+B,CAAA,IACnD;YACC,IAAI,OAAOA,MAAA,CAAK,WAAL,CAAiB,MAAjB,EAAA,CAA0B;YACrC,IAAI,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB;kBACzCA,MAAA,CAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAA,CAAK;;QAE7B;;IAGD,IAAI,IAAA,CAAK,UAAL,GAAkB;UACrB,IAAA,CAAK,UAAL,GAAkB,CAAA,IAAK,IAAA,CAAK,UAAL,GAAkB,IAAA,CAAK;;UAE9C,IAAA,CAAK,UAAL,GAAkB;IACnB,IAAI;IACJ,IAAI,IAAA,CAAK,YAAL,IAAqB;UACxB,CAAA,GAAI,UAAA,CAAW,aAAX,CAAyB;UACzB,IAAI,IAAA,CAAK,YAAL,GAAoB,IAAA,CAAK,GAAL,CAAS,MAAT,GAAkB,UAAA,CAAW,aAAX,CAAyB;UACvE,CAAA,GAAI,IAAA,CAAK,GAAL,CAAS,MAAT,GAAkB,UAAA,CAAW,aAAX,CAAyB;;UAE/C,CAAA,GAAI,IAAA,CAAK;IAEV,IAAI,QAAQ,gBAAA,GAAmB,IAAA,CAAK,IAAL,CAAU,CAAA,GAAI,CAAA,GAAI,IAAA,CAAK,GAAL,CAAS;IAC1D,IAAA,CAAK,KAAL,GAAa,IAAA,CAAK,GAAL,CAAS,UAAA,CAAW,aAAX,CAAyB,MAAzB,GAAkC;IACxD,IAAA,CAAK,KAAL,GAAa,IAAA,CAAK,GAAL,CAAS,UAAA,CAAW,aAAX,CAAyB,MAAzB,GAAkC;IACxD,IAAA,CAAK,aAAL,GAAqB,KAAA,GAAQ,UAAA,CAAW,aAAX,CAAyB;IACtD,IAAI,KAAA,GAAQ;UACX,IAAA,CAAK,KAAL,GAAa,CAAC,IAAA,CAAK;IAEpB,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,IAAA,CAAK,WAAL,CAAiB,UAAjB,IAA+B,CAAA,IACnD;QACC,IAAI,OAAOA,MAAA,CAAK,WAAL,CAAiB,MAAjB,EAAA,CAA0B;QACrCA,MAAA,CAAK,SAAL,GAAiB,IAAA,CAAK;QACtB,IAAI,MAAMA,MAAA,CAAK,SAAL,CAAe;QACzB,IAAI,GAAA,KAAQ,CAAR,IAAc,KAAA,IAAS,CAAT,KAAe,GAAA,GAAM,CAAN,IAAW,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB;cACjF;QACDA,MAAA,CAAK,UAAL,GAAkB,IAAI,KAAJ;QAClB,IAAI,GAAA,KAAQ,GACZ;YACC,IAAI,IAAA,CAAK,UAAL,KAAoB,UAAA,CAAW,QAAX,CAAoB,SAC5C;gBACC,IAAI,IAAI,GACP,IAAI;gBACL,KAAK,IAAI,IAAI,EAAG,CAAA,IAAK,OAAO,CAAA,IAC5B;oBACCA,MAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,UAAA,CAAW,OAAf,CAAuBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,CAAA,GAAI,OAAOA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,CAAA,GAAI;oBACvG,IAAI,KAAK;oBACT,CAAA,GAAI,CAAA,GAAIA,MAAA,CAAK,KAAT,GAAiBA,MAAA,CAAK,KAAL,GAAa;oBAClC,CAAA,GAAI,EAAA,GAAKA,MAAA,CAAK,KAAV,GAAkB,CAAA,GAAIA,MAAA,CAAK;;mBAIjC;gBACC,IAAI,IAAI,CAAC,GACR,IAAI,CAAC;gBACN,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,GAAG,EAAE,GACzB;oBACCA,MAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,UAAA,CAAW,OAAf,CAAuBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,CAAA,GAAI,OAAOA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,CAAA,GAAI;oBACvG,IAAI,CAAA,GAAI;0BACP,CAAA,GAAI;0BACA,IAAI,CAAA,GAAI;0BACZ,CAAA,GAAI;;0BAEJ,CAAA,GAAI,CAAC;;;YAGRA,MAAA,CAAK,WAAL,CAAiB,IAAjB,CAAsBA,MAAA,CAAK;YAC3B;;QAGDA,MAAA,CAAK,SAAL,CAAe,MAAf,GAAwB;QAExB,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,GAAA,GAAM,GAAG,CAAA;cAC5BA,MAAA,CAAK,SAAL,CAAe,IAAf,CAAoB,UAAA,CAAW,aAAX,CAAyB,aAAzB,CAAuCA,MAAA,CAAK,SAAL,CAAe,IAAIA,MAAA,CAAK,SAAL,CAAe,CAAA,GAAI;QAClG,IAAI,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB,YAAtC,IAAsD,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB;cAC/FA,MAAA,CAAK,SAAL,CAAe,IAAf,CAAoB,UAAA,CAAW,aAAX,CAAyB,aAAzB,CAAuCA,MAAA,CAAK,SAAL,CAAe,GAAA,GAAM,IAAIA,MAAA,CAAK,SAAL,CAAe;;cAEnGA,MAAA,CAAK,SAAL,CAAe,IAAf,CAAoB,IAAI,UAAA,CAAW,OAAf,CAAuBA,MAAA,CAAK,SAAL,CAAe,GAAA,GAAM;QACjE,IAAI,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB,iBAC1C;YACC,IAAI,IAAI,GAAA,GAAM;YACd,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAK,CAAA;kBACxB,CAAA,GAAIA,MAAA,CAAK,WAAL,CAAiB,GAAG,GAAG,IAAA,CAAK;YACjCA,MAAA,CAAK,WAAL,CAAiB,IAAjB,CAAsBA,MAAA,CAAK;eAEvB,IAAI,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB,cAC/C;YACC,IAAI,IAAI,GAAA,GAAM;YACd,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAK,CAAA;kBACxB,CAAA,GAAIA,MAAA,CAAK,WAAL,CAAiB,GAAG,GAAG,IAAA,CAAK;YACjCA,MAAA,CAAK,WAAL,CAAiB,IAAjB,CAAsBA,MAAA,CAAK;YAC3BA,MAAA,CAAK,UAAL,GAAkB,IAAI,KAAJ;YAElB,IAAI,IAAIA,MAAA,CAAK,SAAL,CAAe,GAAA,GAAM;YAC7B,KAAK,IAAI,IAAI,GAAA,GAAM,EAAG,CAAA,GAAI,GAAG,CAAA;kBAC5BA,MAAA,CAAK,SAAL,CAAe,EAAf,GAAoB,IAAI,UAAA,CAAW,OAAf,CAAuB,CAACA,MAAA,CAAK,SAAL,CAAe,CAAA,GAAI,EAAnB,CAAsB,GAAG,CAACA,MAAA,CAAK,SAAL,CAAe,CAAA,GAAI,EAAnB,CAAsB;YAC7FA,MAAA,CAAK,SAAL,CAAe,EAAf,GAAoB,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAC,CAAA,CAAE,GAAG,CAAC,CAAA,CAAE;YACpD,CAAA,GAAI;YACJ,KAAK,IAAI,IAAI,GAAA,GAAM,EAAG,CAAA,IAAK,GAAG,CAAA;kBAC7B,CAAA,GAAIA,MAAA,CAAK,WAAL,CAAiB,GAAG,GAAG,IAAA,CAAK;YACjCA,MAAA,CAAK,WAAL,CAAiB,IAAjB,CAAsBA,MAAA,CAAK;eAG5B;YACC,IAAI,IAAI;YACR,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,GAAA,GAAM,GAAG,EAAE;kBAC9B,CAAA,GAAIA,MAAA,CAAK,WAAL,CAAiB,GAAG,GAAG,IAAA,CAAK;YACjC,IAAI;YACJ,IAAI,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB,YAC1C;gBACC,IAAI,IAAI,GAAA,GAAM;gBACd,GAAA,GAAM,IAAI,UAAA,CAAW,OAAf,CAAuBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,OAAOA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB;gBAC5HA,MAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB;gBACrB,GAAA,GAAM,IAAI,UAAA,CAAW,OAAf,CAAuBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,OAAOA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB;gBAC5HA,MAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB;mBAGtB;gBACC,IAAI,IAAI,GAAA,GAAM;gBACd,CAAA,GAAI,GAAA,GAAM;gBACVA,MAAA,CAAK,MAAL,GAAc;gBACdA,MAAA,CAAK,SAAL,CAAe,EAAf,GAAoB,IAAI,UAAA,CAAW,OAAf,CAAuB,CAACA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,GAAG,CAACA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB;gBACpF,IAAI,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB;sBACzCA,MAAA,CAAK,QAAL,CAAc,GAAG;;sBAEjBA,MAAA,CAAK,OAAL,CAAa,GAAG;;YAGlB,KAAK,IAAI,IAAI,GAAA,GAAM,EAAG,CAAA,GAAI,GAAG,CAAA;kBAC5BA,MAAA,CAAK,SAAL,CAAe,EAAf,GAAoB,IAAI,UAAA,CAAW,OAAf,CAAuB,CAACA,MAAA,CAAK,SAAL,CAAe,CAAA,GAAI,EAAnB,CAAsB,GAAG,CAACA,MAAA,CAAK,SAAL,CAAe,CAAA,GAAI,EAAnB,CAAsB;YAC7FA,MAAA,CAAK,SAAL,CAAe,EAAf,GAAoB,IAAI,UAAA,CAAW,OAAf,CAAuB,CAACA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,GAAG,CAACA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB;YACpF,CAAA,GAAI,GAAA,GAAM;YACV,KAAK,IAAI,IAAI,CAAA,GAAI,EAAG,CAAA,GAAI,GAAG,EAAE;kBAC5B,CAAA,GAAIA,MAAA,CAAK,WAAL,CAAiB,GAAG,GAAG,IAAA,CAAK;YACjC,IAAI,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB,YAC1C;gBACC,GAAA,GAAM,IAAI,UAAA,CAAW,OAAf,CAAuBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,OAAOA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB;gBAC5HA,MAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB;gBACrB,GAAA,GAAM,IAAI,UAAA,CAAW,OAAf,CAAuBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,OAAOA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB;gBAC5HA,MAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB;mBAGtB;gBACC,CAAA,GAAI;gBACJA,MAAA,CAAK,MAAL,GAAc;gBACd,IAAI,IAAA,CAAK,SAAL,KAAmB,UAAA,CAAW,OAAX,CAAmB;sBACzCA,MAAA,CAAK,QAAL,CAAc,GAAG;;sBAEjBA,MAAA,CAAK,OAAL,CAAa,GAAG;;YAElBA,MAAA,CAAK,WAAL,CAAiB,IAAjB,CAAsBA,MAAA,CAAK;;;;AAK9B,UAAA,CAAW,aAAX,CAAyB,SAAzB,CAAmC,OAAnC,GAA6C,YAC7C;IACC,IAAI,IAAI,WACP,aAAa,CAAA,CAAE,EAAF,YAAgB,UAAA,CAAW;IACzC,IAAI,CAAC,YACL;QACC,IAAI,WAAW,CAAA,CAAE,IAChB,QAAQ,CAAA,CAAE;QACX,UAAA,CAAW,KAAX,CAAiB;QACjB,IAAA,CAAK,eAAL;QACA,IAAA,CAAK,QAAL,CAAc;QAEd,IAAI,OAAO,IAAI,UAAA,CAAW,OAAf,CAAuB;QAClC,IAAA,CAAK,QAAL,CAAc,IAAA,CAAK,aAAa,UAAA,CAAW,QAAX,CAAoB,WAAW;QAC/D,IAAI,KAAA,GAAQ,GACZ;YACC,IAAA,CAAK,OAAL,CAAa,UAAA,CAAW,QAAX,CAAoB,SAAS,UAAU,UAAA,CAAW,YAAX,CAAwB,aAAa,UAAA,CAAW,YAAX,CAAwB;eAGlH;YACC,IAAI,IAAI,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,IAAA,CAAK;YAC1C,IAAI,QAAQ,IAAI,UAAA,CAAW,IAAf;YACZ,KAAA,CAAM,IAAN,CAAW,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE,IAAF,GAAS,IAAI,CAAA,CAAE,MAAF,GAAW;YAC1D,KAAA,CAAM,IAAN,CAAW,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE,KAAF,GAAU,IAAI,CAAA,CAAE,MAAF,GAAW;YAC3D,KAAA,CAAM,IAAN,CAAW,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE,KAAF,GAAU,IAAI,CAAA,CAAE,GAAF,GAAQ;YACxD,KAAA,CAAM,IAAN,CAAW,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE,IAAF,GAAS,IAAI,CAAA,CAAE,GAAF,GAAQ;YACvD,IAAA,CAAK,OAAL,CAAa,OAAO,UAAA,CAAW,QAAX,CAAoB,WAAW;YACnD,IAAA,CAAK,eAAL,GAAuB;YACvB,IAAA,CAAK,OAAL,CAAa,UAAA,CAAW,QAAX,CAAoB,SAAS,UAAU,UAAA,CAAW,YAAX,CAAwB,aAAa,UAAA,CAAW,YAAX,CAAwB;YACjH,IAAI,QAAA,CAAS,MAAT,GAAkB;kBACrB,QAAA,CAAS,MAAT,CAAgB,GAAG;;WAKtB;QACC,IAAI,WAAW,CAAA,CAAE,IAChB,QAAQ,CAAA,CAAE;QACX,QAAA,CAAS,KAAT;QACA,IAAA,CAAK,eAAL;QACA,IAAA,CAAK,QAAL,CAAc;QAEd,IAAI,OAAO,IAAI,UAAA,CAAW,OAAf,CAAuB;QAClC,IAAA,CAAK,QAAL,CAAc,IAAA,CAAK,aAAa,UAAA,CAAW,QAAX,CAAoB,WAAW;QAC/D,IAAI,KAAA,GAAQ,GACZ;YACC,IAAA,CAAK,OAAL,CAAa,UAAA,CAAW,QAAX,CAAoB,SAAS,UAAU,UAAA,CAAW,YAAX,CAAwB,aAAa,UAAA,CAAW,YAAX,CAAwB;eAGlH;YACC,IAAI,IAAI,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B,IAAA,CAAK;YAC1C,IAAI,QAAQ,IAAI,UAAA,CAAW,IAAf;YACZ,KAAA,CAAM,IAAN,CAAW,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE,IAAF,GAAS,IAAI,CAAA,CAAE,MAAF,GAAW;YAC1D,KAAA,CAAM,IAAN,CAAW,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE,KAAF,GAAU,IAAI,CAAA,CAAE,MAAF,GAAW;YAC3D,KAAA,CAAM,IAAN,CAAW,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE,KAAF,GAAU,IAAI,CAAA,CAAE,GAAF,GAAQ;YACxD,KAAA,CAAM,IAAN,CAAW,IAAI,UAAA,CAAW,OAAf,CAAuB,CAAA,CAAE,IAAF,GAAS,IAAI,CAAA,CAAE,GAAF,GAAQ;YACvD,IAAA,CAAK,OAAL,CAAa,OAAO,UAAA,CAAW,QAAX,CAAoB,WAAW;YACnD,IAAA,CAAK,eAAL,GAAuB;YACvB,IAAA,CAAK,OAAL,CAAa,UAAA,CAAW,QAAX,CAAoB,SAAS,UAAU,UAAA,CAAW,YAAX,CAAwB,aAAa,UAAA,CAAW,YAAX,CAAwB;YAEjH,IAAI,QAAA,CAAS,UAAT,EAAA,KAA0B,CAA1B,IAA+B,QAAA,CAAS,MAAT,EAAA,CAAkB,EAAlB,CAAqB,UAArB,EAAA,GAAoC,GACvE;gBACC,IAAI,YAAY,QAAA,CAAS,MAAT,EAAA,CAAkB;gBAElC,QAAA,CAAS,MAAT,EAAA,CAAkB,EAAlB,GAAuB,SAAA,CAAU,MAAV,EAAA,CAAmB;gBAC1C,QAAA,CAAS,MAAT,EAAA,CAAkB,EAAlB,CAAqB,QAArB,GAAgC;gBAChC,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,SAAA,CAAU,UAAV,IAAwB,CAAA;sBAC3C,QAAA,CAAS,QAAT,CAAkB,SAAA,CAAU,MAAV,EAAA,CAAmB;;kBAGtC,QAAA,CAAS,KAAT;;;;AAKJ,UAAA,CAAW,aAAX,CAAyB,SAAzB,CAAmC,WAAnC,GAAiD,UAAU,CAAG,EAAA,CAAG,EAAA,UACjE;IAEC,IAAA,CAAK,MAAL,GAAe,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAxC,GAA4C,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB;IAEnG,IAAI,IAAA,CAAK,MAAL,KAAgB,GACpB;QACI,OAAO;WAwBN,IAAI,IAAA,CAAK,MAAL,GAAc;UACtB,IAAA,CAAK,MAAL,GAAc;UACV,IAAI,IAAA,CAAK,MAAL,GAAc,CAAC;UACvB,IAAA,CAAK,MAAL,GAAc,CAAC;IAChB,IAAI,IAAA,CAAK,MAAL,GAAc,IAAA,CAAK,OAAnB,GAA6B,GACjC;QACC,IAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,UAAA,CAAW,OAAf,CAAuB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAC5F,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK;QAClD,IAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,UAAA,CAAW,OAAf,CAAuB,IAAA,CAAK,SAAL,CAAe;QAC3D,IAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,UAAA,CAAW,OAAf,CAAuB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAC5F,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK;;UAGlD,QAAQ;QAER,KAAK,UAAA,CAAW,QAAX,CAAoB;YAEvB,IAAI,IAAI,CAAA,IAAK,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAxC,GAA4C,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB;YACjG,IAAI,CAAA,IAAK,IAAA,CAAK;kBACb,IAAA,CAAK,OAAL,CAAa,GAAG,GAAG;;kBAEnB,IAAA,CAAK,QAAL,CAAc,GAAG;YAClB;QAEF,KAAK,UAAA,CAAW,QAAX,CAAoB;YACxB,IAAA,CAAK,QAAL,CAAc,GAAG;YACjB;QACD,KAAK,UAAA,CAAW,QAAX,CAAoB;YACxB,IAAA,CAAK,OAAL,CAAa,GAAG;YAChB;;IAEF,CAAA,GAAI;IACJ,OAAO;;AAGR,UAAA,CAAW,aAAX,CAAyB,SAAzB,CAAmC,QAAnC,GAA8C,UAAU,CAAG,EAAA,GAC3D;IACC,IAAI,KAAK,IAAA,CAAK,GAAL,CAAS,IAAA,CAAK,KAAL,CAAW,IAAA,CAAK,QACjC,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAxC,GAA4C,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,EADnE,GACwE;IAC1F,IAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,UAAA,CAAW,OAAf,CACpB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,OAAL,IAAgB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,KAClF,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,OAAL,IAAgB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB;IACnF,IAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,UAAA,CAAW,OAAf,CACpB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,OAAL,IAAgB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,KAClF,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,OAAL,IAAgB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB;;AAGpF,UAAA,CAAW,aAAX,CAAyB,SAAzB,CAAmC,OAAnC,GAA6C,UAAU,CAAG,EAAA,CAAG,EAAA,GAC7D;IACC,IAAI,IAAI,IAAA,CAAK,OAAL,GAAe;IACvB,IAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,UAAA,CAAW,OAAf,CACpB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,IAAuB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,KAAK,GACpE,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,IAAuB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,KAAK;;AAGtE,UAAA,CAAW,aAAX,CAAyB,SAAzB,CAAmC,OAAnC,GAA6C,UAAU,CAAG,EAAA,GAC1D;;;IACC,IAAI,IAAI,IAAA,CAAK,KAAL,CAAW,IAAA,CAAK,QACvB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAxC,GAA4C,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB;IAErF,IAAI,QAAQ,IAAA,CAAK,GAAL,CAAS,IAAA,CAAK,KAAL,CAAW,IAAA,CAAK,aAAL,GAAqB,IAAA,CAAK,GAAL,CAAS,KAAK;IAEnE,IAAI,IAAI,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,GACzB,IAAI,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,GACtB;IACD,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,OAAO,EAAE,GAC7B;QACCA,MAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,UAAA,CAAW,OAAf,CACpBA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,CAAA,GAAIA,MAAA,CAAK,SAC/BA,MAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,CAAA,GAAIA,MAAA,CAAK;QAChC,EAAA,GAAK;QACL,CAAA,GAAI,CAAA,GAAIA,MAAA,CAAK,KAAT,GAAiBA,MAAA,CAAK,KAAL,GAAa;QAClC,CAAA,GAAI,EAAA,GAAKA,MAAA,CAAK,KAAV,GAAkB,CAAA,GAAIA,MAAA,CAAK;;IAEhC,IAAA,CAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,UAAA,CAAW,OAAf,CACpB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SACjD,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK,SAAL,CAAe,EAAf,CAAkB,CAAlB,GAAsB,IAAA,CAAK;;AAGnD,UAAA,CAAW,KAAX,GAAmB,UAAU,SAC7B;IACC,IACA;QACC,MAAM,IAAI,KAAJ,CAAU;KAEjB,QAAO,KACP;QACC,KAAA,CAAM,GAAA,CAAI;;;AAOZ,UAAA,CAAW,EAAX,GAAgB;AAEhB,UAAA,CAAW,EAAX,CAAc,aAAd,GAA8B,UAAU,MACxC;IACC,OAAO,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB;;AAGhC,UAAA,CAAW,EAAX,CAAc,cAAd,GAA+B,UAAU,MACzC;IACC,IAAI,OAAO;IACX,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,IAAA,CAAK,QAAQ,CAAA,IACjC;QACC,IAAA,IAAQ,UAAA,CAAW,OAAX,CAAmB,IAAnB,CAAwB,IAAA,CAAK;;IAEtC,OAAO;;AAGR,UAAA,CAAW,EAAX,CAAc,YAAd,GAA6B,UAAU,MACvC;IACC,OAAO,UAAA,CAAW,EAAX,CAAc,aAAd,CAA4B,CAAC;;AAGrC,UAAA,CAAW,EAAX,CAAc,aAAd,GAA8B,UAAU,OACxC;IACC,IAAI,SAAS,UAAA,CAAW,OAAX,CAAmB,SAAnB,CAA6B;IAC1C,OAAO;;AAKR,UAAA,CAAW,EAAX,CAAc,KAAd,GAAsB,UAAU,OAAS,EAAA,OACzC;IACC,IAAI,EAAE,OAAA,YAAmB;UAAQ,OAAO;IACxC,IAAI,aAAa,OAAA,CAAQ,EAAR,YAAsB;IACvC,IAAI,UAAU,UAAA,CAAW,EAAX,CAAc,KAAd,CAAoB;IAClC,IAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAA,KAAU,MAC3C;QACC,UAAA,CAAW,KAAX,CAAiB;QACjB,OAAO;;IAER,IAAI,OAAA,CAAQ,MAAR,KAAmB,CAAnB,IAAyB,OAAA,CAAQ,MAAR,KAAmB,CAAnB,IAAwB,OAAA,CAAQ,EAAR,CAAW,MAAX,KAAsB,CAAvE,IAA6E,KAAA,GAAQ;UAAG,OAAO;IACnG,IAAI,CAAC;UAAY,OAAA,GAAU,CAAC;IAC5B,IAAI,WAAW,OAAA,CAAQ;IACvB,IAAI,KAAK,MAAM,QAAQ,GAAG,GAAG,GAAG;IAChC,IAAI,UAAU;IACd,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,UAAU,CAAA,IAC9B;QACC,IAAA,GAAO,OAAA,CAAQ;QACf,GAAA,GAAM,IAAA,CAAK;QACX,IAAI,GAAA,KAAQ;cAAG;cACV,IAAI,GAAA,GAAM,GACf;YACC,MAAA,GAAS;YACT,OAAA,CAAQ,IAAR,CAAa;YACb;;QAED,MAAA,GAAS;QACT,CAAA,GAAI,KAAA,GAAQ;QAEZ,CAAA,GAAI,IAAA,CAAK;QACT,CAAA,GAAI;QACJ,KAAK,CAAA,GAAI,GAAG,CAAA,GAAI,KAAK,CAAA,IACrB;YACC,KAAK,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,CAAA,CAAE,MAAM,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,CAAA,CAAE,EAAnC,IACF,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,CAAA,CAAE,MAAM,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,CAAA,CAAE,EADhC,IACsC;kBACzC;YACD,MAAA,CAAO,EAAP,GAAY,IAAA,CAAK;YACjB,CAAA,GAAI,IAAA,CAAK;YACT,CAAA;;QAED,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI;QACb,KAAK,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,CAAA,CAAE,MAAM,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,CAAA,CAAE,EAAnC,IACF,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,CAAA,CAAE,MAAM,IAAA,CAAK,EAAL,CAAQ,CAAR,GAAY,CAAA,CAAE,EADhC,IACsC;cACzC,CAAA;QACD,IAAI,CAAA,GAAI;cACP,MAAA,CAAO,MAAP,CAAc,GAAG,GAAA,GAAM;QACxB,IAAI,MAAA,CAAO;cAAQ,OAAA,CAAQ,IAAR,CAAa;;IAEjC,IAAI,CAAC,UAAD,IAAe,OAAA,CAAQ;UAAQ,OAAA,GAAU,OAAA,CAAQ;UAChD,IAAI,CAAC,UAAD,IAAe,OAAA,CAAQ,MAAR,KAAmB;UAAG,OAAA,GAAU;UACnD,IAAI,UAAA,IAAc,OAAA,CAAQ,MAAR,KAAmB;UAAG,OAAA,GAAU,CACtD;IAED,OAAO;;AAKR,UAAA,CAAW,EAAX,CAAc,KAAd,GAAsB,UAAU,SAChC;IACC,IAAI,EAAE,OAAA,YAAmB;UAAQ,OAAO;IACxC,IAAI,OAAA,CAAQ,MAAR,KAAmB;UAAG,OAAO;UAC5B,IAAI,OAAA,CAAQ,MAAR,KAAmB,CAAnB,IAAwB,OAAA,CAAQ,EAAR,CAAW,MAAX,KAAsB;UAAG,OAAO,CAChE;IAED,IAAI,aAAa,OAAA,CAAQ,EAAR,YAAsB;IACvC,IAAI,CAAC;UAAY,OAAA,GAAU,CAAC;IAC5B,IAAI,MAAM,OAAA,CAAQ,QACjB,MAAM,GAAG,GAAG;IACb,IAAI,UAAU,IAAI,KAAJ,CAAU;IACxB,KAAK,CAAA,GAAI,GAAG,CAAA,GAAI,KAAK,CAAA,IACrB;QACC,IAAA,GAAO,OAAA,CAAQ,EAAR,CAAW;QAClB,MAAA,GAAS,IAAI,KAAJ,CAAU;QACnB,KAAK,CAAA,GAAI,GAAG,CAAA,GAAI,MAAM,CAAA,IACtB;YACC,MAAA,CAAO,EAAP,GAAY;gBACX,GAAG,OAAA,CAAQ,EAAR,CAAW,EAAX,CAAc,CADN;gBAEX,GAAG,OAAA,CAAQ,EAAR,CAAW,EAAX,CAAc;;;QAInB,OAAA,CAAQ,EAAR,GAAa;;IAEd,IAAI,CAAC;UAAY,OAAA,GAAU,OAAA,CAAQ;IACnC,OAAO;;AAMR,UAAA,CAAW,EAAX,CAAc,OAAd,GAAwB,UAAU,OAAS,EAAA,WAC3C;IACC,IAAI,EAAE,OAAA,YAAmB;UAAQ,OAAO;IACxC,IAAI,OAAO,SAAP,KAAqB,QAArB,IAAiC,SAAA,KAAc,MACnD;QACC,UAAA,CAAW,KAAX,CAAiB;QACjB,OAAO,UAAA,CAAW,EAAX,CAAc,KAAd,CAAoB;;IAE5B,IAAI,OAAA,CAAQ,MAAR,KAAmB,CAAnB,IAAyB,OAAA,CAAQ,MAAR,KAAmB,CAAnB,IAAwB,OAAA,CAAQ,EAAR,CAAW,MAAX,KAAsB,CAAvE,IAA6E,SAAA,GAAY,GAC7F;QACC,OAAO,UAAA,CAAW,EAAX,CAAc,KAAd,CAAoB;;IAE5B,IAAI,aAAa,OAAA,CAAQ,EAAR,YAAsB;IACvC,IAAI,CAAC;UAAY,OAAA,GAAU,CAAC;IAC5B,IAAI,GAAG,GAAG,MAAM,GAAG,OAAO,MAAM,GAAG,GAAG,GAAG,GAAG,KAAK;IACjD,IAAI,MAAM,MAAM,GAAG,IAAI;IACvB,IAAI,MAAM,OAAA,CAAQ;IAClB,IAAI,cAAc,SAAA,GAAY;IAC9B,IAAI,UAAU;IACd,KAAK,CAAA,GAAI,GAAG,CAAA,GAAI,KAAK,CAAA,IACrB;QACC,IAAA,GAAO,OAAA,CAAQ;QACf,IAAA,GAAO,IAAA,CAAK;QACZ,IAAI,IAAA,KAAS;cAAG;QAChB,KAAK,CAAA,GAAI,GAAG,CAAA,GAAI,SAAS,CAAA,IACzB;YACC,KAAA,GAAQ;YACR,IAAA,GAAO,IAAA,CAAK;YAGZ,IAAI,IAAA,CAAK,IAAA,GAAO,EAAZ,CAAe,CAAf,KAAqB,IAAA,CAAK,EAAL,CAAQ,CAA7B,IAAkC,IAAA,CAAK,IAAA,GAAO,EAAZ,CAAe,CAAf,KAAqB,IAAA,CAAK,EAAL,CAAQ,GACnE;gBACC,OAAA,GAAU;gBACV,IAAA,CAAK,IAAL,CACA;oBACC,GAAG,IAAA,CAAK,EAAL,CAAQ,CADZ;oBAEC,GAAG,IAAA,CAAK,EAAL,CAAQ;;gBAEZ,IAAA,GAAO,IAAA,CAAK;;kBAER,OAAA,GAAU;YACf,GAAA,GAAM;YACN,KAAK,CAAA,GAAI,GAAG,CAAA,GAAI,IAAA,GAAO,GAAG,CAAA,IAC1B;gBACC,CAAA,GAAI,IAAA,CAAK;gBACT,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI;gBACb,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI;gBACb,EAAA,GAAK,CAAA,CAAE;gBACP,EAAA,GAAK,CAAA,CAAE;gBACP,IAAA,GAAO,CAAA,CAAE,CAAF,GAAM;gBACb,IAAA,GAAO,CAAA,CAAE,CAAF,GAAM;gBACb,IAAI,IAAA,KAAS,CAAT,IAAc,IAAA,KAAS,GAC3B;oBACC,CAAA,KAAM,CAAA,CAAE,CAAF,GAAM,MAAM,IAAb,IAAqB,CAAA,CAAE,CAAF,GAAM,MAAM,SAAS,IAAA,GAAO,IAAP,GAAc,IAAA,GAAO;oBACpE,IAAI,CAAA,GAAI,GACR;wBACC,EAAA,GAAK,CAAA,CAAE;wBACP,EAAA,GAAK,CAAA,CAAE;2BAEH,IAAI,CAAA,GAAI,GACb;wBACC,EAAA,IAAM,IAAA,GAAO;wBACb,EAAA,IAAM,IAAA,GAAO;;;gBAGf,IAAA,GAAO,CAAA,CAAE,CAAF,GAAM;gBACb,IAAA,GAAO,CAAA,CAAE,CAAF,GAAM;gBACb,CAAA,GAAI,IAAA,GAAO,IAAP,GAAc,IAAA,GAAO;gBACzB,IAAI,CAAA,IAAK,aACT;oBACC,GAAA,CAAI,CAAA,GAAI,EAAR,GAAa;oBACb,CAAA;;;YAIF,KAAA,CAAM,IAAN,CACA;gBACC,GAAG,IAAA,CAAK,EAAL,CAAQ,CADZ;gBAEC,GAAG,IAAA,CAAK,EAAL,CAAQ;;YAEZ,KAAK,CAAA,GAAI,GAAG,CAAA,GAAI,IAAA,GAAO,GAAG,CAAA;kBACzB,IAAI,CAAC,GAAA,CAAI;kBAAI,KAAA,CAAM,IAAN,CACb;gBACC,GAAG,IAAA,CAAK,EAAL,CAAQ,CADZ;gBAEC,GAAG,IAAA,CAAK,EAAL,CAAQ;;YAEb,KAAA,CAAM,IAAN,CACA;gBACC,GAAG,IAAA,CAAK,IAAA,GAAO,EAAZ,CAAe,CADnB;gBAEC,GAAG,IAAA,CAAK,IAAA,GAAO,EAAZ,CAAe;;YAGnB,IAAI;kBAAS,IAAA,CAAK,GAAL;YAEb,IAAI,CAAC,GAAA,CAAI;kBAAQ;;kBAEZ,IAAA,GAAO;;QAEb,IAAA,GAAO,KAAA,CAAM;QAEb,IAAI,KAAA,CAAM,IAAA,GAAO,EAAb,CAAgB,CAAhB,KAAsB,KAAA,CAAM,EAAN,CAAS,CAA/B,IAAoC,KAAA,CAAM,IAAA,GAAO,EAAb,CAAgB,CAAhB,KAAsB,KAAA,CAAM,EAAN,CAAS,GACvE;YACC,KAAA,CAAM,GAAN;;QAED,IAAI,KAAA,CAAM,MAAN,GAAe;cAClB,OAAA,CAAQ,IAAR,CAAa;;IAEf,IAAI,CAAC,YACL;QACC,OAAA,GAAU,OAAA,CAAQ;;IAEnB,IAAI,OAAQ,OAAR,KAAqB,aACzB;QACC,OAAA,GAAU;;IAEX,OAAO;;AAGR,UAAA,CAAW,EAAX,CAAc,eAAd,GAAgC,UAAU,IAAM,EAAA,QAChD;IACC,IAAI,OAAQ,IAAR,KAAkB;UAAa,OAAO;IAC1C,IAAI,OAAO,IAAA,CAAK;IAChB,IAAI,YAAY;IAChB,IAAI,IAAI,IAAI,MAAM,KACjB,MAAM,KACN,MAAM,KACN,MAAM;IACP,IAAI,IAAI,IAAA,CAAK;IACb,IAAI,CAAA,GAAI;UAAG,OAAO;IAClB,IAAI,QACJ;QACC,IAAA,CAAK,EAAL,GAAU,IAAA,CAAK;QACf,CAAA;;IAED,OAAO,EAAE,GACT;QACC,EAAA,GAAK,IAAA,CAAK;QACV,GAAA,GAAM,EAAA,CAAG;QACT,GAAA,GAAM,EAAA,CAAG;QACT,EAAA,GAAK,IAAA,CAAK,CAAA,GAAI;QACd,GAAA,GAAM,EAAA,CAAG;QACT,GAAA,GAAM,EAAA,CAAG;QACT,SAAA,IAAa,IAAA,EAAM,GAAA,GAAM,QAAQ,GAAA,GAAM,IAArB,IAA6B,GAAA,GAAM,QAAQ,GAAA,GAAM;;IAEpE,IAAI;UAAQ,IAAA,CAAK,GAAL;IACZ,OAAO;;AAGR,UAAA,CAAW,EAAX,CAAc,gBAAd,GAAiC,UAAU,KAAO,EAAA,QAClD;IACC,IAAI,YAAY;IAChB,KAAK,IAAI,IAAI,EAAG,CAAA,GAAI,KAAA,CAAM,QAAQ,CAAA,IAClC;QACC,SAAA,IAAa,UAAA,CAAW,EAAX,CAAc,eAAd,CAA8B,KAAA,CAAM,IAAI;;IAEtD,OAAO;;AAMR,UAAA,CAAW,UAAX,GAAwB,YACxB;IACC,OAAO;;AAKR,UAAA,CAAW,SAAX,GAAuB,YACvB;IACC,IAAA,CAAK,KAAL,GAAa;IACb,IAAA,CAAK,KAAL,GAAa;;AAGd,UAAA,CAAW,EAAX,CAAc,4BAAd,GAA6C,UAAU,QAAU,EAAA,YACjE;IACC,IAAI,KAAK,IAAI,UAAA,CAAW,SAAf;IACT,EAAA,CAAG,KAAH,GAAW,QAAA,CAAS,OAAT;IACX,IAAI,SAAS,QAAA,CAAS,MAAT;IACb,IAAI,OAAO,MAAA,CAAO;IAClB,EAAA,CAAG,KAAH,GAAW,IAAI,KAAJ,CAAU;IACrB,IAAI,MAAM,GAAG,GAAG,GAAG,SAAS;IAC5B,KAAK,CAAA,GAAI,GAAG,CAAA,GAAI,MAAM,CAAA,IACtB;QACC,IAAA,GAAO,MAAA,CAAO;QACd,EAAA,CAAG,KAAH,CAAS,EAAT,GAAc,IAAA,CAAK,OAAL;QAEd,KAAK,CAAA,GAAI,GAAG,OAAA,GAAU,IAAA,CAAK,MAAL,IAAe,IAAA,GAAO,OAAA,CAAQ,QAAQ,CAAA,GAAI,MAAM,CAAA,IACtE;YACC,CAAA,GAAI,OAAA,CAAQ;YACZ,UAAA,CAAW,EAAX,CAAc,4BAAd,CAA2C,GAAG;;;IAGhD,UAAA,CAAW,IAAX,CAAgB;;AAGjB,UAAA,CAAW,EAAX,CAAc,iBAAd,GAAkC,UAAU,YAC5C;IACC,IAAI,GAAG,GAAG,MAAM;IAChB,IAAI,QAAQ,IAAI,UAAA,CAAW,KAAf;IACZ,KAAK,CAAA,GAAI,GAAG,IAAA,GAAO,UAAA,CAAW,QAAQ,CAAA,GAAI,MAAM,CAAA,IAChD;QACC,KAAA,CAAM,IAAN,CAAW,UAAA,CAAW,EAAX,CAAc;QACzB,KAAK,CAAA,GAAI,GAAG,IAAA,GAAO,UAAA,CAAW,EAAX,CAAc,KAAd,CAAoB,QAAQ,CAAA,GAAI,MAAM,CAAA,IACzD;YACC,KAAA,CAAM,IAAN,CAAW,UAAA,CAAW,EAAX,CAAc,KAAd,CAAoB;;;IAGjC,OAAO;;AAER,UAAA,CAAW,EAAX,CAAc,oBAAd,GAAqC,UAAU,UAC/C;IACC,IAAI,aAAa,IAAI,UAAA,CAAW,UAAf;IACjB,IAAI,MAAM,GAAG,QAAQ;IACrB,KAAK,CAAA,GAAI,GAAG,MAAA,GAAS,QAAA,CAAS,MAAT,IAAmB,IAAA,GAAO,MAAA,CAAO,QAAQ,CAAA,GAAI,MAAM,CAAA,IACxE;QACC,IAAA,GAAO,MAAA,CAAO;QACd,UAAA,CAAW,EAAX,CAAc,4BAAd,CAA2C,MAAM;;IAElD,OAAO;;AAGR,MAAA,CAAO,OAAP,GAAiB"}